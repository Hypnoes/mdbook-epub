var searchIndex = {};
searchIndex["adler32"] = {"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",null,null],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",null,{"i":[{"n":"r"}],"o":{"g":["u32"],"n":"result"}}],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,{"o":{"n":"rollingadler32"}}],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,{"i":[{"n":"u32"}],"o":{"n":"rollingadler32"}}],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,null],[11,"hash","","Returns the current hash.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,{"i":[{"n":"self"},{"n":"usize"},{"n":"u8"}]}],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,null]],"paths":[[3,"RollingAdler32"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["match"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"g":["match"],"n":"option"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"i":[{"n":"acautomaton"}],"o":{"n":"fullacautomaton"}}],[11,"next_state","","",5,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"get_match","","",5,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"},{"n":"usize"}],"o":{"n":"match"}}],[11,"has_match","","",5,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"p"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"u8"}],"o":{"n":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"}],"o":{"n":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"},{"n":"usize"}],"o":{"n":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"i":[{"n":"self"},{"n":"u8"},{"n":"stateidx"}]}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"i":[{"n":"i"}],"o":{"g":["dense"],"n":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"i":[{"n":"i"}],"o":{"n":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"i":[{"n":"self"}],"o":{"n":"fullacautomaton"}}],[11,"next_state","","",8,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"get_match","","",8,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"},{"n":"usize"}],"o":{"n":"match"}}],[11,"has_match","","",8,{"i":[{"n":"self"},{"n":"stateidx"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"p"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"dense"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",9,{"i":[{"n":"u32"}],"o":{"n":"dense"}}],[11,"goto","","",9,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"set_goto","","",9,{"i":[{"n":"self"},{"n":"u8"},{"n":"stateidx"}]}],[11,"heap_bytes","","",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"sparse"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",10,{"i":[{"n":"u32"}],"o":{"n":"sparse"}}],[11,"goto","","",10,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"stateidx"}}],[11,"set_goto","","",10,{"i":[{"n":"self"},{"n":"u8"},{"n":"stateidx"}]}],[11,"heap_bytes","","",10,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"i":[{"n":"t"}],"o":{"n":"acautomaton"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[12,"foreground","","The style's foreground colour, if it has one.",0,null],[12,"background","","The style's background colour, if it has one.",0,null],[12,"is_bold","","Whether this style is bold.",0,null],[12,"is_dimmed","","Whether this style is dimmed.",0,null],[12,"is_italic","","Whether this style is italic.",0,null],[12,"is_underline","","Whether this style is underlined.",0,null],[12,"is_blink","","Whether this style is blinking.",0,null],[12,"is_reverse","","Whether this style has reverse colours.",0,null],[12,"is_hidden","","Whether this style is hidden.",0,null],[12,"is_strikethrough","","Whether this style is struckthrough.",0,null],[3,"ANSIGenericString","","An ANSIGenericString includes a generic string type and a Style to display that string.  ANSIString and ANSIByteString are aliases for this type on str and [u8], respectively.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",1,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[5,"ANSIStrings","","A function to construct an ANSIStrings instance.",null,null],[5,"ANSIByteStrings","","A function to construct an ANSIByteStrings instance.",null,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"prefix"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"infix"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"suffix"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"prefix","","The prefix for this style.",0,{"i":[{"n":"self"}],"o":{"n":"prefix"}}],[11,"infix","","The infix between this style and another.",0,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"infix"}}],[11,"suffix","","The suffix for this style.",0,{"i":[{"n":"self"}],"o":{"n":"suffix"}}],[11,"prefix","","The prefix for this colour.",2,{"i":[{"n":"self"}],"o":{"n":"prefix"}}],[11,"infix","","The infix between this colour and another.",2,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"infix"}}],[11,"suffix","","The suffix for this colour.",2,{"i":[{"n":"self"}],"o":{"n":"suffix"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"new","","Creates a new Style with no differences.",0,{"o":{"n":"style"}}],[11,"bold","","Returns a Style with the bold property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"italic","","Returns a Style with the italic property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"underline","","Returns a Style with the underline property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"blink","","Returns a Style with the blink property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"strikethrough","","Returns a Style with the hidden property set.",0,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"fg","","Returns a Style with the foreground colour property set.",0,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"style"}}],[11,"on","","Returns a Style with the background colour property set.",0,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"style"}}],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,{"o":{"n":"style"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"colour"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"bold","","Returns a Style with the bold property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"italic","","Returns a Style with the italic property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"underline","","Returns a Style with the underline property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"blink","","Returns a Style with the blink property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"strikethrough","","Returns a Style with the strikethrough property set.",2,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"on","","Returns a Style with the background colour property set.",2,{"i":[{"n":"self"},{"n":"colour"}],"o":{"n":"style"}}],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,{"i":[{"n":"colour"}],"o":{"n":"style"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"ansigenericstring"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"ansigenericstring"}],"o":{"n":"bool"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"ansigenericstring"}}],[11,"from","","",6,{"i":[{"n":"i"}],"o":{"n":"ansigenericstring"}}],[11,"deref","","",6,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"ansigenericstring"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"ansigenericstring"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"ANSIString","","An ANSI String is a string coupled with the Style to display it in a terminal.",null,null],[6,"ANSIByteString","","An ANSIByteString represents a formatted series of bytes.  Use ANSIByteString when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write_to","","Write an ANSIByteString to an io::Write.  This writes the escape sequences for the associated Style around the bytes.",8,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write_to","","Write ANSIByteStrings to an io::Write.  This writes the minimal escape sequences for the associated Styles around each set of bytes.",10,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"i":[{"n":"stream"}],"o":{"n":"bool"}}],[5,"isnt","","returns true if this is not a tty",null,{"i":[{"n":"stream"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"stream"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"i":[{"n":"f"}]}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"name","","Returns the name of this function.",1,{"i":[{"n":"self"}],"o":{"g":["symbolname"],"n":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"backtrace"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"backtraceframe"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"o":{"n":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,{"o":{"n":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,{"i":[{"n":"self"}]}],[11,"from","","",3,{"i":[{"g":["backtraceframe"],"n":"vec"}],"o":{"n":"self"}}],[11,"into","","",3,{"i":[{"n":"self"}],"o":{"g":["backtraceframe"],"n":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"i":[{"n":"self"}],"o":{"g":["symbolname"],"n":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["base64"] = {"doc":"","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",null,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",0,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",0,null],[4,"LineEnding","","",null,null],[13,"LF","","",1,null],[13,"CRLF","","",1,null],[4,"LineWrap","","",null,null],[13,"NoWrap","","",2,null],[13,"Wrap","","",2,null],[4,"DecodeError","","",null,null],[13,"InvalidByte","","",3,null],[13,"InvalidLength","","",3,null],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",null,{"i":[{"n":"t"}],"o":{"n":"string"}}],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",null,{"i":[{"n":"t"}],"o":{"g":["vec","decodeerror"],"n":"result"}}],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",null,{"i":[{"n":"t"},{"n":"config"}],"o":{"n":"string"}}],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied buffer to avoid allocations.",null,{"i":[{"n":"t"},{"n":"config"},{"n":"string"}]}],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",null,{"i":[{"n":"t"},{"n":"config"}],"o":{"g":["vec","decodeerror"],"n":"result"}}],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",null,{"i":[{"n":"t"},{"n":"config"},{"n":"vec"}],"o":{"g":["decodeerror"],"n":"result"}}],[7,"STANDARD","","",null,null],[7,"MIME","","",null,null],[7,"URL_SAFE","","",null,null],[7,"URL_SAFE_NO_PAD","","",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"characterset"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"lineending"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"linewrap"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"config"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",4,{"i":[{"n":"characterset"},{"n":"bool"},{"n":"bool"},{"n":"linewrap"}],"o":{"n":"config"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"decodeerror"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"decodeerror"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",3,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}]],"paths":[[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DecodeError"],[3,"Config"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"flags"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"o":{"n":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"o":{"n":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"i":[{"n":"u32"}],"o":{"g":["flags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"i":[{"n":"u32"}],"o":{"n":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"i":[{"n":"self"},{"n":"flags"}]}],[11,"remove","","Removes the specified flags in-place.",0,{"i":[{"n":"self"},{"n":"flags"}]}],[11,"toggle","","Toggles the specified flags in-place.",0,{"i":[{"n":"self"},{"n":"flags"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"i":[{"n":"self"},{"n":"flags"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"i":[{"n":"self"},{"n":"flags"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"i":[{"n":"self"},{"n":"flags"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"i":[{"n":"self"},{"n":"flags"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"i":[{"n":"self"},{"n":"flags"}],"o":{"n":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"i":[{"n":"self"},{"n":"flags"}]}],[11,"not","","Returns the complement of this set of flags.",0,{"i":[{"n":"self"}],"o":{"n":"flags"}}],[11,"extend","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",0,{"i":[{"n":"t"}],"o":{"n":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for `BigEndian`.",null,null],[6,"LE","","A type alias for `LittleEndian`.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"bigendian"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"n":"ordering"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"g":["ordering"],"n":"option"}}],[11,"default","","",3,{"o":{"n":"bigendian"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"littleendian"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"n":"ordering"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"g":["ordering"],"n":"option"}}],[11,"default","","",4,{"o":{"n":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["u64"],"n":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["i64"],"n":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"u64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"i":[{"n":"self"},{"n":"i64"},{"n":"usize"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"] = {"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[3,"Bytes","","A reference counted contiguous slice of memory.",null,null],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",null,null],[0,"buf","","Utilities for working with buffers.",null,null],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",null,null],[3,"Iter","","Iterator over the bytes contained by the buffer.",null,null],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",null,null],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",null,null],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",null,null],[11,"from_buf","bytes","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from_buf","","",2,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","bytes::buf","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new `Chain` sequencing the provided values.",3,{"i":[{"n":"t"},{"n":"u"}],"o":{"n":"chain"}}],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",3,{"i":[{"n":"self"}],"o":{"n":"u"}}],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",3,{"i":[{"n":"self"}],"o":{"n":"u"}}],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",3,null],[11,"remaining","","",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes","","",3,null],[11,"advance","","",3,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"bytes_vec","","",3,null],[11,"remaining_mut","","",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes_mut","","",3,null],[11,"advance_mut","","",3,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"bytes_vec_mut","","",3,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"size_hint","","",4,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",5,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",5,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",5,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"read","","",5,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"limit","","Returns the maximum number of bytes that can be read.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_limit","","Sets the maximum number of bytes that can be read.",6,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"remaining","","",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",7,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",7,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",7,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"write","","",7,null],[11,"flush","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","","Advance the internal cursor of the Buf",8,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"i":[{"n":"self"}],"o":{"n":"i8"}}],[11,"get_u16","","Gets an unsigned 16 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"get_i16","","Gets a signed 16 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"i16"}}],[11,"get_u32","","Gets an unsigned 32 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_i32","","Gets a signed 32 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_u64","","Gets an unsigned 64 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"get_i64","","Gets a signed 64 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"get_uint","","Gets an unsigned n-byte integer from `self` in the specified byte order.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"u64"}}],[11,"get_int","","Gets a signed n-byte integer from `self` in the specified byte order.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"i64"}}],[11,"get_f32","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"get_f64","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"i":[{"n":"self"}],"o":{"n":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"i":[{"n":"self"},{"n":"t"}]}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"i":[{"n":"self"},{"n":"i8"}]}],[11,"put_u16","","Writes an unsigned 16 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"put_i16","","Writes a signed 16 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i16"}]}],[11,"put_u32","","Writes an unsigned 32 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"put_i32","","Writes a signed 32 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"put_u64","","Writes an unsigned 64 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u64"}]}],[11,"put_i64","","Writes a signed 64 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i64"}]}],[11,"put_uint","","Writes an unsigned n-byte integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u64"},{"n":"usize"}]}],[11,"put_int","","Writes a signed n-byte integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i64"},{"n":"usize"}]}],[11,"put_f32","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"put_f64","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"i":[{"n":"self"}],"o":{"n":"writer"}}],[8,"FromBuf","","Conversion from a [`Buf`]",null,null],[10,"from_buf","","Creates a value from a buffer.",10,{"i":[{"n":"t"}],"o":{"n":"self"}}],[8,"IntoBuf","","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"with_capacity","bytes","Creates a new `Bytes` with the specified capacity.",1,{"i":[{"n":"usize"}],"o":{"n":"bytes"}}],[11,"new","","Creates a new empty `Bytes`.",1,{"o":{"n":"bytes"}}],[11,"from_static","","Creates a new `Bytes` from a static slice.",1,null],[11,"len","","Returns the number of bytes contained in this `Bytes`.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"split_to","","Splits the bytes into two at the given index.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytes"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"clear","","Clears the buffer, removing all data.",1,{"i":[{"n":"self"}]}],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",1,{"i":[{"n":"self"}],"o":{"g":["bytesmut","bytes"],"n":"result"}}],[11,"extend_from_slice","","Appends given bytes to this object.",1,null],[11,"into_buf","","",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"as_ref","","",1,null],[11,"deref","","",1,null],[11,"from","","",1,{"i":[{"n":"bytesmut"}],"o":{"n":"bytes"}}],[11,"from","","",1,{"i":[{"g":["u8"],"n":"vec"}],"o":{"n":"bytes"}}],[11,"from","","",1,{"i":[{"n":"string"}],"o":{"n":"bytes"}}],[11,"from","","",1,null],[11,"from","","",1,{"i":[{"n":"str"}],"o":{"n":"bytes"}}],[11,"from_iter","","",2,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from_iter","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"bytes"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"bytes"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"bytes"}],"o":{"n":"ordering"}}],[11,"default","","",1,{"o":{"n":"bytes"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,{"i":[{"n":"self"},{"n":"h"}]}],[11,"borrow","","",1,null],[11,"into_iter","","",1,null],[11,"extend","","",1,{"i":[{"n":"self"},{"n":"t"}]}],[11,"extend","","",1,{"i":[{"n":"self"},{"n":"t"}]}],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",2,{"i":[{"n":"usize"}],"o":{"n":"bytesmut"}}],[11,"new","","Creates a new `BytesMut` with default capacity.",2,{"o":{"n":"bytesmut"}}],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"freeze","","Converts `self` into an immutable `Bytes`.",2,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytesmut"}}],[11,"take","","Removes the bytes from the current view, returning them in a new `BytesMut` handle.",2,{"i":[{"n":"self"}],"o":{"n":"bytesmut"}}],[11,"split_to","","Splits the buffer into two at the given index.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bytesmut"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"clear","","Clears the buffer, removing all data.",2,{"i":[{"n":"self"}]}],[11,"set_len","","Sets the length of the buffer.",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"extend_from_slice","","Appends given bytes to this object.",2,null],[11,"unsplit","","Combine splitted BytesMut objects back as contiguous.",2,{"i":[{"n":"self"},{"n":"bytesmut"}]}],[11,"remaining_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"advance_mut","","",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"bytes_mut","","",2,null],[11,"put_slice","","",2,null],[11,"put_u8","","",2,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"put_i8","","",2,{"i":[{"n":"self"},{"n":"i8"}]}],[11,"into_buf","","",2,null],[11,"as_ref","","",2,null],[11,"deref","","",2,null],[11,"as_mut","","",2,null],[11,"deref_mut","","",2,null],[11,"from","","",2,{"i":[{"g":["u8"],"n":"vec"}],"o":{"n":"bytesmut"}}],[11,"from","","",2,{"i":[{"n":"string"}],"o":{"n":"bytesmut"}}],[11,"from","","",2,null],[11,"from","","",2,{"i":[{"n":"str"}],"o":{"n":"bytesmut"}}],[11,"from","","",2,{"i":[{"n":"bytes"}],"o":{"n":"bytesmut"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"n":"ordering"}}],[11,"default","","",2,{"o":{"n":"bytesmut"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",2,{"i":[{"n":"self"},{"n":"h"}]}],[11,"borrow","","",2,null],[11,"write_str","","",2,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"write_fmt","","",2,{"i":[{"n":"self"},{"n":"arguments"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"bytesmut"}}],[11,"into_iter","","",2,null],[11,"extend","","",2,{"i":[{"n":"self"},{"n":"t"}]}],[11,"extend","","",2,{"i":[{"n":"self"},{"n":"t"}]}],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"vec"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"vec"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"bytes"}],"o":{"n":"bool"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","bytes","Advance the internal cursor of the Buf",8,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"i":[{"n":"self"}],"o":{"n":"i8"}}],[11,"get_u16","","Gets an unsigned 16 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"get_i16","","Gets a signed 16 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"i16"}}],[11,"get_u32","","Gets an unsigned 32 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_i32","","Gets a signed 32 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_u64","","Gets an unsigned 64 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"get_i64","","Gets a signed 64 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"get_uint","","Gets an unsigned n-byte integer from `self` in the specified byte order.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"u64"}}],[11,"get_int","","Gets a signed n-byte integer from `self` in the specified byte order.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"i64"}}],[11,"get_f32","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"get_f64","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"i":[{"n":"self"}],"o":{"n":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"i":[{"n":"self"},{"n":"t"}]}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"i":[{"n":"self"},{"n":"i8"}]}],[11,"put_u16","","Writes an unsigned 16 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"put_i16","","Writes a signed 16 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i16"}]}],[11,"put_u32","","Writes an unsigned 32 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"put_i32","","Writes a signed 32 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"put_u64","","Writes an unsigned 64 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u64"}]}],[11,"put_i64","","Writes a signed 64 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i64"}]}],[11,"put_uint","","Writes an unsigned n-byte integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u64"},{"n":"usize"}]}],[11,"put_int","","Writes a signed n-byte integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i64"},{"n":"usize"}]}],[11,"put_f32","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"put_f64","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"i":[{"n":"self"}],"o":{"n":"writer"}}],[8,"IntoBuf","bytes","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"read_u16","","",12,null],[11,"read_u32","","",12,null],[11,"read_u64","","",12,null],[11,"read_uint","","",12,null],[11,"write_u16","","",12,null],[11,"write_u32","","",12,null],[11,"write_u64","","",12,null],[11,"write_uint","","",12,null],[11,"read_u16_into","","",12,null],[11,"read_u32_into","","",12,null],[11,"read_u64_into","","",12,null],[11,"write_u16_into","","",12,null],[11,"write_u32_into","","",12,null],[11,"write_u64_into","","",12,null],[11,"from_slice_u16","","",12,null],[11,"from_slice_u32","","",12,null],[11,"from_slice_u64","","",12,null],[11,"from_slice_f32","","",12,null],[11,"from_slice_f64","","",12,null],[11,"read_u16","","",13,null],[11,"read_u32","","",13,null],[11,"read_u64","","",13,null],[11,"read_uint","","",13,null],[11,"write_u16","","",13,null],[11,"write_u32","","",13,null],[11,"write_u64","","",13,null],[11,"write_uint","","",13,null],[11,"read_u16_into","","",13,null],[11,"read_u32_into","","",13,null],[11,"read_u64_into","","",13,null],[11,"write_u16_into","","",13,null],[11,"write_u32_into","","",13,null],[11,"write_u64_into","","",13,null],[11,"from_slice_u16","","",13,null],[11,"from_slice_u32","","",13,null],[11,"from_slice_u64","","",13,null],[11,"from_slice_f32","","",13,null],[11,"from_slice_f64","","",13,null],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"n":"bool"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"bigendian"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"littleendian"}}],[11,"partial_cmp","","",13,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"bigendian"}],"o":{"n":"ordering"}}],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"littleendian"}],"o":{"n":"ordering"}}],[11,"default","","",13,{"o":{"n":"littleendian"}}],[11,"default","","",12,{"o":{"n":"bigendian"}}],[11,"hash","","",13,null],[11,"hash","","",12,null],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"i":[{"n":"self"}],"o":{"n":"i8"}}],[11,"get_u16","","Gets an unsigned 16 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"get_i16","","Gets a signed 16 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"i16"}}],[11,"get_u32","","Gets an unsigned 32 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_i32","","Gets a signed 32 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_u64","","Gets an unsigned 64 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"get_i64","","Gets a signed 64 bit integer from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"get_uint","","Gets an unsigned n-byte integer from `self` in the specified byte order.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"u64"}}],[11,"get_int","","Gets a signed n-byte integer from `self` in the specified byte order.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"i64"}}],[11,"get_f32","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"get_f64","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in the specified byte order.",8,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"i":[{"n":"self"}],"o":{"n":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"i":[{"n":"self"},{"n":"t"}]}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"i":[{"n":"self"},{"n":"i8"}]}],[11,"put_u16","","Writes an unsigned 16 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"put_i16","","Writes a signed 16 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i16"}]}],[11,"put_u32","","Writes an unsigned 32 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"put_i32","","Writes a signed 32 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"put_u64","","Writes an unsigned 64 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u64"}]}],[11,"put_i64","","Writes a signed 64 bit integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i64"}]}],[11,"put_uint","","Writes an unsigned n-byte integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"u64"},{"n":"usize"}]}],[11,"put_int","","Writes a signed n-byte integer to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"i64"},{"n":"usize"}]}],[11,"put_f32","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"f32"}]}],[11,"put_f64","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in the specified byte order.",9,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"i":[{"n":"self"}],"o":{"n":"writer"}}]],"paths":[[8,"ByteOrder"],[3,"Bytes"],[3,"BytesMut"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bzip2"] = {"doc":"Bzip compression for Rust","items":[[3,"Compress","bzip2","Representation of an in-memory compression stream.",null,null],[3,"Decompress","","Representation of an in-memory decompression stream.",null,null],[4,"Action","","Possible actions to take on compression.",null,null],[13,"Run","","Normal compression.",0,null],[13,"Flush","","Request that the current compression block is terminate.",0,null],[13,"Finish","","Request that the compression stream be finalized.",0,null],[4,"Status","","Result of compression or decompression",null,null],[13,"Ok","","Decompression went fine, nothing much to report.",1,null],[13,"FlushOk","","The Flush action on a compression went ok.",1,null],[13,"RunOk","","THe Run action on compression went ok.",1,null],[13,"FinishOk","","The Finish action on compression went ok.",1,null],[13,"StreamEnd","","The stream's end has been met, meaning that no more data can be input.",1,null],[13,"MemNeeded","","There was insufficient memory in the input or output buffer to complete the request, but otherwise everything went normally.",1,null],[4,"Error","","Fatal errors encountered when compressing/decompressing bytes.",null,null],[13,"Sequence","","The sequence of operations called on a decompression/compression stream were invalid. See methods for details.",2,null],[13,"Data","","The data being decompressed was invalid, or it was not a valid bz2 stream.",2,null],[13,"DataMagic","","The magic bz2 header wasn't present when decompressing.",2,null],[13,"Param","","The parameters to this function were invalid.",2,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in this enum.",null,null],[13,"Fastest","","Optimize for the best speed of encoding.",3,null],[13,"Best","","Optimize for the size of data being encoded.",3,null],[13,"Default","","Choose the default compression, a balance between speed and size.",3,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"action"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"action"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"status"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"status"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"new","","Creates a new stream prepared for compression.",4,{"i":[{"n":"compression"},{"n":"u32"}],"o":{"n":"compress"}}],[11,"compress","","Compress a block of input into a block of output.",4,null],[11,"compress_vec","","Compress a block of input into an output vector.",4,null],[11,"total_in","","Total number of bytes processed as input",4,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Total number of bytes processed as output",4,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"new","","Creates a new stream prepared for decompression.",5,{"i":[{"n":"bool"}],"o":{"n":"decompress"}}],[11,"decompress","","Decompress a block of input into a block of output.",5,null],[11,"decompress_vec","","Decompress a block of input into an output vector.",5,null],[11,"total_in","","Total number of bytes processed as input",5,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Total number of bytes processed as output",5,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"bufread","","I/O streams for wrapping `BufRead` types as encoders/decoders",null,null],[3,"BzEncoder","bzip2::bufread","A bz2 encoder, or compressor.",null,null],[3,"BzDecoder","","A bz2 decoder, or decompressor.",null,null],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",6,{"i":[{"n":"r"},{"n":"compression"}],"o":{"n":"bzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",6,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",6,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",6,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_out","","Returns the number of bytes produced by the compressor (e.g. the number of bytes read from this stream)",6,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes read from the underlying stream)",6,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",6,null],[11,"write","","",6,null],[11,"flush","","",6,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",7,{"i":[{"n":"r"}],"o":{"n":"bzdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",7,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",7,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",7,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",7,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",7,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",7,null],[11,"write","","",7,null],[11,"flush","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[0,"read","bzip2","Reader-based compression/decompression streams",null,null],[3,"BzEncoder","bzip2::read","A compression stream which wraps an uncompressed stream of data. Compressed data will be read from the stream.",null,null],[3,"BzDecoder","","A decompression stream which wraps a compressed stream of data. Decompressed data will be read from the stream.",null,null],[11,"new","","Create a new compression stream which will compress at the given level to read compress output to the give output stream.",8,{"i":[{"n":"r"},{"n":"compression"}],"o":{"n":"bzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",8,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",8,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Unwrap the underlying writer, finishing the compression stream.",8,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_out","","Returns the number of bytes produced by the compressor (e.g. the number of bytes read from this stream)",8,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes read from the underlying stream)",8,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Create a new decompression stream, which will read compressed data from the given input stream and decompress it.",9,{"i":[{"n":"r"}],"o":{"n":"bzdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",9,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",9,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Unwrap the underlying writer, finishing the compression stream.",9,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_out","","Returns the number of bytes produced by the decompressor (e.g. the number of bytes read from this stream)",9,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the decompressor (e.g. the number of bytes read from the underlying stream)",9,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",9,null],[11,"write","","",9,null],[11,"flush","","",9,{"i":[{"n":"self"}],"o":{"n":"result"}}],[0,"write","bzip2","Writer-based compression/decompression streams",null,null],[3,"BzEncoder","bzip2::write","A compression stream which will have uncompressed data written to it and will write compressed data to an output stream.",null,null],[3,"BzDecoder","","A compression stream which will have compressed data written to it and will write uncompressed data to an output stream.",null,null],[11,"new","","Create a new compression stream which will compress at the given level to write compress output to the give output stream.",10,{"i":[{"n":"w"},{"n":"compression"}],"o":{"n":"bzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",10,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",10,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",10,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",10,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"total_out","","Returns the number of bytes produced by the compressor",10,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes written to this stream.)",10,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",10,null],[11,"flush","","",10,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read","","",10,null],[11,"drop","","",10,{"i":[{"n":"self"}]}],[11,"new","","Create a new decoding stream which will decompress all data written to it into `obj`.",11,{"i":[{"n":"w"}],"o":{"n":"bzdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",11,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",11,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",11,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"finish","","Unwrap the underlying writer, finishing the compression stream.",11,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"total_out","","Returns the number of bytes produced by the decompressor",11,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the decompressor (e.g. the number of bytes written to this stream.)",11,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",11,null],[11,"flush","","",11,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read","","",11,null],[11,"drop","","",11,{"i":[{"n":"self"}]}],[11,"clone","bzip2","",3,{"i":[{"n":"self"}],"o":{"n":"compression"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"Action"],[4,"Status"],[4,"Error"],[4,"Compression"],[3,"Compress"],[3,"Decompress"],[3,"BzEncoder"],[3,"BzDecoder"],[3,"BzEncoder"],[3,"BzDecoder"],[3,"BzEncoder"],[3,"BzDecoder"]]};
searchIndex["bzip2_sys"] = {"doc":"","items":[[3,"bz_stream","bzip2_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in_lo32","","",0,null],[12,"total_in_hi32","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out_lo32","","",0,null],[12,"total_out_hi32","","",0,null],[12,"state","","",0,null],[12,"bzalloc","","",0,null],[12,"bzfree","","",0,null],[12,"opaque","","",0,null],[5,"bz_internal_error","","",null,{"i":[{"n":"c_int"}]}],[5,"BZ2_bzCompressInit","","",null,null],[5,"BZ2_bzCompress","","",null,null],[5,"BZ2_bzCompressEnd","","",null,null],[5,"BZ2_bzDecompressInit","","",null,null],[5,"BZ2_bzDecompress","","",null,null],[5,"BZ2_bzDecompressEnd","","",null,null],[17,"BZ_RUN","","",null,null],[17,"BZ_FLUSH","","",null,null],[17,"BZ_FINISH","","",null,null],[17,"BZ_OK","","",null,null],[17,"BZ_RUN_OK","","",null,null],[17,"BZ_FLUSH_OK","","",null,null],[17,"BZ_FINISH_OK","","",null,null],[17,"BZ_STREAM_END","","",null,null],[17,"BZ_SEQUENCE_ERROR","","",null,null],[17,"BZ_PARAM_ERROR","","",null,null],[17,"BZ_MEM_ERROR","","",null,null],[17,"BZ_DATA_ERROR","","",null,null],[17,"BZ_DATA_ERROR_MAGIC","","",null,null],[17,"BZ_IO_ERROR","","",null,null],[17,"BZ_UNEXPECTED_EOF","","",null,null],[17,"BZ_OUTBUFF_FULL","","",null,null],[17,"BZ_CONFIG_ERROR","","",null,null]],"paths":[[3,"bz_stream"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["chrono"] = {"doc":"Chrono 0.4.0","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"Date","","ISO 8601 calendar date with time zone.",null,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",null,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",0,null],[13,"Tue","","Tuesday.",0,null],[13,"Wed","","Wednesday.",0,null],[13,"Thu","","Thursday.",0,null],[13,"Fri","","Friday.",0,null],[13,"Sat","","Saturday.",0,null],[13,"Sun","","Sunday.",0,null],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",null,null],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",null,null],[3,"Utc","chrono::offset","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[3,"Local","","The local timescale. This is implemented via the standard `time` crate.",null,null],[4,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",1,null],[13,"Single","","Given local time representation has a single unique result.",1,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",1,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"utc"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"utc"}],"o":{"n":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",2,{"o":{"g":["utc"],"n":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",2,{"o":{"g":["utc"],"n":"datetime"}}],[11,"from_offset","","",2,{"i":[{"n":"utc"}],"o":{"n":"utc"}}],[11,"offset_from_local_date","","",2,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["utc"],"n":"localresult"}}],[11,"offset_from_local_datetime","","",2,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["utc"],"n":"localresult"}}],[11,"offset_from_utc_date","","",2,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"utc"}}],[11,"offset_from_utc_datetime","","",2,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"utc"}}],[11,"fix","","",2,{"i":[{"n":"self"}],"o":{"n":"fixedoffset"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"fixedoffset"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"bool"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"i":[{"n":"i32"}],"o":{"n":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"i":[{"n":"i32"}],"o":{"g":["fixedoffset"],"n":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"i":[{"n":"i32"}],"o":{"n":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"i":[{"n":"i32"}],"o":{"g":["fixedoffset"],"n":"option"}}],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",3,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",3,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"from_offset","","",3,{"i":[{"n":"fixedoffset"}],"o":{"n":"fixedoffset"}}],[11,"offset_from_local_date","","",3,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_utc_date","","",3,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",3,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"fixedoffset"}}],[11,"fix","","",3,{"i":[{"n":"self"}],"o":{"n":"fixedoffset"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"add","chrono","",4,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"datetime"}}],[11,"sub","","",4,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"datetime"}}],[11,"clone","chrono::offset","",5,{"i":[{"n":"self"}],"o":{"n":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",5,{"o":{"g":["local"],"n":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",5,{"o":{"g":["local"],"n":"datetime"}}],[11,"from_offset","","",5,{"i":[{"n":"fixedoffset"}],"o":{"n":"local"}}],[11,"offset_from_local_date","","",5,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_local_datetime","","",5,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["fixedoffset"],"n":"localresult"}}],[11,"offset_from_utc_date","","",5,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",5,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"fixedoffset"}}],[11,"from_local_date","","",5,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["date"],"n":"localresult"}}],[11,"from_local_datetime","","",5,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"from_utc_date","","",5,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["local"],"n":"date"}}],[11,"from_utc_datetime","","",5,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["local"],"n":"datetime"}}],[8,"Offset","","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",6,{"i":[{"n":"self"}],"o":{"n":"fixedoffset"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",7,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["date"],"n":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"}],"o":{"n":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"}],"o":{"g":["date"],"n":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",7,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"n":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",7,{"i":[{"n":"self"},{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"g":["date"],"n":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",7,{"i":[{"n":"self"},{"n":"i64"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",7,{"i":[{"n":"self"},{"n":"i64"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",7,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",7,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",7,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["date"],"n":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",7,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["datetime"],"n":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",7,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",7,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",7,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",7,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"datetime"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"localresult"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"localresult"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"localresult"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",1,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",1,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",1,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[3,"IsoWeek","","ISO 8601 week.",null,null],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",null,null],[3,"TsSeconds","","A DateTime that can be deserialized from a seconds-based timestamp",null,null],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"bool"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"ordering"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",8,{"i":[{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",8,{"i":[{"n":"i32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",8,{"i":[{"n":"i32"},{"n":"u32"}],"o":{"n":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",8,{"i":[{"n":"i32"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",8,{"i":[{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"n":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",8,{"i":[{"n":"i32"},{"n":"u32"},{"n":"weekday"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",8,{"i":[{"n":"i32"}],"o":{"n":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",8,{"i":[{"n":"i32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",8,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["naivedate"],"n":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",8,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",8,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",8,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",8,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",8,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",8,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",8,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",8,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",8,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",8,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",8,{"i":[{"n":"self"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",8,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",8,{"i":[{"n":"self"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",8,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",8,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",8,{"i":[{"n":"self"},{"n":"naivedate"}],"o":{"n":"oldduration"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",8,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",8,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","Returns the month number starting from 1.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","Returns the month number starting from 0.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","Returns the day of month starting from 1.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",8,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","Returns the day of week.",8,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"iso_week","","",8,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",8,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",8,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",8,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",8,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",8,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",8,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",8,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedate"],"n":"option"}}],[11,"hash","","",8,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",8,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivedate"}}],[11,"add_assign","","",8,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"sub","","",8,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivedate"}}],[11,"sub_assign","","",8,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",8,{"i":[{"n":"str"}],"o":{"g":["naivedate"],"n":"parseresult"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"bool"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"isoweek"}],"o":{"n":"ordering"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[11,"year","","Returns the year number for this ISO week.",9,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"week","","Returns the ISO week number starting from 1.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"week0","","Returns the ISO week number starting from 0.",9,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",10,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"le","","",10,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"gt","","",10,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"ge","","",10,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"bool"}}],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"ordering"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",10,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",10,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",10,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",10,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",10,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",10,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",10,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",10,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",10,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",10,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",10,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["naivetime"],"n":"parseresult"}}],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",10,null],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",10,null],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",10,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"n":"oldduration"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",10,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",10,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"hour","","Returns the hour number from 0 to 23.",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivetime"],"n":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"hash","","",10,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",10,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivetime"}}],[11,"add_assign","","",10,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"sub","","",10,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivetime"}}],[11,"sub_assign","","",10,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",10,{"i":[{"n":"str"}],"o":{"g":["naivetime"],"n":"parseresult"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",11,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"le","","",11,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"gt","","",11,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"ge","","",11,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"bool"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"ordering"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"naivedatetime"}}],[11,"from","","Pull the internal NaiveDateTime out",11,{"i":[{"n":"tsseconds"}],"o":{"n":"naivedatetime"}}],[11,"deref","","",12,null],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",11,{"i":[{"n":"naivedate"},{"n":"naivetime"}],"o":{"n":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",11,{"i":[{"n":"i64"},{"n":"u32"}],"o":{"n":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",11,{"i":[{"n":"i64"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",11,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["naivedatetime"],"n":"parseresult"}}],[11,"date","","Retrieves a date component.",11,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"time","","Retrieves a time component.",11,{"i":[{"n":"self"}],"o":{"n":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",11,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",11,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",11,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",11,{"i":[{"n":"self"},{"n":"naivedatetime"}],"o":{"n":"oldduration"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",11,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",11,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","Returns the month number starting from 1.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","Returns the month number starting from 0.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","Returns the day of month starting from 1.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","Returns the day of week.",11,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"iso_week","","",11,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",11,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["naivedatetime"],"n":"option"}}],[11,"hash","","",11,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",11,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivedatetime"}}],[11,"add_assign","","",11,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"sub","","",11,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"naivedatetime"}}],[11,"sub_assign","","",11,{"i":[{"n":"self"},{"n":"oldduration"}]}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",11,{"i":[{"n":"str"}],"o":{"g":["naivedatetime"],"n":"parseresult"}}],[17,"MIN_DATE","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"clone","chrono","",13,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",13,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"naivetime"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"i":[{"n":"self"},{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",13,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",13,{"i":[{"n":"self"}],"o":{"g":["date"],"n":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",13,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",13,{"i":[{"n":"self"}],"o":{"g":["date"],"n":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",13,null],[11,"timezone","","Retrieves an associated time zone.",13,{"i":[{"n":"self"}],"o":{"n":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",13,{"i":[{"n":"self"},{"n":"tz2"}],"o":{"n":"date"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date.",13,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["date"],"n":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",13,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["date"],"n":"option"}}],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",13,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",13,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",13,{"i":[{"n":"self"}],"o":{"n":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",13,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",13,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","",13,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","",13,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","",13,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"iso_week","","",13,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[11,"with_year","","",13,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_month","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_month0","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_day","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_day0","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_ordinal","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"with_ordinal0","","",13,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["date"],"n":"option"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",13,{"i":[{"n":"self"},{"n":"date"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"ordering"}}],[11,"hash","","",13,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",13,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"date"}}],[11,"sub","","",13,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"date"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",4,null],[11,"date","","Retrieves a date component.",4,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",4,{"i":[{"n":"self"}],"o":{"n":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",4,null],[11,"timezone","","Retrieves an associated time zone.",4,{"i":[{"n":"self"}],"o":{"n":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",4,{"i":[{"n":"self"},{"n":"tz2"}],"o":{"n":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",4,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["datetime"],"n":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",4,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"g":["datetime"],"n":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",4,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",4,{"i":[{"n":"self"}],"o":{"n":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",4,{"i":[{"n":"self"}],"o":{"n":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",4,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",4,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",4,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",4,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",4,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",4,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["strftimeitems"],"n":"delayedformat"}}],[11,"year","","",4,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"month","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"month0","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"day0","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"ordinal0","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"weekday","","",4,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"iso_week","","",4,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[11,"with_year","","",4,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_month","","",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_month0","","",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_day","","",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_day0","","",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_ordinal","","",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_ordinal0","","",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"hour","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"minute","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"second","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"nanosecond","","",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"with_hour","","",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_minute","","",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_second","","",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"with_nanosecond","","",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["datetime"],"n":"option"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"ordering"}}],[11,"hash","","",4,{"i":[{"n":"self"},{"n":"h"}]}],[11,"add","","",4,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"datetime"}}],[11,"sub","","",4,{"i":[{"n":"self"},{"n":"oldduration"}],"o":{"n":"datetime"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"from","","",4,{"i":[{"n":"systemtime"}],"o":{"g":["utc"],"n":"datetime"}}],[11,"from","","",4,{"i":[{"n":"systemtime"}],"o":{"g":["local"],"n":"datetime"}}],[0,"format","","Formatting (and parsing) utilities for date and time.",null,null],[3,"Parsed","chrono::format","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",14,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"isoyear","","Year in the ISO week date.",14,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"month","","Month (1--12).",14,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",14,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",14,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",14,null],[12,"weekday","","Day of the week.",14,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",14,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",14,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",14,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",14,null],[12,"minute","","Minute number (0--59).",14,null],[12,"second","","Second number (0--60, accounting for leap seconds).",14,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",14,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",14,null],[12,"offset","","Offset from the local time to UTC, in seconds.",14,null],[3,"InternalNumeric","","An opaque type representing numeric item types for internal uses only.",null,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",null,null],[3,"ParseError","","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",15,null],[13,"Zero","","Zero (`0`) padding.",15,null],[13,"Space","","Space padding.",15,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",16,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",16,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",16,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",16,null],[13,"Month","","Month (FW=PW=2).",16,null],[13,"Day","","Day of the month (FW=PW=2).",16,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",16,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",16,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",16,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",16,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",16,null],[13,"Ordinal","","Day of the year (FW=PW=3).",16,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",16,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",16,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",16,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",16,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",16,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",16,null],[13,"Internal","","Internal uses only.",16,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",17,null],[13,"LongMonthName","","Full month names.",17,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",17,null],[13,"LongWeekdayName","","Full day of the week names.",17,null],[13,"LowerAmPm","","AM/PM.",17,null],[13,"UpperAmPm","","AM/PM.",17,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",17,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",17,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",17,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",17,null],[13,"TimezoneName","","Timezone name.",17,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",17,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",17,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",17,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",17,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",17,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",17,null],[13,"Internal","","Internal uses only.",17,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",18,null],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",18,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",18,null],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",18,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",18,null],[13,"Fixed","","Fixed-format item.",18,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",18,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"i":[{"n":"parsed"},{"n":"str"},{"n":"i"}],"o":{"n":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"i":[{"n":"formatter"},{"g":["naivedate"],"n":"option"},{"g":["naivetime"],"n":"option"},{"n":"option"},{"n":"i"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"parsed"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"parsed"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"parsed"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",14,{"o":{"n":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",14,{"o":{"n":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",14,{"i":[{"n":"self"},{"n":"weekday"}],"o":{"n":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",14,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",14,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",14,{"i":[{"n":"self"}],"o":{"g":["naivedate"],"n":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",14,{"i":[{"n":"self"}],"o":{"g":["naivetime"],"n":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",14,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["naivedatetime"],"n":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",14,{"i":[{"n":"self"}],"o":{"g":["fixedoffset"],"n":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",14,{"i":[{"n":"self"}],"o":{"g":["datetime"],"n":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",14,{"i":[{"n":"self"},{"n":"tz"}],"o":{"g":["datetime"],"n":"parseresult"}}],[0,"strftime","","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",19,{"i":[{"n":"str"}],"o":{"n":"strftimeitems"}}],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"g":["item"],"n":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"pad"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"pad"}],"o":{"n":"bool"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"numeric"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"numeric"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"numeric"}],"o":{"n":"bool"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"internalnumeric"}],"o":{"n":"bool"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"fixed"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"fixed"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"fixed"}],"o":{"n":"bool"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"internalfixed"}],"o":{"n":"bool"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"item"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"item"}],"o":{"n":"bool"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",22,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",23,{"i":[{"g":["naivedate"],"n":"option"},{"g":["naivetime"],"n":"option"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",23,{"i":[{"g":["naivedate"],"n":"option"},{"g":["naivetime"],"n":"option"},{"n":"off"},{"n":"i"}],"o":{"n":"delayedformat"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","chrono","",0,{"i":[{"n":"str"}],"o":{"n":"result"}}],[17,"MIN_DATE","","The minimum possible `Date`.",null,null],[17,"MAX_DATE","","The maximum possible `Date`.",null,null],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",24,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",24,null],[10,"month","","Returns the month number starting from 1.",24,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"month0","","Returns the month number starting from 0.",24,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"day","","Returns the day of month starting from 1.",24,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",24,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",24,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",24,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"weekday","","Returns the day of week.",24,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[10,"iso_week","","Returns the ISO week.",24,{"i":[{"n":"self"}],"o":{"n":"isoweek"}}],[10,"with_year","","Makes a new value with the year number changed.",24,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",24,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",25,null],[10,"minute","","Returns the minute number from 0 to 59.",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",25,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",25,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",25,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",25,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"weekday"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"succ","","The next day in the week.",0,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"pred","","The previous day in the week.",0,{"i":[{"n":"self"}],"o":{"n":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_i64","","",0,{"i":[{"n":"i64"}],"o":{"g":["weekday"],"n":"option"}}],[11,"from_u64","","",0,{"i":[{"n":"u64"}],"o":{"g":["weekday"],"n":"option"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"parseweekdayerror"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"parseweekdayerror"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"parseweekdayerror"}],"o":{"n":"bool"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",27,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",27,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",27,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",27,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",27,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",27,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",27,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",27,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",27,{"i":[{"n":"f"}],"o":{"n":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",27,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",27,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",27,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",27,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",27,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",27,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",27,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",27,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",27,{"o":{"n":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",27,{"o":{"n":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",27,{"o":{"n":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",27,{"i":[{"n":"duration"}],"o":{"g":["duration","outofrangeerror"],"n":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",27,{"i":[{"n":"self"}],"o":{"g":["duration","outofrangeerror"],"n":"result"}}],[11,"neg","","",27,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"div","","",27,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"add","","",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"partial_cmp","","",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"le","","",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"gt","","",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ge","","",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"sub","","",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"cmp","","",27,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"ordering"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"mul","","",27,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"add","chrono::naive","",10,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"naivetime"}}],[11,"sub","","",10,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"naivetime"}}],[11,"add","","",11,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"naivedatetime"}}],[11,"sub","","",11,{"i":[{"n":"self"},{"n":"fixedoffset"}],"o":{"n":"naivedatetime"}}]],"paths":[[4,"Weekday"],[4,"LocalResult"],[3,"Utc"],[3,"FixedOffset"],[3,"DateTime"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"TsSeconds"],[3,"Date"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"],[3,"ParseWeekdayError"],[3,"Duration"]]};
searchIndex["clap"] = {"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formated error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`] [`Arg::set`]: ./struct.Arg.html#method.set [`Arg::unset`]: ./struct.Arg.html#method.unset [`Arg::is_set`]: ./struct.Arg.html#method.is_set",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,null],[13,"Hidden","","The argument should not be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimter",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,null],[13,"HidePossibleValues","","Hides the possible values from the help string",1,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,null],[13,"RequireEquals","","Require options use `--option=val` syntax",1,null],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,null],[13,"HideDefaultValue","","Hides the default value from the help string",1,null],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",1,null],[13,"HideEnvValues","","Hides ENV values in the help message",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,null],[13,"AllowMissingPositional","","Allows one to implement a CLI where the second to last positional argument is optional, but the final positional argument is required. Such as `$ prog [optional] <required>` where one of the two following usages is allowed:",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcomands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,null],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independant version strings from their parents.)",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,null],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,null],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",2,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'sggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,null],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",4,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,null],[13,"PowerShell","","Generates a completion file for PowerShell",4,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"appsettings"}}],[11,"from_str","","",2,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,{"i":[{"n":"s"}],"o":{"n":"self"}}],[11,"get_name","","Get the name of the app",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"get_bin_name","","Get the name of the binary",5,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,{"i":[{"n":"s"}],"o":{"n":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"template","","Sets the help template to be used, overriding the default format.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"self"}}],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,null],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",5,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"self"}}],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",5,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"self"}}],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"self"}}],[11,"args","","Adds multiple [arguments] to the list of valid possibilties",5,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",5,{"i":[{"n":"self"},{"n":"arggroup"}],"o":{"n":"self"}}],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,{"i":[{"n":"self"},{"n":"app"}],"o":{"n":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"self"}}],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,{"i":[{"n":"self"}],"o":{"n":"clapresult"}}],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",5,{"i":[{"n":"self"}],"o":{"n":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"clapresult"}}],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"clapresult"}}],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"clapresult"}}],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"clapresult"}}],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,{"i":[{"n":"self"},{"n":"s"},{"n":"shell"},{"n":"t"}]}],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,{"i":[{"n":"self"},{"n":"s"},{"n":"shell"},{"n":"w"}]}],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,{"i":[{"n":"self"}],"o":{"n":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,{"i":[{"n":"self"}],"o":{"g":["argmatches"],"n":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["argmatches"],"n":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",5,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["argmatches"],"n":"clapresult"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",6,{"o":{"n":"arg"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"arg"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,null],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,null],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",6,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"n":"self"}}],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,null],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"n":"self"}}],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",6,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"index","","Specifies the index of a positional argument starting at 1.",6,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"self"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"hidden","","Hides an argument from help message output.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"self"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"self"}}],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"self"}}],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"i":[{"n":"self"},{"n":"osstr"}],"o":{"n":"self"}}],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",6,{"i":[{"n":"self"},{"n":"str"},{"g":["str"],"n":"option"},{"n":"str"}],"o":{"n":"self"}}],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"i":[{"n":"self"},{"n":"str"},{"g":["osstr"],"n":"option"},{"n":"osstr"}],"o":{"n":"self"}}],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,null],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,null],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",6,{"i":[{"n":"self"},{"n":"osstr"}],"o":{"n":"self"}}],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"bool"}}],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"self"}}],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"arg"}],"o":{"n":"self"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"arg"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"argmatches"}}],[11,"default","","",7,{"o":{"n":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["str"],"n":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["cow"],"n":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["osstr"],"n":"option"}}],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["values"],"n":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["vec"],"n":"option"}}],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["osvalues"],"n":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"u64"}}],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["argmatches"],"n":"option"}}],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"default","","",8,{"o":{"n":"self"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"osvalues"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"g":["osstr"],"n":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"i":[{"n":"self"}],"o":{"g":["osstr"],"n":"option"}}],[11,"default","","",9,{"o":{"n":"self"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"subcommand"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,{"i":[{"n":"str"}],"o":{"n":"app"}}],[11,"default","","",11,{"o":{"n":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"arg","","Adds an [argument] to this group by name",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"args","","Adds multiple [arguments] to this group by name",11,null],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",11,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,null],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",11,{"i":[{"n":"arggroup"}],"o":{"n":"self"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"argsettings"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,null],[11,"with_description","","Create an error with a custom description.",0,{"i":[{"n":"str"},{"n":"errorkind"}],"o":{"n":"self"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"shell"}}],[11,"variants","","A list of possible variants in `&'static str` form",4,null],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"Result","","Short hand for [`Result`] type [`Result`]: https://doc.rust-lang.org/std/result/enum.Result.html",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",null,null],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",null,null]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["conduit_mime_types"] = {"doc":"","items":[[3,"Types","conduit_mime_types","",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"types"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"types"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"types"}],"o":{"n":"bool"}}],[11,"new","","",0,{"o":{"g":["types"],"n":"result"}}],[11,"get_extension","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"option"}}],[11,"get_mime_type","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["str"],"n":"option"}}],[11,"mime_for_path","","",0,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"str"}}]],"paths":[[3,"Types"]]};
searchIndex["crc"] = {"doc":"crc Rust implementation of CRC(32, 64)","items":[[0,"crc32","crc","",null,null],[3,"Digest","crc::crc32","",null,null],[5,"make_table","","",null,null],[5,"update","","",null,null],[5,"checksum_ieee","","",null,null],[5,"checksum_castagnoli","","",null,null],[5,"checksum_koopman","","",null,null],[17,"CASTAGNOLI","","",null,null],[17,"CASTAGNOLI_TABLE","","",null,null],[17,"IEEE","","",null,null],[17,"IEEE_TABLE","","",null,null],[17,"KOOPMAN","","",null,null],[17,"KOOPMAN_TABLE","","",null,null],[8,"Hasher32","","",null,null],[10,"reset","","",0,{"i":[{"n":"self"}]}],[10,"write","","",0,null],[10,"sum32","","",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"new","","",1,{"i":[{"n":"u32"}],"o":{"n":"digest"}}],[11,"new_with_initial","","",1,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"digest"}}],[11,"reset","","",1,{"i":[{"n":"self"}]}],[11,"write","","",1,null],[11,"sum32","","",1,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"write","","",1,null],[11,"finish","","",1,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[0,"crc64","crc","",null,null],[3,"Digest","crc::crc64","",null,null],[5,"make_table","","",null,null],[5,"update","","",null,null],[5,"checksum_ecma","","",null,null],[5,"checksum_iso","","",null,null],[17,"ECMA","","",null,null],[17,"ECMA_TABLE","","",null,null],[17,"ISO","","",null,null],[17,"ISO_TABLE","","",null,null],[8,"Hasher64","","",null,null],[10,"reset","","",2,{"i":[{"n":"self"}]}],[10,"write","","",2,null],[10,"sum64","","",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"new","","",3,{"i":[{"n":"u64"}],"o":{"n":"digest"}}],[11,"new_with_initial","","",3,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"digest"}}],[11,"reset","","",3,{"i":[{"n":"self"}]}],[11,"write","","",3,null],[11,"sum64","","",3,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",3,null],[11,"finish","","",3,{"i":[{"n":"self"}],"o":{"n":"u64"}}]],"paths":[[8,"Hasher32"],[3,"Digest"],[8,"Hasher64"],[3,"Digest"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"CachePadded","","Pad `T` to the length of a cacheline.",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"i":[{"n":"f"}],"o":{"n":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"i":[{"n":"f"}],"o":{"n":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"i":[{"n":"builder"},{"n":"f"}],"o":{"g":["joinhandle"],"n":"result"}}],[0,"epoch","","Epoch-based memory management",null,null],[3,"Atomic","crossbeam::epoch","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[3,"Owned","","Like `Box<T>`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&'a T`: a shared reference valid for lifetime `'a`.",null,null],[5,"pin","","Pin the current epoch.",null,{"o":{"n":"guard"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"null","","",0,{"o":{"n":"atomic"}}],[11,"new","","Create a new atomic pointer",0,{"i":[{"n":"t"}],"o":{"n":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",0,{"i":[{"n":"self"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared"],"n":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["owned"],"n":"option"},{"n":"ordering"}]}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding a shared reference to the pointer that was stored.",0,{"i":[{"n":"self"},{"n":"owned"},{"n":"ordering"},{"n":"guard"}],"o":{"n":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"n":"ordering"}]}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"g":["owned"],"n":"option"},{"n":"ordering"}],"o":{"g":["option"],"n":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering, immediatley acquiring a new `Shared` reference to the previously-owned pointer if successful.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"n":"owned"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared","owned"],"n":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"g":["shared"],"n":"option"},{"n":"ordering"}],"o":{"n":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["owned"],"n":"option"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared"],"n":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",0,{"i":[{"n":"self"},{"g":["shared"],"n":"option"},{"n":"ordering"},{"n":"guard"}],"o":{"g":["shared"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data structure and should be collected when sufficient epochs have passed.",1,{"i":[{"n":"self"},{"n":"shared"}]}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",1,{"i":[{"n":"self"}]}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Move `t` to a new heap allocation.",2,{"i":[{"n":"t"}],"o":{"n":"owned"}}],[11,"into_inner","","Move data out of the owned box, deallocating the box.",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"shared"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"shared"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[11,"deref","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_raw","","",3,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber's lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",null,null],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",null,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[11,"new","","",4,{"o":{"n":"atomicoption"}}],[11,"swap_box","","",4,{"i":[{"n":"self"},{"n":"box"},{"n":"ordering"}],"o":{"g":["box"],"n":"option"}}],[11,"swap","","",4,{"i":[{"n":"self"},{"n":"t"},{"n":"ordering"}],"o":{"n":"option"}}],[11,"take","","",4,{"i":[{"n":"self"},{"n":"ordering"}],"o":{"n":"option"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new, empty queue.",5,{"o":{"n":"msqueue"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",5,{"i":[{"n":"self"},{"n":"t"}]}],[11,"is_empty","","Check if this queue is empty.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new, empty stack.",6,{"o":{"n":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",6,{"i":[{"n":"self"},{"n":"t"}]}],[11,"pop","","Attempt to pop the top element of the stack. Deprecated method, use try_pop",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"try_pop","","Attempt to pop the top element of the stack.",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"is_empty","","Check if this queue is empty.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"default","","",6,{"o":{"n":"self"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new, empty queue.",7,{"o":{"n":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",7,{"i":[{"n":"self"},{"n":"t"}]}],[11,"is_empty","","Judge if the queue is empty.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",7,{"i":[{"n":"self"}]}],[0,"chase_lev","","A lock-free concurrent work-stealing deque",null,null],[3,"Worker","crossbeam::sync::chase_lev","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `try_pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",8,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",8,null],[13,"Data","","The stealer has successfully stolen some data.",8,null],[5,"deque","","Creates a new empty deque",null,null],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"steal"}],"o":{"n":"bool"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"push","","Pushes data onto the front of this work queue.",9,{"i":[{"n":"self"},{"n":"t"}]}],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",10,{"i":[{"n":"self"}],"o":{"n":"steal"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"stealer"}}],[11,"fmt","crossbeam::sync","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",11,{"i":[{"n":"self"}]}],[11,"new","","Creates a new `ArcCell`.",11,{"i":[{"n":"arc"}],"o":{"n":"arccell"}}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",11,{"i":[{"n":"self"},{"n":"arc"}],"o":{"n":"arc"}}],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",11,{"i":[{"n":"self"}],"o":{"n":"arc"}}],[11,"fmt","crossbeam","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",12,{"i":[{"n":"self"},{"n":"f"}]}],[11,"spawn","","Create a scoped thread.",12,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",12,{"i":[{"n":"self"}],"o":{"n":"scopedthreadbuilder"}}],[11,"join","","Join the scoped thread, returning the result it produced.",13,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"thread","","Get the underlying thread handle.",13,{"i":[{"n":"self"}],"o":{"n":"thread"}}],[11,"drop","","",12,{"i":[{"n":"self"}]}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"zeroed","","A const fn equivalent to mem::zeroed().",14,{"o":{"n":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",14,{"i":[{"n":"t"}],"o":{"n":"cachepadded"}}],[11,"deref","","",14,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref_mut","","",14,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null]],"paths":[[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"ArcCell"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"CachePadded"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"i":[{"n":"w"},{"n":"v"}],"o":{"g":["usize"],"n":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"i":[{"n":"self"},{"n":"w"}],"o":{"g":["usize"],"n":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"from","","",0,{"i":[{"n":"result"}],"o":{"n":"self"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"extend","","",0,{"i":[{"n":"self"},{"n":"t"}]}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",0,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"as_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["env_logger"] = {"doc":"A simple logger configured via environment variables which writes  to stdout or stderr, for use with the logging facade exposed by the [`log` crate][log-crate-url].","items":[[4,"Color","env_logger","The set of available English colors for the terminal foreground/background.",null,null],[13,"Black","","",0,null],[13,"Blue","","",0,null],[13,"Green","","",0,null],[13,"Red","","",0,null],[13,"Cyan","","",0,null],[13,"Magenta","","",0,null],[13,"Yellow","","",0,null],[13,"White","","",0,null],[3,"Env","","Set of environment variables to configure from.",null,null],[3,"Logger","","The env logger.",null,null],[3,"Builder","","`Builder` acts as builder for initializing a `Logger`.",null,null],[5,"try_init","","Attempts to initialize the global logger with an env logger.",null,{"o":{"g":["setloggererror"],"n":"result"}}],[5,"init","","Initializes the global logger with an env logger.",null,{}],[5,"try_init_from_env","","Attempts to initialize the global logger with an env logger from the given environment variables.",null,{"i":[{"n":"e"}],"o":{"g":["setloggererror"],"n":"result"}}],[5,"init_from_env","","Initializes the global logger with an env logger from the given environment variables.",null,{"i":[{"n":"e"}]}],[0,"filter","","Filtering for log records.",null,null],[3,"Filter","env_logger::filter","A log filter.",null,null],[3,"Builder","","A builder for a log filter.",null,null],[11,"filter","","Returns the maximum `LevelFilter` that this filter instance is configured to output.",1,{"i":[{"n":"self"}],"o":{"n":"levelfilter"}}],[11,"matches","","Checks if this record matches the configured filter.",1,{"i":[{"n":"self"},{"n":"record"}],"o":{"n":"bool"}}],[11,"enabled","","Determines if a log message with the specified metadata would be logged.",1,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"new","","Initializes the filter builder with defaults.",2,{"o":{"n":"builder"}}],[11,"from_env","","Initializes the filter builder from an environment.",2,{"i":[{"n":"str"}],"o":{"n":"builder"}}],[11,"filter","","Adds a directive to the filter.",2,{"i":[{"n":"self"},{"g":["str"],"n":"option"},{"n":"levelfilter"}],"o":{"n":"self"}}],[11,"parse","","Parses the directives string.",2,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"build","","Build a log filter.",2,{"i":[{"n":"self"}],"o":{"n":"filter"}}],[11,"default","","",2,{"o":{"n":"self"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"fmt","env_logger","Formatting for log records.",null,null],[4,"Color","env_logger::fmt","The set of available English colors for the terminal foreground/background.",null,null],[13,"Black","","",0,null],[13,"Blue","","",0,null],[13,"Green","","",0,null],[13,"Red","","",0,null],[13,"Cyan","","",0,null],[13,"Magenta","","",0,null],[13,"Yellow","","",0,null],[13,"White","","",0,null],[3,"Formatter","","A formatter to write logs into.",null,null],[3,"Style","","A set of styles to apply to the terminal output.",null,null],[3,"StyledValue","","A value that can be printed using the given styles.",null,null],[3,"Timestamp","","An [RFC3339] formatted timestamp.",null,null],[4,"Target","","Log target, either `stdout` or `stderr`.",null,null],[13,"Stdout","","Logs will be sent to standard output.",3,null],[13,"Stderr","","Logs will be sent to standard error.",3,null],[4,"WriteStyle","","Whether or not to print styles to the target.",null,null],[13,"Auto","","Try to print styles, but don't force the issue.",4,null],[13,"Always","","Try very hard to print styles.",4,null],[13,"Never","","Never print styles.",4,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"target"}],"o":{"n":"bool"}}],[11,"default","","",3,{"o":{"n":"self"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"writestyle"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",4,null],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"writestyle"}],"o":{"n":"bool"}}],[11,"default","","",4,{"o":{"n":"self"}}],[11,"set_color","","Set the text color.",5,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"style"}}],[11,"set_bold","","Set the text weight.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"style"}}],[11,"set_intense","","Set the text intensity.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"style"}}],[11,"set_bg","","Set the background color.",5,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"style"}}],[11,"value","","Wrap a value in the style.",5,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"styledvalue"}}],[11,"style","","Begin a new [`Style`].",6,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"timestamp","","Get a [`Timestamp`] for the current date and time in UTC.",6,{"i":[{"n":"self"}],"o":{"n":"timestamp"}}],[11,"write","","",6,null],[11,"flush","","",6,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","env_logger","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Initializes the log builder with defaults.",10,{"o":{"n":"builder"}}],[11,"from_env","","Initializes the log builder from the environment.",10,{"i":[{"n":"e"}],"o":{"n":"self"}}],[11,"filter","","Adds filters to the logger.",10,{"i":[{"n":"self"},{"g":["str"],"n":"option"},{"n":"levelfilter"}],"o":{"n":"self"}}],[11,"format","","Sets the format function for formatting the log output.",10,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"target","","Sets the target for the log output.",10,{"i":[{"n":"self"},{"n":"target"}],"o":{"n":"self"}}],[11,"write_style","","Sets whether or not styles will be written.",10,{"i":[{"n":"self"},{"n":"writestyle"}],"o":{"n":"self"}}],[11,"parse","","Parses the directives string in the same form as the `RUST_LOG` environment variable.",10,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"parse_write_style","","Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE` environment variable.",10,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"try_init","","Initializes the global logger with the built env logger.",10,{"i":[{"n":"self"}],"o":{"g":["setloggererror"],"n":"result"}}],[11,"init","","Initializes the global logger with the built env logger.",10,{"i":[{"n":"self"}]}],[11,"build","","Build an env logger.",10,{"i":[{"n":"self"}],"o":{"n":"logger"}}],[11,"filter","","Returns the maximum `LevelFilter` that this env logger instance is configured to output.",9,{"i":[{"n":"self"}],"o":{"n":"levelfilter"}}],[11,"matches","","Checks if this record matches the configured filter.",9,{"i":[{"n":"self"},{"n":"record"}],"o":{"n":"bool"}}],[11,"enabled","","",9,{"i":[{"n":"self"},{"n":"metadata"}],"o":{"n":"bool"}}],[11,"log","","",9,{"i":[{"n":"self"},{"n":"record"}]}],[11,"flush","","",9,{"i":[{"n":"self"}]}],[11,"new","","Get a default set of environment variables.",11,{"o":{"n":"self"}}],[11,"filter","","Specify an environment variable to read the filter from.",11,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"self"}}],[11,"write_style","","Specify an environment variable to read the style from.",11,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"self"}}],[11,"from","","",11,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"default","","",11,{"o":{"n":"self"}}],[11,"eq","env_logger::fmt","",0,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["color","parsecolorerror"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}]],"paths":[[4,"Color"],[3,"Filter"],[3,"Builder"],[4,"Target"],[4,"WriteStyle"],[3,"Style"],[3,"Formatter"],[3,"Timestamp"],[3,"StyledValue"],[3,"Logger"],[3,"Builder"],[3,"Env"]]};
searchIndex["epub_builder"] = {"doc":"A library to generate EPUB files.","items":[[3,"Error","epub_builder","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[3,"EpubBuilder","","Epub Builder",null,null],[3,"Toc","","A Table Of Contents",null,null],[12,"elements","","The elements composing the TOC",1,null],[3,"TocElement","","An element of the Table of contents",null,null],[12,"level","","The level. 0: part, 1: chapter, 2: section, ...",2,null],[12,"url","","The link",2,null],[12,"title","","Title of this entry",2,null],[12,"children","","Inner elements",2,null],[3,"EpubContent","","Represents a XHTML file that can be added to an EPUB document.",null,null],[12,"toc","","The title and url, plus sublevels",3,null],[12,"content","","The content",3,null],[12,"reftype","","Properties. See EpubProperties",3,null],[3,"ZipCommand","","Zip files using the system `zip` command.",null,null],[3,"ZipLibrary","","Zip files using the Rust `zip` library.",null,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",4,null],[13,"Fmt","","",4,null],[4,"EpubVersion","","Represents the EPUB version.",null,null],[13,"V20","","EPUB 2.0.1 format",5,null],[13,"V30","","EPUB 3.0.1 format",5,null],[4,"ReferenceType","","Represents the possible reference type of an EPUB page.",null,null],[13,"Cover","","The Book cover(s) (this refers to the cover PAGE, not the cover IMAGE)",6,null],[13,"TitlePage","","Page with title, author, publisher",6,null],[13,"Toc","","Table of contents",6,null],[13,"Index","","Index",6,null],[13,"Glossary","","Glossary",6,null],[13,"Acknowledgements","","Aknowledgements",6,null],[13,"Bibliography","","Bibliography",6,null],[13,"Colophon","","No idea what this might be",6,null],[13,"Copyright","","Copyright page",6,null],[13,"Dedication","","Dedication",6,null],[13,"Epigraph","","Epigraph",6,null],[13,"Foreword","","Foreword",6,null],[13,"Loi","","List of illustrations",6,null],[13,"Lot","","List of tables",6,null],[13,"Notes","","Notes",6,null],[13,"Preface","","Preface",6,null],[13,"Text","","Beginning of the real content",6,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",0,{"i":[{"n":"errorkind"},{"n":"state"}],"o":{"n":"error"}}],[11,"from_kind","","",0,null],[11,"with_chain","","",0,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"self"}}],[11,"kind","","",0,null],[11,"iter","","",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"chain_err","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"backtrace","","",0,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"extract_backtrace","","",0,{"i":[{"n":"error"}],"o":{"g":["arc"],"n":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,{"i":[{"n":"errorkind"}],"o":{"n":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,{"i":[{"g":["error"],"n":"box"},{"n":"k"}],"o":{"n":"error"}}],[11,"kind","","Returns the kind of the error.",0,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"iter","","Iterates over the error chain.",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",0,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"error"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"errorkind"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"deref","","",0,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","A string describing the error kind.",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",4,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"epubversion"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"epubversion"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"epubversion"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new default EPUB Builder",7,{"i":[{"n":"z"}],"o":{"g":["epubbuilder"],"n":"result"}}],[11,"epub_version","","Set EPUB version (default: V20)",7,{"i":[{"n":"self"},{"n":"epubversion"}],"o":{"n":"self"}}],[11,"metadata","","Set some EPUB metadata",7,{"i":[{"n":"self"},{"n":"s1"},{"n":"s2"}],"o":{"n":"result"}}],[11,"stylesheet","","Sets stylesheet of the EPUB.",7,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"result"}}],[11,"inline_toc","","Adds an inline toc in the document.",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"add_resource","","Add a resource to the EPUB file",7,{"i":[{"n":"self"},{"n":"p"},{"n":"r"},{"n":"s"}],"o":{"n":"result"}}],[11,"add_cover_image","","Add a cover image to the EPUB.",7,{"i":[{"n":"self"},{"n":"p"},{"n":"r"},{"n":"s"}],"o":{"n":"result"}}],[11,"add_content","","Add a XHTML content file that will be added to the EPUB.",7,{"i":[{"n":"self"},{"n":"epubcontent"}],"o":{"n":"result"}}],[11,"generate","","Generate the EPUB file and write it to the writer",7,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"tocelement"}}],[11,"new","","Creates a new element of the toc",2,{"i":[{"n":"s1"},{"n":"s2"}],"o":{"n":"tocelement"}}],[11,"level","","Sets the level of a TocElement",2,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[11,"child","","Add a child to this element.",2,{"i":[{"n":"self"},{"n":"tocelement"}],"o":{"n":"self"}}],[11,"add","","Add element to self or to children, according to its level",2,{"i":[{"n":"self"},{"n":"tocelement"}]}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",1,{"o":{"n":"toc"}}],[11,"new","","Creates a new, empty, Toc",1,{"o":{"n":"toc"}}],[11,"is_empty","","Returns `true` if the toc is empty, `false` else.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"add","","Adds a `TocElement` to the Toc.",1,{"i":[{"n":"self"},{"n":"tocelement"}],"o":{"n":"self"}}],[11,"render_epub","","Render the Toc in a toc.ncx compatible way, for EPUB.",1,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"render","","Render the Toc in either  or  form (according to numbered)",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"string"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"referencetype"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"referencetype"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new EpubContent",3,{"i":[{"n":"s"},{"n":"r"}],"o":{"n":"self"}}],[11,"title","","Set the title of this content. If no title is set, this part of the book will not be displayed in the table of content.",3,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"level","","Set the level",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[11,"child","","Adds a sublevel to the toc",3,{"i":[{"n":"self"},{"n":"tocelement"}],"o":{"n":"self"}}],[11,"reftype","","Sets reference type of this content",3,{"i":[{"n":"self"},{"n":"referencetype"}],"o":{"n":"self"}}],[11,"new","","Creates a new ZipCommand, using default setting to create a temporary directory.",8,{"o":{"g":["zipcommand"],"n":"result"}}],[11,"new_in","","Creates a new ZipCommand, specifying where to create a temporary directory.",8,{"i":[{"n":"p"}],"o":{"g":["zipcommand"],"n":"result"}}],[11,"command","","Set zip command to use (default: \"zip\")",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"write_file","","",8,{"i":[{"n":"self"},{"n":"p"},{"n":"r"}],"o":{"n":"result"}}],[11,"generate","","",8,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new wrapper for zip library",9,{"o":{"g":["ziplibrary"],"n":"result"}}],[11,"write_file","","",9,{"i":[{"n":"self"},{"n":"p"},{"n":"r"}],"o":{"n":"result"}}],[11,"generate","","",9,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",10,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["error"],"n":"result"}}],[8,"Zip","","An abstraction over possible Zip implementations.",null,null],[10,"write_file","","Write the source content to a file in the archive",11,{"i":[{"n":"self"},{"n":"p"},{"n":"r"}],"o":{"n":"result"}}],[10,"generate","","Generate the ZIP file",11,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}]],"paths":[[3,"Error"],[3,"Toc"],[3,"TocElement"],[3,"EpubContent"],[4,"ErrorKind"],[4,"EpubVersion"],[4,"ReferenceType"],[3,"EpubBuilder"],[3,"ZipCommand"],[3,"ZipLibrary"],[8,"ResultExt"],[8,"Zip"]]};
searchIndex["error"] = {"doc":"A generic, extendable Error type.","items":[[8,"Error","error","An extension to std::error::Error which provides dynamic downcasting of errors for use in highly generic contexts.",null,null],[11,"is","","Is this `Error` object of type `E`?",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"downcast","","If this error is `E`, downcast this error to `E`, by reference.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"is","","Is this `Error + Send` object of type `E`?",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"downcast","","If this error is `E`, downcast this error to `E`, by reference.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[14,"match_error","","",null,null]],"paths":[[8,"Error"]]};
searchIndex["error_chain"] = {"doc":"A library for consistent and reliable error handling","items":[[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",null,null],[3,"Iter","","Iterator over the error chain using the `Error::cause()` method.",null,null],[3,"DisplayChain","","A struct which formats an error for output.",null,null],[0,"example_generated","","These modules show an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Error","error_chain::example_generated","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",1,null],[13,"Inner","","Link to another `ErrorChain`.",1,null],[13,"Io","","Link to a `std::error::Error` type.",1,null],[13,"Custom","","A custom error kind.",1,null],[0,"inner","","Another code generated by the macro.",null,null],[3,"Error","error_chain::example_generated::inner","The Error type.",null,null],[12,"0","","The kind of the error.",2,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",3,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",2,{"i":[{"n":"errorkind"},{"n":"state"}],"o":{"n":"error"}}],[11,"from_kind","","",2,null],[11,"with_chain","","",2,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"self"}}],[11,"kind","","",2,null],[11,"iter","","",2,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"chain_err","","",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"backtrace","","",2,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"extract_backtrace","","",2,{"i":[{"n":"error"}],"o":{"g":["arc"],"n":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",2,{"i":[{"n":"errorkind"}],"o":{"n":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",2,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",2,{"i":[{"g":["error"],"n":"box"},{"n":"k"}],"o":{"n":"error"}}],[11,"kind","","Returns the kind of the error.",2,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"iter","","Iterates over the error chain.",2,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",2,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"error"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",2,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",2,{"i":[{"n":"errorkind"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"deref","","",2,null],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","A string describing the error kind.",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",3,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"error"}],"o":{"n":"self"}}],[6,"Result","error_chain::example_generated","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",5,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",0,{"i":[{"n":"errorkind"},{"n":"state"}],"o":{"n":"error"}}],[11,"from_kind","","",0,null],[11,"with_chain","","",0,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"self"}}],[11,"kind","","",0,null],[11,"iter","","",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"chain_err","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"backtrace","","",0,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"extract_backtrace","","",0,{"i":[{"n":"error"}],"o":{"g":["arc"],"n":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,{"i":[{"n":"errorkind"}],"o":{"n":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,{"i":[{"g":["error"],"n":"box"},{"n":"k"}],"o":{"n":"error"}}],[11,"kind","","Returns the kind of the error.",0,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"iter","","Iterates over the error chain.",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",0,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"error"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"errorkind"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"deref","","",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","A string describing the error kind.",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",1,{"i":[{"n":"errorkind"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"error"}],"o":{"n":"self"}}],[8,"ExitCode","error_chain","Represents a value that can be used as the exit status of the process. See `quick_main!`.",null,null],[10,"code","","Returns the value to use as the exit status.",6,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[8,"ChainedError","","This trait is implemented on all the errors generated by the `error_chain` macro.",null,null],[16,"ErrorKind","","Associated kind type.",7,null],[10,"from_kind","","Constructs an error from a kind, and generates a backtrace.",7,null],[10,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",7,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"self"}}],[10,"kind","","Returns the kind of the error.",7,null],[10,"iter","","Iterates over the error chain.",7,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[10,"backtrace","","Returns the backtrace associated with this error.",7,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"display_chain","","Returns an object which implements `Display` for printing the full context of this error.",7,{"i":[{"n":"self"}],"o":{"n":"displaychain"}}],[10,"chain_err","","Extends the error chain with a new entry.",7,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new iterator over the error chain using `Error::cause()`.",8,{"i":[{"g":["error"],"n":"option"}],"o":{"n":"iter"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"error_chain","","Macro for generating error types and traits. See crate level documentation for details.",null,null],[14,"quick_main","","Convenient wrapper to be able to use `?` and such in the main. You can use it with a separated function:",null,null],[14,"bail","","Exits a function early with an error",null,null],[14,"ensure","","Exits a function early with an error if the condition is not satisfied",null,null],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",10,{"o":{"n":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",10,{"o":{"n":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",10,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",10,null],[11,"from","","",10,{"i":[{"g":["backtraceframe"],"n":"vec"}],"o":{"n":"backtrace"}}],[11,"into","","",10,{"i":[{"n":"self"}],"o":{"g":["backtraceframe"],"n":"vec"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"backtrace"}}],[11,"default","","",10,{"o":{"n":"backtrace"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}]],"paths":[[3,"Error"],[4,"ErrorKind"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"ResultExt"],[8,"ExitCode"],[8,"ChainedError"],[3,"Iter"],[3,"DisplayChain"],[3,"Backtrace"]]};
searchIndex["failure"] = {"doc":"An experimental new error-handling library.","items":[[3,"Backtrace","failure","A `Backtrace`.",null,null],[3,"Compat","","A compatibility wrapper around an error type from this crate.",null,null],[3,"Context","","An error with context around it.",null,null],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",null,null],[3,"Error","","The `Error` type, which can contain any failure.",null,null],[3,"Causes","","A iterator over the causes of a `Fail`",null,null],[5,"err_msg","","Constructs a `Fail` type from a string.",null,{"i":[{"n":"d"}],"o":{"n":"error"}}],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,{"o":{"n":"backtrace"}}],[11,"default","","",0,{"o":{"n":"backtrace"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"compat"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"compat"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"compat"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"o":{"n":"compat"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_inner","","Unwraps this into the inner error.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Creates a new context without an underlying error message.",2,{"i":[{"n":"d"}],"o":{"n":"context"}}],[11,"get_context","","Returns a reference to the context provided with this error.",2,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"cause","","",2,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","",2,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",2,{"i":[{"n":"d"}],"o":{"n":"context"}}],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,{"i":[{"n":"e"}],"o":{"n":"self"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"f"}],"o":{"n":"error"}}],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,{"i":[{"n":"self"}],"o":{"n":"backtrace"}}],[11,"context","","Provides context for this `Error`.",4,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"context"}}],[11,"compat","","Wraps `Error` in a compatibility type.",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"compat"}}],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"causes","","Returns a iterator over the causes of the `Error`, beginning with the failure returned by the `cause` method and ending with the failure returned by `root_cause`.",4,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"ResultExt","","Extension methods for `Result`.",null,null],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",5,{"i":[{"n":"self"}],"o":{"g":["compat"],"n":"result"}}],[10,"context","","Wraps the error type in a context type.",5,{"i":[{"n":"self"},{"n":"d"}],"o":{"g":["context"],"n":"result"}}],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",5,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["context"],"n":"result"}}],[8,"Fail","","The `Fail` trait.",null,null],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",6,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",6,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"context","","Provides context for this failure.",6,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"context"}}],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",6,{"i":[{"n":"self"}],"o":{"n":"compat"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[14,"bail","","Exits a function early with an `Error`.",null,null],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",null,null],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",null,null]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"] = {"doc":"","items":[[5,"Fail","failure_derive","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["filetime"] = {"doc":"Timestamps for files in Rust","items":[[3,"FileTime","filetime","A helper structure to represent a timestamp for a file.",null,null],[5,"set_file_times","","Set the last access and modification times for a file on the filesystem.",null,{"i":[{"n":"p"},{"n":"filetime"},{"n":"filetime"}],"o":{"n":"result"}}],[5,"set_symlink_file_times","","Set the last access and modification times for a file on the filesystem. This function does not follow symlink.",null,{"i":[{"n":"p"},{"n":"filetime"},{"n":"filetime"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"filetime"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"filetime"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"filetime"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"filetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"filetime"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"filetime"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"filetime"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"filetime"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"filetime"}}],[11,"hash","","",0,null],[11,"zero","","Creates a new timestamp representing a 0 time.",0,{"o":{"n":"filetime"}}],[11,"from_seconds_since_1970","","Creates a new instance of `FileTime` with a number of seconds and nanoseconds relative to January 1, 1970.",0,{"i":[{"n":"u64"},{"n":"u32"}],"o":{"n":"filetime"}}],[11,"from_last_modification_time","","Creates a new timestamp from the last modification time listed in the specified metadata.",0,{"i":[{"n":"metadata"}],"o":{"n":"filetime"}}],[11,"from_last_access_time","","Creates a new timestamp from the last access time listed in the specified metadata.",0,{"i":[{"n":"metadata"}],"o":{"n":"filetime"}}],[11,"from_creation_time","","Creates a new timestamp from the creation time listed in the specified metadata.",0,{"i":[{"n":"metadata"}],"o":{"g":["filetime"],"n":"option"}}],[11,"seconds","","Returns the whole number of seconds represented by this timestamp.",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"seconds_relative_to_1970","","Returns the whole number of seconds represented by this timestamp, relative to the Unix epoch start of January 1, 1970.",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"nanoseconds","","Returns the nanosecond precision of this timestamp.",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"FileTime"]]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"CompressError","","Error returned when a compression object is used incorrectly or otherwise generates an error.",null,null],[3,"DecompressError","","Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"Crc","","The CRC calculated by a [`CrcReader`].",null,null],[3,"CrcReader","","A wrapper around a [`Read`] that calculates the CRC.",null,null],[3,"Compression","","When compressing data, the compression level can be specified by a value in this enum.",null,null],[4,"Status","","Possible status results of compressing some data or successfully decompressing a block of data.",null,null],[13,"Ok","","Indicates success.",0,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output buffers being empty.",0,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have been written. Decompression/compression should not be called again.",0,null],[4,"FlushCompress","","Values which indicate the form of flushing to be used when compressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions, this indicates that the underlying stream to decide how much data to accumulate before producing output in order to maximize compression.",1,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is aligned on a byte boundary so that the decompressor can get all input data available so far.",1,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is not aligned to a byte boundary.",1,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is reset so decompression can restart from this point if previous compressed data has been damaged or if random access is desired.",1,null],[13,"Finish","","Pending input is processed and pending output is flushed.",1,null],[4,"FlushDecompress","","Values which indicate the form of flushing to be used when decompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions, this indicates that the underlying stream to decide how much data to accumulate before producing output in order to maximize compression.",2,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is aligned on a byte boundary so that the decompressor can get all input data available so far.",2,null],[13,"Finish","","Pending input is processed and pending output is flushed.",2,null],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new CRC.",3,{"o":{"n":"crc"}}],[11,"sum","","bla",3,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"amount","","The number of bytes that have been used to calculate the CRC. This value is only accurate if the amount is lower than 232.",3,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"update","","Update the CRC with the bytes in `data`.",3,null],[11,"reset","","Reset the CRC.",3,{"i":[{"n":"self"}]}],[11,"combine","","Combine the CRC with the CRC for the subsequent block of bytes.",3,{"i":[{"n":"self"},{"n":"crc"}]}],[11,"new","","Create a new CrcReader.",4,{"i":[{"n":"r"}],"o":{"n":"crcreader"}}],[11,"crc","","Get the Crc for this CrcReader.",4,{"i":[{"n":"self"}],"o":{"n":"crc"}}],[11,"into_inner","","Get the reader that is wrapped by this CrcReader.",4,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_ref","","Get the reader that is wrapped by this CrcReader by reference.",4,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Get a mutable reference to the reader that is wrapped by this CrcReader.",4,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"reset","","Reset the Crc in this CrcReader.",4,{"i":[{"n":"self"}]}],[11,"read","","",4,null],[11,"fill_buf","","",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"consume","","",4,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"gzheader"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"gzheader"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"gzheader"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"filename","","Returns the `filename` field of this gzip stream's header, if present.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream's header, if present.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream's header, if present.",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"operating_system","","Returns the `operating_system` field of this gzip stream's header.",5,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"mtime","","This gives the most recent modification time of the original file being compressed.",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"mtime_as_datetime","","Returns the most recent modification time represented by a date-time type. Returns `None` if the value of the underlying counter is 0, indicating no time stamp is available.",5,{"i":[{"n":"self"}],"o":{"g":["systemtime"],"n":"option"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new blank builder with no header by default.",6,{"o":{"n":"gzbuilder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",6,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"gzbuilder"}}],[11,"operating_system","","Configure the `operating_system` field in the gzip header.",6,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"gzbuilder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",6,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"gzbuilder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",6,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"gzbuilder"}}],[11,"comment","","Configure the `comment` field in the gzip header.",6,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"gzbuilder"}}],[11,"write","","Consume this builder, creating a writer encoder in the process.",6,{"i":[{"n":"self"},{"n":"w"},{"n":"compression"}],"o":{"n":"gzencoder"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",6,{"i":[{"n":"self"},{"n":"r"},{"n":"compression"}],"o":{"n":"gzencoder"}}],[11,"buf_read","","Consume this builder, creating a reader encoder in the process.",6,{"i":[{"n":"self"},{"n":"r"},{"n":"compression"}],"o":{"n":"gzencoder"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"flushcompress"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"flushcompress"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"flushdecompress"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"flushdecompress"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"status"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"status"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new object ready for compressing data that it's given.",7,{"i":[{"n":"compression"},{"n":"bool"}],"o":{"n":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this compression object.",7,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this compression object.",7,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",7,{"i":[{"n":"self"}]}],[11,"compress","","Compresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"new","","Creates a new object ready for decompressing data that it's given.",8,{"i":[{"n":"bool"}],"o":{"n":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this decompression object.",8,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this decompression object.",8,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",8,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector specified by `output`.",8,null],[11,"reset","","Performs the equivalent of replacing this decompression state with a freshly allocated copy.",8,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"description","","",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",10,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"read","","Types which operate over [`Read`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[0,"write","flate2","Types which operate over [`Write`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[0,"bufread","flate2","Types which operate over [`BufRead`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::bufread","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[11,"clone","flate2","",11,{"i":[{"n":"self"}],"o":{"n":"compression"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"compression"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"compression"}],"o":{"n":"bool"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new description of the compression level with an explicitly specified integer.",11,{"i":[{"n":"u32"}],"o":{"n":"compression"}}],[11,"none","","No compression is to be performed, this may actually inflate data slightly when encoding.",11,{"o":{"n":"compression"}}],[11,"fast","","Optimize for the best speed of encoding.",11,{"o":{"n":"compression"}}],[11,"best","","Optimize for the size of data being encoded.",11,{"o":{"n":"compression"}}],[11,"level","","Returns an integer representing the compression level, typically on a scale of 0-9",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"default","","",11,{"o":{"n":"compression"}}],[11,"fmt","flate2::bufread","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",12,{"i":[{"n":"r"},{"n":"compression"}],"o":{"n":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",12,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",12,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",12,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",12,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",12,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",12,null],[11,"write","","",12,null],[11,"flush","","",12,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",13,{"i":[{"n":"r"}],"o":{"n":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",13,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"r"}}],[11,"reset_data","","Resets the state of this decoder's data",13,{"i":[{"n":"self"}]}],[11,"get_ref","","Acquires a reference to the underlying stream",13,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",13,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",13,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",13,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","flate2::read","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",14,{"i":[{"n":"r"},{"n":"compression"}],"o":{"n":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",14,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",14,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",14,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",14,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",14,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",14,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",14,null],[11,"write","","",14,null],[11,"flush","","",14,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",15,{"i":[{"n":"r"}],"o":{"n":"deflatedecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",15,{"i":[{"n":"r"},{"g":["u8"],"n":"vec"}],"o":{"n":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",15,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",15,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",15,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",15,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",15,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",15,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",15,null],[11,"write","","",15,null],[11,"flush","","",15,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","flate2::write","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",16,{"i":[{"n":"w"},{"n":"compression"}],"o":{"n":"deflateencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",16,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",16,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",16,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",16,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",16,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",16,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",16,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",16,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",16,null],[11,"flush","","",16,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read","","",16,null],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",17,{"i":[{"n":"w"}],"o":{"n":"deflatedecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",17,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",17,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",17,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",17,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",17,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",17,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",17,null],[11,"flush","","",17,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read","","",17,null],[11,"fmt","flate2::bufread","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",18,{"i":[{"n":"r"},{"n":"compression"}],"o":{"n":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",18,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",18,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",18,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"read","","",18,null],[11,"write","","",18,null],[11,"flush","","",18,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",19,{"i":[{"n":"r"}],"o":{"n":"gzdecoder"}}],[11,"header","","Returns the header associated with this stream, if it was valid",19,{"i":[{"n":"self"}],"o":{"g":["gzheader"],"n":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",19,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",19,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"read","","",19,null],[11,"write","","",19,null],[11,"flush","","",19,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",20,{"i":[{"n":"r"}],"o":{"n":"multigzdecoder"}}],[11,"header","","Returns the current header associated with this stream, if it's valid",20,{"i":[{"n":"self"}],"o":{"g":["gzheader"],"n":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",20,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",20,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",20,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"read","","",20,null],[11,"write","","",20,null],[11,"flush","","",20,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","flate2::read","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",21,{"i":[{"n":"r"},{"n":"compression"}],"o":{"n":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",21,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",21,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",21,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"read","","",21,null],[11,"write","","",21,null],[11,"flush","","",21,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",22,{"i":[{"n":"r"}],"o":{"n":"gzdecoder"}}],[11,"header","","Returns the header associated with this stream, if it was valid.",22,{"i":[{"n":"self"}],"o":{"g":["gzheader"],"n":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",22,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",22,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",22,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"read","","",22,null],[11,"write","","",22,null],[11,"flush","","",22,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",23,{"i":[{"n":"r"}],"o":{"n":"multigzdecoder"}}],[11,"header","","Returns the current header associated with this stream, if it's valid.",23,{"i":[{"n":"self"}],"o":{"g":["gzheader"],"n":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",23,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",23,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",23,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"read","","",23,null],[11,"write","","",23,null],[11,"flush","","",23,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","flate2::write","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",24,{"i":[{"n":"w"},{"n":"compression"}],"o":{"n":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",24,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",24,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",24,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the encoding is done.",24,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"write","","",24,null],[11,"flush","","",24,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read","","",24,null],[11,"drop","","",24,{"i":[{"n":"self"}]}],[11,"fmt","flate2::bufread","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",25,{"i":[{"n":"r"},{"n":"compression"}],"o":{"n":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",25,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",25,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",25,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",25,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",25,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",25,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",25,null],[11,"write","","",25,null],[11,"flush","","",25,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",26,{"i":[{"n":"r"}],"o":{"n":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",26,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",26,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",26,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",26,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",26,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",26,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",26,null],[11,"write","","",26,null],[11,"flush","","",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","flate2::read","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",27,{"i":[{"n":"r"},{"n":"compression"}],"o":{"n":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",27,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",27,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",27,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",27,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",27,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",27,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",27,null],[11,"write","","",27,null],[11,"flush","","",27,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",28,{"i":[{"n":"r"}],"o":{"n":"zlibdecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",28,{"i":[{"n":"r"},{"g":["u8"],"n":"vec"}],"o":{"n":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",28,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",28,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",28,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",28,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",28,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",28,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","flate2::write","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",29,{"i":[{"n":"w"},{"n":"compression"}],"o":{"n":"zlibencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",29,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",29,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",29,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",29,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",29,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",29,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",29,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",29,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",29,null],[11,"flush","","",29,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read","","",29,null],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",30,{"i":[{"n":"w"}],"o":{"n":"zlibdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",30,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",30,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",30,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",30,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",30,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",30,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",30,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",30,null],[11,"flush","","",30,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read","","",30,null]],"paths":[[4,"Status"],[4,"FlushCompress"],[4,"FlushDecompress"],[3,"Crc"],[3,"CrcReader"],[3,"GzHeader"],[3,"GzBuilder"],[3,"Compress"],[3,"Decompress"],[3,"DecompressError"],[3,"CompressError"],[3,"Compression"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"]]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a vector of matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is encountered, stop considering any remaining arguments as flags.",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform to the expected format. Use the `Debug` implementation to output detailed information.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",5,{"o":{"n":"options"}}],[11,"parsing_style","","Set the parsing style.",5,{"i":[{"n":"self"},{"n":"parsingstyle"}],"o":{"n":"options"}}],[11,"long_only","","Set or clear \"long options only\" mode.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"options"}}],[11,"opt","","Create a generic option group, stating all parameters explicitly.",5,{"i":[{"n":"self"},{"n":"str"},{"n":"str"},{"n":"str"},{"n":"str"},{"n":"hasarg"},{"n":"occur"}],"o":{"n":"options"}}],[11,"optflag","","Create a long option that is optional and does not take an argument.",5,{"i":[{"n":"self"},{"n":"str"},{"n":"str"},{"n":"str"}],"o":{"n":"options"}}],[11,"optflagmulti","","Create a long option that can occur more than once and does not take an argument.",5,{"i":[{"n":"self"},{"n":"str"},{"n":"str"},{"n":"str"}],"o":{"n":"options"}}],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",5,{"i":[{"n":"self"},{"n":"str"},{"n":"str"},{"n":"str"},{"n":"str"}],"o":{"n":"options"}}],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur multiple times.",5,{"i":[{"n":"self"},{"n":"str"},{"n":"str"},{"n":"str"},{"n":"str"}],"o":{"n":"options"}}],[11,"optopt","","Create a long option that is optional and takes an argument.",5,{"i":[{"n":"self"},{"n":"str"},{"n":"str"},{"n":"str"},{"n":"str"}],"o":{"n":"options"}}],[11,"reqopt","","Create a long option that is required and takes an argument.",5,{"i":[{"n":"self"},{"n":"str"},{"n":"str"},{"n":"str"},{"n":"str"}],"o":{"n":"options"}}],[11,"parse","","Parse command line arguments according to the provided options.",5,{"i":[{"n":"self"},{"n":"c"}],"o":{"n":"result"}}],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",5,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"string"}}],[11,"usage","","Derive a formatted message from a set of options.",5,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"string"}}],[11,"usage_with_format","","Derive a custom formatted message from a set of options. The formatted options provided to a closure as an iterator.",5,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"string"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"parsingstyle"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"parsingstyle"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"hasarg"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"hasarg"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"occur"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"occur"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"matches"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"matches"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"matches"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"fail"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"fail"}],"o":{"n":"bool"}}],[11,"description","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"opt_defined","","Returns true if an option was defined",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"opt_present","","Returns true if an option was matched.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"opt_count","","Returns the number of times an option was matched.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"usize"}}],[11,"opts_present","","Returns true if any of several options were matched.",0,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given option.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"vec"}}],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[3,"Options"]]};
searchIndex["handlebars"] = {"doc":"Handlebars","items":[[3,"Template","handlebars","A handlebars template",null,null],[12,"name","","",0,null],[12,"elements","","",0,null],[12,"mapping","","",0,null],[3,"RenderError","","Error when rendering data on template.",null,null],[12,"desc","","",1,null],[12,"template_name","","",1,null],[12,"line_no","","",1,null],[12,"column_no","","",1,null],[3,"TemplateError","","Error on parsing template.",null,null],[12,"reason","","",2,null],[12,"template_name","","",2,null],[12,"line_no","","",2,null],[12,"column_no","","",2,null],[3,"Handlebars","","The single entry point of your Handlebars templates",null,null],[3,"RenderContext","","The context of a render call",null,null],[12,"writer","","the `Write` where page is generated",3,null],[12,"current_template","","current template name",3,null],[12,"root_template","","root template name",3,null],[12,"disable_escape","","",3,null],[3,"Helper","","Render-time Helper data when using in a helper definition",null,null],[3,"ContextJson","","Json wrapper that holds the Json value and reference path information",null,null],[3,"Decorator","","Render-time Decorator data when using in a decorator definition",null,null],[3,"Context","","The context wrap data you render on your templates.",null,null],[4,"TemplateFileError","","",null,null],[13,"TemplateError","","",4,null],[13,"IOError","","",4,null],[4,"TemplateRenderError","","",null,null],[13,"TemplateError","","",5,null],[13,"RenderError","","",5,null],[13,"IOError","","",5,null],[5,"no_escape","","`EscapeFn` that do not change any thing. Useful when using in a non-html environment.",null,{"i":[{"n":"str"}],"o":{"n":"string"}}],[5,"html_escape","","The default escape fn replaces the characters `&\"<>` with the equivalent html / xml entities.",null,{"i":[{"n":"str"}],"o":{"n":"string"}}],[5,"to_json","","",null,{"i":[{"n":"t"}],"o":{"n":"json"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"template"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"template"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"template"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",0,{"i":[{"n":"bool"}],"o":{"n":"template"}}],[11,"compile","","",0,{"i":[{"n":"s"}],"o":{"g":["template","templateerror"],"n":"result"}}],[11,"compile2","","",0,{"i":[{"n":"s"},{"n":"bool"}],"o":{"g":["template","templateerror"],"n":"result"}}],[11,"compile_with_name","","",0,{"i":[{"n":"s"},{"n":"string"},{"n":"bool"}],"o":{"g":["template","templateerror"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",1,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",1,{"i":[{"n":"ioerror"}],"o":{"n":"rendererror"}}],[11,"from","","",1,{"i":[{"n":"serdeerror"}],"o":{"n":"rendererror"}}],[11,"new","","",1,{"i":[{"n":"t"}],"o":{"n":"rendererror"}}],[11,"with","","",1,{"i":[{"n":"e"}],"o":{"n":"rendererror"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"templateerror"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"templateerror"}],"o":{"n":"bool"}}],[11,"of","","",2,{"i":[{"n":"templateerrorreason"}],"o":{"n":"templateerror"}}],[11,"at","","",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"templateerror"}}],[11,"in_template","","",2,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"templateerror"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",4,{"i":[{"n":"templateerror"}],"o":{"n":"templatefileerror"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",5,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from","","",5,{"i":[{"n":"templateerror"}],"o":{"n":"templaterendererror"}}],[11,"from","","",5,{"i":[{"n":"rendererror"}],"o":{"n":"templaterendererror"}}],[11,"new","","",6,{"o":{"n":"registry"}}],[11,"source_map_enable","","Enable handlebars template source map",6,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"register_template_string","","Register a template string",6,{"i":[{"n":"self"},{"n":"str"},{"n":"s"}],"o":{"g":["templateerror"],"n":"result"}}],[11,"register_partial","","Register a partial string",6,{"i":[{"n":"self"},{"n":"str"},{"n":"s"}],"o":{"g":["templateerror"],"n":"result"}}],[11,"register_template_file","","Register a template from a path",6,{"i":[{"n":"self"},{"n":"str"},{"n":"p"}],"o":{"g":["templatefileerror"],"n":"result"}}],[11,"register_template_source","","Register a template from `std::io::Read` source",6,{"i":[{"n":"self"},{"n":"str"},{"n":"read"}],"o":{"g":["templatefileerror"],"n":"result"}}],[11,"unregister_template","","remove a template from the registry",6,{"i":[{"n":"self"},{"n":"str"}]}],[11,"register_helper","","register a helper",6,{"i":[{"n":"self"},{"n":"str"},{"g":["helperdef"],"n":"box"}],"o":{"g":["box"],"n":"option"}}],[11,"register_decorator","","register a decorator",6,{"i":[{"n":"self"},{"n":"str"},{"g":["directivedef"],"n":"box"}],"o":{"g":["box"],"n":"option"}}],[11,"register_escape_fn","","Register a new escape fn to be used from now on by this registry.",6,{"i":[{"n":"self"},{"n":"f"}]}],[11,"unregister_escape_fn","","Restore the default escape fn.",6,{"i":[{"n":"self"}]}],[11,"get_escape_fn","","Get a reference to the current escape fn.",6,{"i":[{"n":"self"}],"o":{"n":"fn"}}],[11,"get_template","","Return a registered template,",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["template"],"n":"option"}}],[11,"get_helper","","Return a registered helper",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["box"],"n":"option"}}],[11,"get_decorator","","Return a registered directive, aka decorator",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["box"],"n":"option"}}],[11,"get_templates","","Return all templates registered",6,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"clear_templates","","Unregister all templates",6,{"i":[{"n":"self"}]}],[11,"render","","Render a registered template with some data into a string",6,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"g":["string","rendererror"],"n":"result"}}],[11,"renderw","","Render a registered template and write some data to the `std::io::Write`",6,{"i":[{"n":"self"},{"n":"str"},{"n":"t"},{"n":"write"}],"o":{"g":["rendererror"],"n":"result"}}],[11,"template_render","","render a template string using current registry without register it",6,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"g":["string","templaterendererror"],"n":"result"}}],[11,"template_renderw","","render a template string using current registry without register it",6,{"i":[{"n":"self"},{"n":"str"},{"n":"t"},{"n":"write"}],"o":{"g":["templaterendererror"],"n":"result"}}],[11,"template_renderw2","","render a template source using current registry without register it",6,{"i":[{"n":"self"},{"n":"read"},{"n":"t"},{"n":"write"}],"o":{"g":["templaterendererror"],"n":"result"}}],[11,"new","","Create a render context from a `Write`",3,{"i":[{"n":"context"},{"n":"hashmap"},{"n":"write"}],"o":{"n":"rendercontext"}}],[11,"derive","","",3,{"i":[{"n":"self"}],"o":{"n":"rendercontext"}}],[11,"with_context","","",3,{"i":[{"n":"self"},{"n":"context"}],"o":{"n":"rendercontext"}}],[11,"get_partial","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["template"],"n":"option"}}],[11,"set_partial","","",3,{"i":[{"n":"self"},{"n":"string"},{"n":"template"}]}],[11,"get_path","","",3,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_path","","",3,{"i":[{"n":"self"},{"n":"string"}]}],[11,"get_local_path_root","","",3,{"i":[{"n":"self"}],"o":{"n":"vecdeque"}}],[11,"push_local_path_root","","",3,{"i":[{"n":"self"},{"n":"string"}]}],[11,"pop_local_path_root","","",3,{"i":[{"n":"self"}]}],[11,"set_local_var","","",3,{"i":[{"n":"self"},{"n":"string"},{"n":"json"}]}],[11,"clear_local_vars","","",3,{"i":[{"n":"self"}]}],[11,"promote_local_vars","","",3,{"i":[{"n":"self"}]}],[11,"demote_local_vars","","",3,{"i":[{"n":"self"}]}],[11,"get_local_var","","",3,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["json"],"n":"option"}}],[11,"writer","","",3,{"i":[{"n":"self"}],"o":{"n":"write"}}],[11,"push_block_context","","",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["rendererror"],"n":"result"}}],[11,"pop_block_context","","",3,{"i":[{"n":"self"}]}],[11,"evaluate_in_block_context","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["option","rendererror"],"n":"result"}}],[11,"is_current_template","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"context","","",3,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"context_mut","","",3,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"register_local_helper","","",3,{"i":[{"n":"self"},{"n":"str"},{"g":["helperdef"],"n":"box"}],"o":{"g":["rc"],"n":"option"}}],[11,"unregister_local_helper","","",3,{"i":[{"n":"self"},{"n":"str"}]}],[11,"get_local_helper","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["rc"],"n":"option"}}],[11,"evaluate","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json","rendererror"],"n":"result"}}],[11,"evaluate_absolute","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json","rendererror"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"path","","Returns relative path when the value is referenced If the value is from a literal, the path is `None`",7,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"path_root","","Return root level of this path if any",7,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"value","","Returns the value",7,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"name","","Returns helper name",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"params","","Returns all helper params, resolved within the context",8,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"param","","Returns nth helper param, resolved within the context.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["contextjson"],"n":"option"}}],[11,"hash","","Returns hash, resolved within the context",8,{"i":[{"n":"self"}],"o":{"n":"btreemap"}}],[11,"hash_get","","Return hash value of a given key, resolved within the context",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["contextjson"],"n":"option"}}],[11,"template","","Returns the default inner template if the helper is a block helper.",8,{"i":[{"n":"self"}],"o":{"g":["template"],"n":"option"}}],[11,"inverse","","Returns the template of `else` branch if any",8,{"i":[{"n":"self"}],"o":{"g":["template"],"n":"option"}}],[11,"is_block","","Returns if the helper is a block one `{{#helper}}{{/helper}}` or not `{{helper 123}}`",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"block_param","","Returns block param if any",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"block_param_pair","","Return block param pair (for example |key, val|) if any",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"name","","Returns helper name",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"params","","Returns all helper params, resolved within the context",9,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"param","","Returns nth helper param, resolved within the context",9,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["contextjson"],"n":"option"}}],[11,"hash","","Returns hash, resolved within the context",9,{"i":[{"n":"self"}],"o":{"n":"btreemap"}}],[11,"hash_get","","Return hash value of a given key, resolved within the context",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["contextjson"],"n":"option"}}],[11,"template","","Returns the default inner template if any",9,{"i":[{"n":"self"}],"o":{"g":["template"],"n":"option"}}],[11,"render","","",0,{"i":[{"n":"self"},{"n":"registry"},{"n":"rendercontext"}],"o":{"g":["rendererror"],"n":"result"}}],[11,"eval","","",0,{"i":[{"n":"self"},{"n":"registry"},{"n":"rendercontext"}],"o":{"g":["rendererror"],"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"null","","Create a context with null data",10,{"o":{"n":"context"}}],[11,"wraps","","Create a context with given data",10,{"i":[{"n":"t"}],"o":{"g":["context","rendererror"],"n":"result"}}],[11,"navigate","","Navigate the context with base path and relative path Typically you will set base path to `RenderContext.get_path()` and set relative path to helper argument or so.",10,{"i":[{"n":"self"},{"n":"str"},{"n":"vecdeque"},{"n":"str"}],"o":{"g":["json","rendererror"],"n":"result"}}],[11,"data","","",10,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"data_mut","","",10,{"i":[{"n":"self"}],"o":{"n":"json"}}],[6,"EscapeFn","","This type represents an escape fn, that is a function who's purpose it is to escape potentially problematic characters in a string.",null,null],[8,"Renderable","","Render trait",null,null],[10,"render","","render into RenderContext's `writer`",11,{"i":[{"n":"self"},{"n":"registry"},{"n":"rendercontext"}],"o":{"g":["rendererror"],"n":"result"}}],[11,"renders","","render into string",11,{"i":[{"n":"self"},{"n":"registry"},{"n":"rendercontext"}],"o":{"g":["string","rendererror"],"n":"result"}}],[8,"Evaluable","","Evaluate directive or decorator",null,null],[10,"eval","","",12,{"i":[{"n":"self"},{"n":"registry"},{"n":"rendercontext"}],"o":{"g":["rendererror"],"n":"result"}}],[8,"HelperDef","","Helper Definition",null,null],[10,"call","","",13,{"i":[{"n":"self"},{"n":"helper"},{"n":"registry"},{"n":"rendercontext"}],"o":{"g":["rendererror"],"n":"result"}}],[8,"DecoratorDef","","Decorator Definition",null,null],[10,"call","","",14,{"i":[{"n":"self"},{"n":"directive"},{"n":"registry"},{"n":"rendercontext"}],"o":{"g":["rendererror"],"n":"result"}}],[8,"JsonRender","","Render Json data with default format",null,null],[10,"render","","",15,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"renders","","render into string",11,{"i":[{"n":"self"},{"n":"registry"},{"n":"rendercontext"}],"o":{"g":["string","rendererror"],"n":"result"}}]],"paths":[[3,"Template"],[3,"RenderError"],[3,"TemplateError"],[3,"RenderContext"],[4,"TemplateFileError"],[4,"TemplateRenderError"],[3,"Handlebars"],[3,"ContextJson"],[3,"Helper"],[3,"Decorator"],[3,"Context"],[8,"Renderable"],[8,"Evaluable"],[8,"HelperDef"],[8,"DecoratorDef"],[8,"JsonRender"]]};
searchIndex["httparse"] = {"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","The response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","Invalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",null,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"invalidchunksize"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"status"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"status"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"status"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"request"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"request"}],"o":{"n":"bool"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"response"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"response"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"header"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"header"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"header"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["hyper"] = {"doc":"Hyper","items":[[3,"Url","hyper","A parsed URL record.",null,null],[3,"LanguageTag","","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[0,"client","","HTTP Client",null,null],[3,"Client","hyper::client","A Client to use additional features with Requests.",null,null],[3,"RequestBuilder","","Options for an individual Request.",null,null],[3,"ProxyConfig","","Proxy server configuration with a custom connector and TLS wrapper.",null,null],[4,"Body","","An enum of possible body types for a Request.",null,null],[13,"ChunkedBody","","A Reader does not necessarily know it's size, so it is chunked.",1,null],[13,"SizedBody","","For Readers that can know their size, like a `File`.",1,null],[13,"BufBody","","A String has a size, and uses Content-Length.",1,null],[4,"RedirectPolicy","","Behavior regarding how to handle redirects within a Client.",null,null],[13,"FollowNone","","Don't follow any redirects.",2,null],[13,"FollowAll","","Follow all redirects.",2,null],[13,"FollowIf","","Follow a redirect if the contained function returns true.",2,null],[0,"pool","","Client Connection Pooling",null,null],[3,"Pool","hyper::client::pool","The `NetworkConnector` that behaves as a connection pool used by hyper's `Client`.",null,null],[3,"Config","","Config options for the `Pool`.",null,null],[12,"max_idle","","The maximum idle connections per host.",3,null],[3,"PooledStream","","A Stream that will try to be returned to the Pool when dropped.",null,null],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"config"}}],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",4,{"i":[{"n":"config"}],"o":{"g":["defaultconnector"],"n":"pool"}}],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",4,{"i":[{"n":"config"},{"n":"c"}],"o":{"n":"pool"}}],[11,"set_idle_timeout","","Set a duration for how long an idle connection is still valid.",4,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[11,"set_stale_check","","",4,{"i":[{"n":"self"},{"n":"f"}]}],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",4,{"i":[{"n":"self"}]}],[11,"connect","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"u16"},{"n":"str"}],"o":{"g":["pooledstream"],"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_inner","","Take the wrapped stream out of the pool completely.",5,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Gets a borrowed reference to the underlying stream.",5,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"read","","",5,null],[11,"write","","",5,null],[11,"flush","","",5,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"peer_addr","","",5,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"set_read_timeout","","",5,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"set_write_timeout","","",5,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"close","","",5,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"result"}}],[11,"set_previous_response_expected_no_content","","",5,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"previous_response_expected_no_content","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"drop","","",5,{"i":[{"n":"self"}]}],[0,"request","hyper::client","Client Requests",null,null],[3,"Request","hyper::client::request","A client request to a remote server. The W type tracks the state of the request, Fresh vs Streaming.",null,null],[12,"url","","The target URI for this request.",6,null],[12,"version","","The HTTP version of this request.",6,null],[11,"headers","","Read the Request headers.",6,{"i":[{"n":"self"}],"o":{"n":"headers"}}],[11,"method","","Read the Request method.",6,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"set_write_timeout","","Set the write timeout.",6,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"set_read_timeout","","Set the read timeout.",6,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"with_message","","Create a new `Request<Fresh>` that will use the given `HttpMessage` for its communication with the server. This implies that the given `HttpMessage` instance has already been properly initialized by the caller (e.g. a TCP connection's already established).",6,{"i":[{"n":"method"},{"n":"url"},{"g":["httpmessage"],"n":"box"}],"o":{"g":["request"],"n":"result"}}],[11,"new","","Create a new client request.",6,{"i":[{"n":"method"},{"n":"url"}],"o":{"g":["request"],"n":"result"}}],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",6,{"i":[{"n":"method"},{"n":"url"},{"n":"c"}],"o":{"g":["request"],"n":"result"}}],[11,"start","","Consume a Fresh Request, writing the headers and method, returning a Streaming Request.",6,{"i":[{"n":"self"}],"o":{"g":["request"],"n":"result"}}],[11,"headers_mut","","Get a mutable reference to the Request headers.",6,{"i":[{"n":"self"}],"o":{"n":"headers"}}],[11,"send","","Completes writing the request, and returns a response to read from.",6,{"i":[{"n":"self"}],"o":{"g":["response"],"n":"result"}}],[11,"write","","",6,null],[11,"flush","","",6,{"i":[{"n":"self"}],"o":{"n":"result"}}],[0,"response","hyper::client","Client Responses",null,null],[3,"Response","hyper::client::response","A response for a client request to a remote server.",null,null],[12,"status","","The status from the server.",7,null],[12,"headers","","The headers from the server.",7,null],[12,"version","","The HTTP version of this response from the server.",7,null],[12,"url","","The final URL of this response.",7,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new response from a server.",7,{"i":[{"n":"url"},{"g":["networkstream"],"n":"box"}],"o":{"g":["response"],"n":"result"}}],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",7,{"i":[{"n":"url"},{"g":["httpmessage"],"n":"box"}],"o":{"g":["response"],"n":"result"}}],[11,"status_raw","","Get the raw status code and reason.",7,{"i":[{"n":"self"}],"o":{"n":"rawstatus"}}],[11,"get_ref","","Gets a borrowed reference to the underlying `HttpMessage`.",7,{"i":[{"n":"self"}],"o":{"n":"httpmessage"}}],[11,"read","","",7,null],[11,"drop","","",7,{"i":[{"n":"self"}]}],[8,"IntoUrl","hyper::client","A helper trait to convert common objects into a Url.",null,null],[10,"into_url","","Consumes the object, trying to return a Url.",8,{"i":[{"n":"self"}],"o":{"g":["url","urlerror"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new Client.",9,{"o":{"n":"client"}}],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",9,{"i":[{"n":"config"}],"o":{"n":"client"}}],[11,"with_http_proxy","","Create a Client with an HTTP proxy to a (host, port).",9,{"i":[{"n":"h"},{"n":"u16"}],"o":{"n":"client"}}],[11,"with_proxy_config","","Create a Client using a proxy with a custom connector and SSL client.",9,{"i":[{"n":"proxyconfig"}],"o":{"n":"client"}}],[11,"with_connector","","Create a new client with a specific connector.",9,{"i":[{"n":"c"}],"o":{"n":"client"}}],[11,"with_protocol","","Create a new client with a specific `Protocol`.",9,{"i":[{"n":"p"}],"o":{"n":"client"}}],[11,"set_redirect_policy","","Set the RedirectPolicy.",9,{"i":[{"n":"self"},{"n":"redirectpolicy"}]}],[11,"set_read_timeout","","Set the read timeout value for all requests.",9,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[11,"set_write_timeout","","Set the write timeout value for all requests.",9,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[11,"get","","Build a Get request.",9,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"requestbuilder"}}],[11,"head","","Build a Head request.",9,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"requestbuilder"}}],[11,"patch","","Build a Patch request.",9,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"requestbuilder"}}],[11,"post","","Build a Post request.",9,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"requestbuilder"}}],[11,"put","","Build a Put request.",9,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"requestbuilder"}}],[11,"delete","","Build a Delete request.",9,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"requestbuilder"}}],[11,"request","","Build a new request using this Client.",9,{"i":[{"n":"self"},{"n":"method"},{"n":"u"}],"o":{"n":"requestbuilder"}}],[11,"default","","",9,{"o":{"n":"client"}}],[11,"body","","Set a request body to be sent.",10,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"requestbuilder"}}],[11,"headers","","Add additional headers to the request.",10,{"i":[{"n":"self"},{"n":"headers"}],"o":{"n":"requestbuilder"}}],[11,"header","","Add an individual new header to the request.",10,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"requestbuilder"}}],[11,"send","","Execute this request and receive a Response back.",10,{"i":[{"n":"self"}],"o":{"g":["response"],"n":"result"}}],[11,"read","","",1,null],[11,"from","","",1,{"i":[{"n":"r"}],"o":{"n":"body"}}],[11,"into_url","hyper","",11,{"i":[{"n":"self"}],"o":{"g":["url","urlerror"],"n":"result"}}],[11,"new","hyper::client","Create a new `ProxyConfig`.",12,{"i":[{"n":"str"},{"n":"h"},{"n":"u16"},{"n":"c"},{"n":"s"}],"o":{"n":"proxyconfig"}}],[11,"set_pool_config","","Change the `pool::Config` for the proxy.",12,{"i":[{"n":"self"},{"g":["config"],"n":"option"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"redirectpolicy"}}],[11,"default","","",2,{"o":{"n":"redirectpolicy"}}],[0,"error","hyper","Error and Result module.",null,null],[4,"ParseError","hyper::error","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",13,null],[13,"IdnaError","","",13,null],[13,"InvalidPort","","",13,null],[13,"InvalidIpv4Address","","",13,null],[13,"InvalidIpv6Address","","",13,null],[13,"InvalidDomainCharacter","","",13,null],[13,"RelativeUrlWithoutBase","","",13,null],[13,"RelativeUrlWithCannotBeABaseBase","","",13,null],[13,"SetHostOnCannotBeABaseUrl","","",13,null],[13,"Overflow","","",13,null],[4,"Error","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",14,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",14,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",14,null],[13,"Header","","An invalid `Header`.",14,null],[13,"TooLarge","","A message head is too large to be reasonable.",14,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",14,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",14,null],[13,"Ssl","","An error from a SSL library.",14,null],[13,"Utf8","","Parsing a field as string failed",14,null],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",null,null],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",14,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",14,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"option"}}],[11,"from","","",14,{"i":[{"n":"ioerror"}],"o":{"n":"error"}}],[11,"from","","",14,{"i":[{"n":"parseerror"}],"o":{"n":"error"}}],[11,"from","","",14,{"i":[{"n":"utf8error"}],"o":{"n":"error"}}],[11,"from","","",14,{"i":[{"n":"fromutf8error"}],"o":{"n":"error"}}],[11,"from","","",14,{"i":[{"n":"error"}],"o":{"n":"error"}}],[0,"method","hyper","The HTTP request method",null,null],[4,"Method","hyper::method","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",15,null],[13,"Get","","GET",15,null],[13,"Post","","POST",15,null],[13,"Put","","PUT",15,null],[13,"Delete","","DELETE",15,null],[13,"Head","","HEAD",15,null],[13,"Trace","","TRACE",15,null],[13,"Connect","","CONNECT",15,null],[13,"Patch","","PATCH",15,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",15,null],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"method"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"method"}],"o":{"n":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",15,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result is executed multiple times.",15,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_str","","",15,{"i":[{"n":"str"}],"o":{"g":["method","error"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"header","hyper","Headers container, and common header fields.",null,null],[3,"EntityTag","hyper::header","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",16,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[12,"0","","",17,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[12,"0","","",18,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",19,null],[12,"quality","","The quality (client or server preference) for the value.",19,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",20,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",21,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",22,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",23,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",24,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",25,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",26,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",27,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",28,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",29,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",30,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",31,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",32,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",33,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",33,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",34,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",35,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",36,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",null,null],[12,"disposition","","The disposition",37,null],[12,"parameters","","Disposition parameters",37,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",38,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",39,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",40,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",41,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",42,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[12,"0","","",43,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",44,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",45,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",46,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",47,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",48,null],[12,"port","","An optional port number.",48,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",49,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",50,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",51,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[12,"0","","",52,null],[3,"Origin","","The `Origin` header.",null,null],[12,"scheme","","The scheme, such as http or https",53,null],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",53,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",54,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",55,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[12,"0","","",56,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[12,"0","","",57,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",58,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",59,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",59,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",60,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",61,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",62,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",62,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[12,"0","","",63,null],[3,"Link","","The `Link` header, defined in RFC5988",null,null],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",null,null],[12,"0","","",64,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",65,null],[13,"Iso_8859_1","","ISO-8859-1",65,null],[13,"Iso_8859_2","","ISO-8859-2",65,null],[13,"Iso_8859_3","","ISO-8859-3",65,null],[13,"Iso_8859_4","","ISO-8859-4",65,null],[13,"Iso_8859_5","","ISO-8859-5",65,null],[13,"Iso_8859_6","","ISO-8859-6",65,null],[13,"Iso_8859_7","","ISO-8859-7",65,null],[13,"Iso_8859_8","","ISO-8859-8",65,null],[13,"Iso_8859_9","","ISO-8859-9",65,null],[13,"Iso_8859_10","","ISO-8859-10",65,null],[13,"Shift_Jis","","Shift_JIS",65,null],[13,"Euc_Jp","","EUC-JP",65,null],[13,"Iso_2022_Kr","","ISO-2022-KR",65,null],[13,"Euc_Kr","","EUC-KR",65,null],[13,"Iso_2022_Jp","","ISO-2022-JP",65,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",65,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",65,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",65,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",65,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",65,null],[13,"Gb2312","","GB2312",65,null],[13,"Big5","","Big5",65,null],[13,"Koi8_R","","KOI8-R",65,null],[13,"Ext","","An arbitrary charset specified as a string",65,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",66,null],[13,"Gzip","","The `gzip` encoding.",66,null],[13,"Deflate","","The `deflate` encoding.",66,null],[13,"Compress","","The `compress` encoding.",66,null],[13,"Identity","","The `identity` encoding.",66,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",66,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",67,null],[13,"Null","","A hidden origin",67,null],[13,"Value","","Allow one particular origin",67,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",68,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",68,null],[13,"Unregistered","","The given range unit is not registered at IANA.",68,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",69,null],[13,"NoStore","","\"no-store\"",69,null],[13,"NoTransform","","\"no-transform\"",69,null],[13,"OnlyIfCached","","\"only-if-cached\"",69,null],[13,"MaxAge","","\"max-age=delta\"",69,null],[13,"MaxStale","","\"max-stale=delta\"",69,null],[13,"MinFresh","","\"min-fresh=delta\"",69,null],[13,"MustRevalidate","","\"must-revalidate\"",69,null],[13,"Public","","\"public\"",69,null],[13,"Private","","\"private\"",69,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",69,null],[13,"SMaxAge","","\"s-maxage=delta\"",69,null],[13,"Extension","","Extension directives. Optionally include an argument.",69,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",70,null],[13,"Close","","The `close` connection value.",70,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",70,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",71,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",71,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",71,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",72,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",72,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",73,null],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",73,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",73,null],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",73,null],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",73,null],[12,"resp","","other-range-resp",73,null],[4,"Expect","hyper::header","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",74,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",75,null],[13,"Items","","Only the listed items are a match",75,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",76,null],[13,"Items","","Only the listed items are a match",76,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",77,null],[13,"Date","","The date when the client retrieved the resource",77,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",78,null],[13,"Ext","","Every value other than `no-cache`.",78,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",79,null],[13,"ReturnRepresentation","","\"return=representation\"",79,null],[13,"ReturnMinimal","","\"return=minimal\"",79,null],[13,"HandlingStrict","","\"handling=strict\"",79,null],[13,"HandlingLeniant","","\"handling=leniant\"",79,null],[13,"Wait","","\"wait=delta\"",79,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",79,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",80,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",80,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",81,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",81,null],[13,"Last","","Get last x bytes (\"-x\")",81,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",82,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",82,null],[13,"SameOrigin","","`same-origin`",82,null],[13,"Origin","","`origin`",82,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",82,null],[13,"UnsafeUrl","","`unsafe-url`",82,null],[13,"StrictOrigin","","`strict-origin`",82,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",82,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",83,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",83,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",83,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",83,null],[13,"Unregistered","","Any other protocol name not known to hyper",83,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",84,null],[13,"Items","","Only the listed items are a match",84,null],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",null,null],[13,"Alternate","","alternate.",85,null],[13,"Appendix","","appendix.",85,null],[13,"Bookmark","","bookmark.",85,null],[13,"Chapter","","chapter.",85,null],[13,"Contents","","contents.",85,null],[13,"Copyright","","copyright.",85,null],[13,"Current","","current.",85,null],[13,"DescribedBy","","describedby.",85,null],[13,"Edit","","edit.",85,null],[13,"EditMedia","","edit-media.",85,null],[13,"Enclosure","","enclosure.",85,null],[13,"First","","first.",85,null],[13,"Glossary","","glossary.",85,null],[13,"Help","","help.",85,null],[13,"Hub","","hub.",85,null],[13,"Index","","index.",85,null],[13,"Last","","last.",85,null],[13,"LatestVersion","","latest-version.",85,null],[13,"License","","license.",85,null],[13,"Next","","next.",85,null],[13,"NextArchive","","next-archive.",85,null],[13,"Payment","","payment.",85,null],[13,"Prev","","prev.",85,null],[13,"PredecessorVersion","","predecessor-version.",85,null],[13,"Previous","","previous.",85,null],[13,"PrevArchive","","prev-archive.",85,null],[13,"Related","","related.",85,null],[13,"Replies","","replies.",85,null],[13,"Section","","section.",85,null],[13,"RelationTypeSelf","","self.",85,null],[13,"Service","","service.",85,null],[13,"Start","","start.",85,null],[13,"Stylesheet","","stylesheet.",85,null],[13,"Subsection","","subsection.",85,null],[13,"SuccessorVersion","","successor-version.",85,null],[13,"Up","","up.",85,null],[13,"VersionHistory","","versionHistory.",85,null],[13,"Via","","via.",85,null],[13,"WorkingCopy","","working-copy.",85,null],[13,"WorkingCopyOf","","working-copy-of.",85,null],[13,"ExtRelType","","ext-rel-type.",85,null],[4,"MediaDesc","","A Media Descriptors Enum based on: https://www.w3.org/TR/html401/types.html#h-6.13",null,null],[13,"Screen","","screen.",86,null],[13,"Tty","","tty.",86,null],[13,"Tv","","tv.",86,null],[13,"Projection","","projection.",86,null],[13,"Handheld","","handheld.",86,null],[13,"Print","","print.",86,null],[13,"Braille","","braille.",86,null],[13,"Aural","","aural.",86,null],[13,"All","","all.",86,null],[13,"Extension","","Unrecognized media descriptor extension.",86,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"i":[{"n":"t"}],"o":{"n":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"i":[{"n":"f32"}],"o":{"n":"quality"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"accept"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"accept"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"accept"}],"o":{"n":"bool"}}],[11,"deref","","",20,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",20,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",20,{"o":{"n":"str"}}],[11,"parse_header","","",20,null],[11,"fmt_header","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"star","","A constructor to easily create `Accept: */*`.",20,{"o":{"n":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",20,{"o":{"n":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",20,{"o":{"n":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",20,{"o":{"n":"accept"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"accesscontrolallowcredentials"}}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"accesscontrolallowcredentials"}],"o":{"n":"bool"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"header_name","","",87,{"o":{"n":"str"}}],[11,"parse_header","","",87,null],[11,"fmt_header","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"accesscontrolallowheaders"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"accesscontrolallowheaders"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"accesscontrolallowheaders"}],"o":{"n":"bool"}}],[11,"deref","","",21,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",21,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",21,{"o":{"n":"str"}}],[11,"parse_header","","",21,null],[11,"fmt_header","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"accesscontrolallowmethods"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"accesscontrolallowmethods"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"accesscontrolallowmethods"}],"o":{"n":"bool"}}],[11,"deref","","",22,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",22,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",22,{"o":{"n":"str"}}],[11,"parse_header","","",22,null],[11,"fmt_header","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"accesscontrolalloworigin"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"accesscontrolalloworigin"}],"o":{"n":"bool"}}],[11,"ne","","",67,{"i":[{"n":"self"},{"n":"accesscontrolalloworigin"}],"o":{"n":"bool"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"header_name","","",67,{"o":{"n":"str"}}],[11,"parse_header","","",67,null],[11,"fmt_header","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"accesscontrolexposeheaders"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"accesscontrolexposeheaders"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"accesscontrolexposeheaders"}],"o":{"n":"bool"}}],[11,"deref","","",23,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",23,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",23,{"o":{"n":"str"}}],[11,"parse_header","","",23,null],[11,"fmt_header","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"accesscontrolmaxage"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"accesscontrolmaxage"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"accesscontrolmaxage"}],"o":{"n":"bool"}}],[11,"deref","","",24,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"deref_mut","","",24,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"header_name","","",24,{"o":{"n":"str"}}],[11,"parse_header","","",24,null],[11,"fmt_header","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"accesscontrolrequestheaders"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"accesscontrolrequestheaders"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"accesscontrolrequestheaders"}],"o":{"n":"bool"}}],[11,"deref","","",25,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",25,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",25,{"o":{"n":"str"}}],[11,"parse_header","","",25,null],[11,"fmt_header","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"accesscontrolrequestmethod"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"accesscontrolrequestmethod"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"accesscontrolrequestmethod"}],"o":{"n":"bool"}}],[11,"deref","","",26,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"deref_mut","","",26,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"header_name","","",26,{"o":{"n":"str"}}],[11,"parse_header","","",26,null],[11,"fmt_header","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"acceptcharset"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"acceptcharset"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"acceptcharset"}],"o":{"n":"bool"}}],[11,"deref","","",27,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",27,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",27,{"o":{"n":"str"}}],[11,"parse_header","","",27,null],[11,"fmt_header","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"acceptencoding"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"acceptencoding"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"acceptencoding"}],"o":{"n":"bool"}}],[11,"deref","","",28,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",28,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",28,{"o":{"n":"str"}}],[11,"parse_header","","",28,null],[11,"fmt_header","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"acceptlanguage"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"acceptlanguage"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"acceptlanguage"}],"o":{"n":"bool"}}],[11,"deref","","",29,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",29,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",29,{"o":{"n":"str"}}],[11,"parse_header","","",29,null],[11,"fmt_header","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"acceptranges"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"acceptranges"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"acceptranges"}],"o":{"n":"bool"}}],[11,"deref","","",30,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",30,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",30,{"o":{"n":"str"}}],[11,"parse_header","","",30,null],[11,"fmt_header","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"rangeunit"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"rangeunit"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"rangeunit"}],"o":{"n":"bool"}}],[11,"from_str","","",68,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"allow"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"allow"}],"o":{"n":"bool"}}],[11,"ne","","",31,{"i":[{"n":"self"},{"n":"allow"}],"o":{"n":"bool"}}],[11,"deref","","",31,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",31,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",31,{"o":{"n":"str"}}],[11,"parse_header","","",31,null],[11,"fmt_header","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"authorization"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"authorization"}],"o":{"n":"bool"}}],[11,"ne","","",32,{"i":[{"n":"self"},{"n":"authorization"}],"o":{"n":"bool"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",32,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"deref_mut","","",32,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"header_name","","",32,{"o":{"n":"str"}}],[11,"parse_header","","",32,null],[11,"fmt_header","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"basic"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"basic"}],"o":{"n":"bool"}}],[11,"ne","","",33,{"i":[{"n":"self"},{"n":"basic"}],"o":{"n":"bool"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"scheme","","",33,{"o":{"g":["str"],"n":"option"}}],[11,"fmt_scheme","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",33,{"i":[{"n":"str"}],"o":{"g":["basic"],"n":"result"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"bearer"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"bearer"}],"o":{"n":"bool"}}],[11,"ne","","",34,{"i":[{"n":"self"},{"n":"bearer"}],"o":{"n":"bool"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"scheme","","",34,{"o":{"g":["str"],"n":"option"}}],[11,"fmt_scheme","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",34,{"i":[{"n":"str"}],"o":{"g":["bearer"],"n":"result"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"cachecontrol"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"cachecontrol"}],"o":{"n":"bool"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"cachecontrol"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",35,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",35,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",35,{"o":{"n":"str"}}],[11,"parse_header","","",35,null],[11,"fmt_header","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"cachedirective"}],"o":{"n":"bool"}}],[11,"ne","","",69,{"i":[{"n":"self"},{"n":"cachedirective"}],"o":{"n":"bool"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"cachedirective"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",69,{"i":[{"n":"str"}],"o":{"g":["cachedirective","option"],"n":"result"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"cookie"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"cookie"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"cookie"}],"o":{"n":"bool"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",43,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",43,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",43,{"o":{"n":"str"}}],[11,"parse_header","","",43,null],[11,"fmt_header","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"connectionoption"}}],[11,"eq","","",70,{"i":[{"n":"self"},{"n":"connectionoption"}],"o":{"n":"bool"}}],[11,"ne","","",70,{"i":[{"n":"self"},{"n":"connectionoption"}],"o":{"n":"bool"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",70,{"i":[{"n":"str"}],"o":{"g":["connectionoption"],"n":"result"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"connection"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"connection"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"connection"}],"o":{"n":"bool"}}],[11,"deref","","",36,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",36,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",36,{"o":{"n":"str"}}],[11,"parse_header","","",36,null],[11,"fmt_header","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",36,{"o":{"n":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",36,{"o":{"n":"connection"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"dispositiontype"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"dispositiontype"}],"o":{"n":"bool"}}],[11,"ne","","",71,{"i":[{"n":"self"},{"n":"dispositiontype"}],"o":{"n":"bool"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"dispositionparam"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"dispositionparam"}],"o":{"n":"bool"}}],[11,"ne","","",72,{"i":[{"n":"self"},{"n":"dispositionparam"}],"o":{"n":"bool"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"contentdisposition"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"contentdisposition"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"contentdisposition"}],"o":{"n":"bool"}}],[11,"header_name","","",37,{"o":{"n":"str"}}],[11,"parse_header","","",37,null],[11,"fmt_header","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"contentencoding"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"contentencoding"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"contentencoding"}],"o":{"n":"bool"}}],[11,"deref","","",39,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",39,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",39,{"o":{"n":"str"}}],[11,"parse_header","","",39,null],[11,"fmt_header","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"contentlanguage"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"contentlanguage"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"contentlanguage"}],"o":{"n":"bool"}}],[11,"deref","","",40,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",40,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",40,{"o":{"n":"str"}}],[11,"parse_header","","",40,null],[11,"fmt_header","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"contentlength"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"contentlength"}],"o":{"n":"bool"}}],[11,"ne","","",38,{"i":[{"n":"self"},{"n":"contentlength"}],"o":{"n":"bool"}}],[11,"header_name","","",38,{"o":{"n":"str"}}],[11,"parse_header","","",38,null],[11,"fmt_header","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",38,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"deref_mut","","",38,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"contentrange"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"contentrange"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"contentrange"}],"o":{"n":"bool"}}],[11,"deref","","",41,{"i":[{"n":"self"}],"o":{"n":"contentrangespec"}}],[11,"deref_mut","","",41,{"i":[{"n":"self"}],"o":{"n":"contentrangespec"}}],[11,"header_name","","",41,{"o":{"n":"str"}}],[11,"parse_header","","",41,null],[11,"fmt_header","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"contentrangespec"}],"o":{"n":"bool"}}],[11,"ne","","",73,{"i":[{"n":"self"},{"n":"contentrangespec"}],"o":{"n":"bool"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"contentrangespec"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",73,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"contenttype"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"contenttype"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"contenttype"}],"o":{"n":"bool"}}],[11,"deref","","",42,{"i":[{"n":"self"}],"o":{"n":"mime"}}],[11,"deref_mut","","",42,{"i":[{"n":"self"}],"o":{"n":"mime"}}],[11,"header_name","","",42,{"o":{"n":"str"}}],[11,"parse_header","","",42,null],[11,"fmt_header","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",42,{"o":{"n":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",42,{"o":{"n":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",42,{"o":{"n":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",42,{"o":{"n":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",42,{"o":{"n":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",42,{"o":{"n":"contenttype"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"bool"}}],[11,"deref","","",44,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref_mut","","",44,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"header_name","","",44,{"o":{"n":"str"}}],[11,"parse_header","","",44,null],[11,"fmt_header","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"etag"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"etag"}],"o":{"n":"bool"}}],[11,"ne","","",45,{"i":[{"n":"self"},{"n":"etag"}],"o":{"n":"bool"}}],[11,"deref","","",45,{"i":[{"n":"self"}],"o":{"n":"entitytag"}}],[11,"deref_mut","","",45,{"i":[{"n":"self"}],"o":{"n":"entitytag"}}],[11,"header_name","","",45,{"o":{"n":"str"}}],[11,"parse_header","","",45,null],[11,"fmt_header","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"expect"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"expect"}],"o":{"n":"bool"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"header_name","","",74,{"o":{"n":"str"}}],[11,"parse_header","","",74,null],[11,"fmt_header","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"expires"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"expires"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"expires"}],"o":{"n":"bool"}}],[11,"deref","","",46,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref_mut","","",46,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"header_name","","",46,{"o":{"n":"str"}}],[11,"parse_header","","",46,null],[11,"fmt_header","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"from"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"from"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"from"}],"o":{"n":"bool"}}],[11,"deref","","",47,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref_mut","","",47,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"header_name","","",47,{"o":{"n":"str"}}],[11,"parse_header","","",47,null],[11,"fmt_header","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"host"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"header_name","","",48,{"o":{"n":"str"}}],[11,"parse_header","","",48,null],[11,"fmt_header","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",48,{"i":[{"n":"str"}],"o":{"g":["host"],"n":"result"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"ifmatch"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"ifmatch"}],"o":{"n":"bool"}}],[11,"ne","","",75,{"i":[{"n":"self"},{"n":"ifmatch"}],"o":{"n":"bool"}}],[11,"header_name","","",75,{"o":{"n":"str"}}],[11,"parse_header","","",75,null],[11,"fmt_header","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"ifmodifiedsince"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"ifmodifiedsince"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"ifmodifiedsince"}],"o":{"n":"bool"}}],[11,"deref","","",49,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref_mut","","",49,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"header_name","","",49,{"o":{"n":"str"}}],[11,"parse_header","","",49,null],[11,"fmt_header","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"ifnonematch"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"ifnonematch"}],"o":{"n":"bool"}}],[11,"ne","","",76,{"i":[{"n":"self"},{"n":"ifnonematch"}],"o":{"n":"bool"}}],[11,"header_name","","",76,{"o":{"n":"str"}}],[11,"parse_header","","",76,null],[11,"fmt_header","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"ifrange"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"ifrange"}],"o":{"n":"bool"}}],[11,"ne","","",77,{"i":[{"n":"self"},{"n":"ifrange"}],"o":{"n":"bool"}}],[11,"header_name","","",77,{"o":{"n":"str"}}],[11,"parse_header","","",77,null],[11,"fmt_header","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"ifunmodifiedsince"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"ifunmodifiedsince"}],"o":{"n":"bool"}}],[11,"ne","","",50,{"i":[{"n":"self"},{"n":"ifunmodifiedsince"}],"o":{"n":"bool"}}],[11,"deref","","",50,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref_mut","","",50,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"header_name","","",50,{"o":{"n":"str"}}],[11,"parse_header","","",50,null],[11,"fmt_header","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"lastmodified"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"lastmodified"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"lastmodified"}],"o":{"n":"bool"}}],[11,"deref","","",51,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref_mut","","",51,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"header_name","","",51,{"o":{"n":"str"}}],[11,"parse_header","","",51,null],[11,"fmt_header","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"location"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"deref","","",52,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref_mut","","",52,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"header_name","","",52,{"o":{"n":"str"}}],[11,"parse_header","","",52,null],[11,"fmt_header","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"origin"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new `Origin` header.",53,{"i":[{"n":"s"},{"n":"h"},{"g":["u16"],"n":"option"}],"o":{"n":"origin"}}],[11,"header_name","","",53,{"o":{"n":"str"}}],[11,"parse_header","","",53,null],[11,"from_str","","",53,{"i":[{"n":"str"}],"o":{"g":["origin"],"n":"result"}}],[11,"fmt_header","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"origin"}],"o":{"n":"bool"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"pragma"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"pragma"}],"o":{"n":"bool"}}],[11,"ne","","",78,{"i":[{"n":"self"},{"n":"pragma"}],"o":{"n":"bool"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"header_name","","",78,{"o":{"n":"str"}}],[11,"parse_header","","",78,null],[11,"fmt_header","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"prefer"}],"o":{"n":"bool"}}],[11,"ne","","",54,{"i":[{"n":"self"},{"n":"prefer"}],"o":{"n":"bool"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"prefer"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",54,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",54,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",54,{"o":{"n":"str"}}],[11,"parse_header","","",54,null],[11,"fmt_header","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"preference"}],"o":{"n":"bool"}}],[11,"ne","","",79,{"i":[{"n":"self"},{"n":"preference"}],"o":{"n":"bool"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"preference"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",79,{"i":[{"n":"str"}],"o":{"g":["preference","option"],"n":"result"}}],[11,"eq","","",55,{"i":[{"n":"self"},{"n":"preferenceapplied"}],"o":{"n":"bool"}}],[11,"ne","","",55,{"i":[{"n":"self"},{"n":"preferenceapplied"}],"o":{"n":"bool"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"preferenceapplied"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",55,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",55,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",55,{"o":{"n":"str"}}],[11,"parse_header","","",55,null],[11,"fmt_header","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"range"}],"o":{"n":"bool"}}],[11,"ne","","",80,{"i":[{"n":"self"},{"n":"range"}],"o":{"n":"bool"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"byterangespec"}],"o":{"n":"bool"}}],[11,"ne","","",81,{"i":[{"n":"self"},{"n":"byterangespec"}],"o":{"n":"bool"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"byterangespec"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",80,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",80,{"i":[{"n":"vec"}],"o":{"n":"range"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",80,{"i":[{"n":"str"}],"o":{"g":["range"],"n":"result"}}],[11,"from_str","","",81,{"i":[{"n":"str"}],"o":{"g":["byterangespec"],"n":"result"}}],[11,"header_name","","",80,{"o":{"n":"str"}}],[11,"parse_header","","",80,null],[11,"fmt_header","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"referer"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"referer"}],"o":{"n":"bool"}}],[11,"ne","","",56,{"i":[{"n":"self"},{"n":"referer"}],"o":{"n":"bool"}}],[11,"deref","","",56,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref_mut","","",56,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"header_name","","",56,{"o":{"n":"str"}}],[11,"parse_header","","",56,null],[11,"fmt_header","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"referrerpolicy"}}],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"referrerpolicy"}],"o":{"n":"bool"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"header_name","","",82,{"o":{"n":"str"}}],[11,"parse_header","","",82,null],[11,"fmt_header","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"server"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"server"}],"o":{"n":"bool"}}],[11,"ne","","",57,{"i":[{"n":"self"},{"n":"server"}],"o":{"n":"bool"}}],[11,"deref","","",57,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref_mut","","",57,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"header_name","","",57,{"o":{"n":"str"}}],[11,"parse_header","","",57,null],[11,"fmt_header","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"setcookie"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"setcookie"}],"o":{"n":"bool"}}],[11,"ne","","",58,{"i":[{"n":"self"},{"n":"setcookie"}],"o":{"n":"bool"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",58,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",58,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",58,{"o":{"n":"str"}}],[11,"parse_header","","",58,null],[11,"fmt_header","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt_multi_header","","",58,{"i":[{"n":"self"},{"n":"multilineformatter"}],"o":{"n":"result"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"stricttransportsecurity"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"stricttransportsecurity"}],"o":{"n":"bool"}}],[11,"ne","","",59,{"i":[{"n":"self"},{"n":"stricttransportsecurity"}],"o":{"n":"bool"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",59,{"i":[{"n":"u64"}],"o":{"n":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",59,{"i":[{"n":"u64"}],"o":{"n":"stricttransportsecurity"}}],[11,"from_str","","",59,{"i":[{"n":"str"}],"o":{"g":["stricttransportsecurity"],"n":"result"}}],[11,"header_name","","",59,{"o":{"n":"str"}}],[11,"parse_header","","",59,null],[11,"fmt_header","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"transferencoding"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"transferencoding"}],"o":{"n":"bool"}}],[11,"ne","","",60,{"i":[{"n":"self"},{"n":"transferencoding"}],"o":{"n":"bool"}}],[11,"deref","","",60,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",60,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",60,{"o":{"n":"str"}}],[11,"parse_header","","",60,null],[11,"fmt_header","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"upgrade"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"upgrade"}],"o":{"n":"bool"}}],[11,"ne","","",61,{"i":[{"n":"self"},{"n":"upgrade"}],"o":{"n":"bool"}}],[11,"deref","","",61,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",61,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"header_name","","",61,{"o":{"n":"str"}}],[11,"parse_header","","",61,null],[11,"fmt_header","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"protocolname"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"protocolname"}],"o":{"n":"bool"}}],[11,"ne","","",83,{"i":[{"n":"self"},{"n":"protocolname"}],"o":{"n":"bool"}}],[11,"from_str","","",83,{"i":[{"n":"str"}],"o":{"g":["protocolname"],"n":"result"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"protocol"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"protocol"}],"o":{"n":"bool"}}],[11,"ne","","",62,{"i":[{"n":"self"},{"n":"protocol"}],"o":{"n":"bool"}}],[11,"new","","Creates a new Protocol with the given name and version",62,{"i":[{"n":"protocolname"},{"g":["string"],"n":"option"}],"o":{"n":"protocol"}}],[11,"from_str","","",62,{"i":[{"n":"str"}],"o":{"g":["protocol"],"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"useragent"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"useragent"}],"o":{"n":"bool"}}],[11,"ne","","",63,{"i":[{"n":"self"},{"n":"useragent"}],"o":{"n":"bool"}}],[11,"deref","","",63,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref_mut","","",63,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"header_name","","",63,{"o":{"n":"str"}}],[11,"parse_header","","",63,null],[11,"fmt_header","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"vary"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"vary"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"vary"}],"o":{"n":"bool"}}],[11,"header_name","","",84,{"o":{"n":"str"}}],[11,"parse_header","","",84,null],[11,"fmt_header","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"link"}}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"link"}],"o":{"n":"bool"}}],[11,"ne","","",88,{"i":[{"n":"self"},{"n":"link"}],"o":{"n":"bool"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"linkvalue"}}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"linkvalue"}],"o":{"n":"bool"}}],[11,"ne","","",89,{"i":[{"n":"self"},{"n":"linkvalue"}],"o":{"n":"bool"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"mediadesc"}}],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"mediadesc"}],"o":{"n":"bool"}}],[11,"ne","","",86,{"i":[{"n":"self"},{"n":"mediadesc"}],"o":{"n":"bool"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"relationtype"}}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"relationtype"}],"o":{"n":"bool"}}],[11,"ne","","",85,{"i":[{"n":"self"},{"n":"relationtype"}],"o":{"n":"bool"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",88,{"i":[{"g":["linkvalue"],"n":"vec"}],"o":{"n":"link"}}],[11,"values","","Get the `Link` header's `LinkValue`s.",88,null],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",88,{"i":[{"n":"self"},{"n":"linkvalue"}]}],[11,"new","","Create `LinkValue` from URI-Reference.",89,{"i":[{"n":"t"}],"o":{"n":"linkvalue"}}],[11,"link","","Get the `LinkValue`'s value.",89,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",89,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",89,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",89,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",89,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",89,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"title","","Get the `LinkValue`'s `title` parameter.",89,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",89,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",89,{"i":[{"n":"self"}],"o":{"g":["mime"],"n":"option"}}],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",89,{"i":[{"n":"self"},{"n":"relationtype"}],"o":{"n":"linkvalue"}}],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",89,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"linkvalue"}}],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",89,{"i":[{"n":"self"},{"n":"relationtype"}],"o":{"n":"linkvalue"}}],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",89,{"i":[{"n":"self"},{"n":"languagetag"}],"o":{"n":"linkvalue"}}],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",89,{"i":[{"n":"self"},{"n":"mediadesc"}],"o":{"n":"linkvalue"}}],[11,"set_title","","Set `LinkValue`'s `title` parameter.",89,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"linkvalue"}}],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",89,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"linkvalue"}}],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",89,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"linkvalue"}}],[11,"header_name","","",88,{"o":{"n":"str"}}],[11,"parse_header","","",88,null],[11,"fmt_header","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",88,{"i":[{"n":"str"}],"o":{"g":["link"],"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",86,{"i":[{"n":"str"}],"o":{"g":["mediadesc"],"n":"result"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",85,{"i":[{"n":"str"}],"o":{"g":["relationtype"],"n":"result"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"charset"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"charset"}],"o":{"n":"bool"}}],[11,"ne","","",65,{"i":[{"n":"self"},{"n":"charset"}],"o":{"n":"bool"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",65,{"i":[{"n":"str"}],"o":{"g":["charset"],"n":"result"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"encoding"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"encoding"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"encoding"}],"o":{"n":"bool"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",66,{"i":[{"n":"str"}],"o":{"g":["encoding"],"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"entitytag"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",16,{"i":[{"n":"bool"},{"n":"string"}],"o":{"n":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",16,{"i":[{"n":"string"}],"o":{"n":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",16,{"i":[{"n":"string"}],"o":{"n":"entitytag"}}],[11,"tag","","Get the tag.",16,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",16,{"i":[{"n":"self"},{"n":"string"}]}],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",16,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",16,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",16,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",16,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",16,{"i":[{"n":"str"}],"o":{"g":["entitytag"],"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",17,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",17,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"le","","",17,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"gt","","",17,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"ge","","",17,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"cmp","","",17,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"ordering"}}],[11,"from_str","","",17,{"i":[{"n":"str"}],"o":{"g":["httpdate"],"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"quality"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cmp","","",18,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"ordering"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",18,{"i":[{"n":"self"},{"n":"quality"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",18,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"le","","",18,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"gt","","",18,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"ge","","",18,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",18,{"o":{"n":"quality"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"qualityitem"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"qualityitem"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"qualityitem"}],"o":{"n":"bool"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",19,{"i":[{"n":"t"},{"n":"quality"}],"o":{"n":"qualityitem"}}],[11,"partial_cmp","","",19,{"i":[{"n":"self"},{"n":"qualityitem"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",19,{"i":[{"n":"str"}],"o":{"g":["qualityitem"],"n":"result"}}],[0,"parsing","","Utility functions for Header implementations.",null,null],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",90,null],[12,"language_tag","","The human language details of the `value`, if available.",90,null],[12,"value","","The parameter value, as expressed in octets.",90,null],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",null,null],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"i":[{"n":"str"}],"o":{"g":["extendedvalue"],"n":"result"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"extendedvalue"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"extendedvalue"}],"o":{"n":"bool"}}],[11,"ne","","",90,{"i":[{"n":"self"},{"n":"extendedvalue"}],"o":{"n":"bool"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"http_value"}}],[11,"contains","","",91,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",92,{"o":{"g":["str"],"n":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Header","","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",93,{"o":{"n":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",93,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"HeaderClone","","Internal implementation detail.",null,null],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"headers"}}],[11,"new","","Creates a new, empty headers map.",95,{"o":{"n":"headers"}}],[11,"set","","Set a header field to the corresponding value.",95,{"i":[{"n":"self"},{"n":"h"}]}],[11,"get_raw","","Access the raw value of a header.",95,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",95,{"i":[{"n":"self"},{"n":"k"},{"g":["vec"],"n":"vec"}]}],[11,"append_raw","","Append a value to raw value of this header.",95,{"i":[{"n":"self"},{"n":"k"},{"g":["u8"],"n":"vec"}]}],[11,"remove_raw","","Remove a header set by set_raw",95,{"i":[{"n":"self"},{"n":"str"}]}],[11,"get","","Get a reference to the header field's value, if it exists.",95,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",95,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",95,{"i":[{"n":"self"}],"o":{"n":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",95,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clear","","Remove all headers from the map.",95,{"i":[{"n":"self"}]}],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"headers"}],"o":{"n":"bool"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",96,{"i":[{"n":"self"}],"o":{"g":["headerview"],"n":"option"}}],[11,"is","","Check if a HeaderView is a certain Header.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"name","","Get the Header name as a slice.",97,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"value","","Cast the value to a certain Header type.",97,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"value_string","","Get just the header value as a String.",97,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"extend","","",95,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",95,{"i":[{"n":"i"}],"o":{"n":"headers"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"http","hyper","Pieces pertaining to the HTTP message protocol.",null,null],[3,"RawStatus","hyper::http","The raw status code and reason-phrase.",null,null],[12,"0","","",98,null],[12,"1","","",98,null],[5,"should_keep_alive","","Checks if a connection should be kept alive.",null,{"i":[{"n":"httpversion"},{"n":"headers"}],"o":{"n":"bool"}}],[0,"h1","","Adapts the HTTP/1.1 implementation into the `HttpMessage` API.",null,null],[3,"Http11Message","hyper::http::h1","An implementation of the `HttpMessage` trait for HTTP/1.1.",null,null],[3,"Http11Protocol","","The `Protocol` implementation provides HTTP/1.1 messages.",null,null],[3,"EndError","","",null,null],[3,"Incoming","","An Incoming Message head. Includes request/status line, and headers.",null,null],[12,"version","","HTTP version of the message.",99,null],[12,"subject","","Subject (request line or status line) of Incoming message.",99,null],[12,"headers","","Headers of the Incoming message.",99,null],[4,"HttpReader","","Readers to handle different Transfer-Encodings.",null,null],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",100,null],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",100,null],[13,"EofReader","","A Reader used for responses that don't indicate a length or chunked.",100,null],[13,"EmptyReader","","A Reader used for messages that should never have a body.",100,null],[4,"HttpWriter","","Writers to handle different Transfer-Encodings.",null,null],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",101,null],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",101,null],[13,"SizedWriter","","A Writer for when Content-Length is set.",101,null],[13,"EmptyWriter","","A writer that should not write any body.",101,null],[5,"parse_request","","Parses a request into an Incoming message head.",null,{"i":[{"n":"bufreader"}],"o":{"g":["incoming"],"n":"result"}}],[5,"parse_response","","Parses a response into an Incoming message head.",null,{"i":[{"n":"bufreader"}],"o":{"g":["incoming"],"n":"result"}}],[17,"CR","","The `\\r` byte.",null,null],[17,"LF","","The `\\n` byte.",null,null],[17,"LINE_ENDING","","The bytes `\\r\\n`.",null,null],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write","","",102,null],[11,"flush","","",102,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read","","",102,null],[11,"set_outgoing","","",102,{"i":[{"n":"self"},{"n":"requesthead"}],"o":{"g":["requesthead"],"n":"result"}}],[11,"get_incoming","","",102,{"i":[{"n":"self"}],"o":{"g":["responsehead"],"n":"result"}}],[11,"has_body","","",102,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_read_timeout","","",102,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"set_write_timeout","","",102,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"close_connection","","",102,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"set_proxied","","",102,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",102,{"i":[{"n":"self"}],"o":{"g":["networkstream"],"n":"box"}}],[11,"get_ref","","Gets a borrowed reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",102,{"i":[{"n":"self"}],"o":{"n":"networkstream"}}],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",102,{"i":[{"n":"self"}],"o":{"n":"networkstream"}}],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to the peer.",102,{"i":[{"g":["networkstream"],"n":"box"}],"o":{"n":"http11message"}}],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",102,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new_message","","",103,{"i":[{"n":"self"},{"n":"str"},{"n":"u16"},{"n":"str"}],"o":{"g":["box"],"n":"result"}}],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for establishing HTTP connections.",103,{"i":[{"n":"c"}],"o":{"n":"http11protocol"}}],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",100,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",100,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",100,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"read","","",100,null],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",101,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_ref","","Access the inner Writer.",101,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Access the inner Writer mutably.",101,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",101,{"i":[{"n":"self"}],"o":{"g":["enderror"],"n":"result"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write","","",101,null],[11,"flush","","",101,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"message","hyper::http","Defines the `HttpMessage` trait that serves to encapsulate the operations of a single request-response cycle on any HTTP connection.",null,null],[3,"RequestHead","hyper::http::message","Describes a request.",null,null],[12,"headers","","The headers of the request",105,null],[12,"method","","The method of the request",105,null],[12,"url","","The URL of the request",105,null],[3,"ResponseHead","","Describes a response.",null,null],[12,"headers","","The headers of the reponse",106,null],[12,"raw_status","","The raw status line of the response",106,null],[12,"version","","The HTTP/2 version which generated the response",106,null],[8,"Protocol","","The trait provides an API for creating new `HttpMessage`s depending on the underlying HTTP protocol.",null,null],[10,"new_message","","Creates a fresh `HttpMessage` bound to the given host, based on the given protocol scheme.",107,{"i":[{"n":"self"},{"n":"str"},{"n":"u16"},{"n":"str"}],"o":{"g":["box"],"n":"result"}}],[8,"HttpMessage","","The trait provides an API for sending an receiving HTTP messages.",null,null],[10,"set_outgoing","","Initiates a new outgoing request.",108,{"i":[{"n":"self"},{"n":"requesthead"}],"o":{"g":["requesthead"],"n":"result"}}],[10,"get_incoming","","Obtains the incoming response and returns its head (i.e. the `ResponseHead` struct)",108,{"i":[{"n":"self"}],"o":{"g":["responsehead"],"n":"result"}}],[10,"set_read_timeout","","Set the read timeout duration for this message.",108,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"set_write_timeout","","Set the write timeout duration for this message.",108,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"close_connection","","Closes the underlying HTTP connection.",108,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"has_body","","Returns whether the incoming message has a body.",108,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_proxied","","Called when the Client wishes to use a Proxy.",108,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"requesthead"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"responsehead"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is","","Is the underlying type in this trait object a T?",108,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",108,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained data.",108,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",108,{"i":[{"g":["httpmessage"],"n":"box"}],"o":{"g":["box","box"],"n":"result"}}],[11,"clone","hyper::http","",98,{"i":[{"n":"self"}],"o":{"n":"rawstatus"}}],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"rawstatus"}],"o":{"n":"bool"}}],[11,"ne","","",98,{"i":[{"n":"self"},{"n":"rawstatus"}],"o":{"n":"bool"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams.",null,null],[3,"NetworkConnections","hyper::net","An iterator wrapper over a `NetworkAcceptor`.",null,null],[3,"HttpListener","","A `NetworkListener` for `HttpStream`s.",null,null],[3,"HttpStream","","A wrapper around a `TcpStream`.",null,null],[12,"0","","",109,null],[3,"HttpConnector","","A connector that will produce HttpStreams.",null,null],[3,"HttpsListener","","A Http Listener over SSL.",null,null],[3,"HttpsConnector","","A connector that can protect HTTP streams using SSL.",null,null],[4,"Fresh","","The write-status indicating headers have not been written.",null,null],[4,"Streaming","","The write-status indicating headers have been written.",null,null],[4,"HttpsStream","","A stream over the HTTP protocol, possibly protected by SSL.",null,null],[13,"Http","","A plain text stream.",110,null],[13,"Https","","A stream protected by SSL.",110,null],[8,"NetworkListener","","An abstraction to listen for connections on a certain port.",null,null],[16,"Stream","","The stream produced for each connection.",111,null],[10,"accept","","Returns an iterator of streams.",111,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"local_addr","","Get the address this Listener ended up listening on.",111,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"incoming","","Returns an iterator over incoming connections.",111,{"i":[{"n":"self"}],"o":{"n":"networkconnections"}}],[11,"set_read_timeout","","Sets the read timeout for all streams that are accepted",111,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[11,"set_write_timeout","","Sets the write timeout for all streams that are accepted",111,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[8,"NetworkStream","","An abstraction over streams that a `Server` can utilize.",null,null],[10,"peer_addr","","Get the remote address of the underlying connection.",112,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[10,"set_read_timeout","","Set the maximum time to wait for a read to complete.",112,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"set_write_timeout","","Set the maximum time to wait for a write to complete.",112,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"close","","This will be called when Stream should no longer be kept alive.",112,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"result"}}],[8,"NetworkConnector","","A connector creates a NetworkStream.",null,null],[16,"Stream","","Type of `Stream` to create",113,null],[10,"connect","","Connect to a remote address.",113,{"i":[{"n":"self"},{"n":"str"},{"n":"u16"},{"n":"str"}],"o":{"n":"result"}}],[8,"SslClient","","An abstraction to allow any SSL implementation to be used with client-side HttpsStreams.",null,null],[16,"Stream","","The protected stream.",114,null],[10,"wrap_client","","Wrap a client stream with SSL.",114,{"i":[{"n":"self"},{"n":"t"},{"n":"str"}],"o":{"n":"result"}}],[8,"SslServer","","An abstraction to allow any SSL implementation to be used with server-side HttpsStreams.",null,null],[16,"Stream","","The protected stream.",115,null],[10,"wrap_server","","Wrap a server stream with SSL.",115,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"next","","",116,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"is","","Is the underlying type in this trait object a `T`?",112,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",112,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",112,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast","","If the underlying type is `T`, extract it.",112,{"i":[{"g":["networkstream"],"n":"box"}],"o":{"g":["box","box"],"n":"result"}}],[11,"is","","Is the underlying type in this trait object a `T`?",112,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",112,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",112,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast","","If the underlying type is `T`, extract it.",112,{"i":[{"g":["networkstream"],"n":"box"}],"o":{"g":["box","box"],"n":"result"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"httplistener"}}],[11,"from","","",117,{"i":[{"n":"tcplistener"}],"o":{"n":"httplistener"}}],[11,"new","","Start listening to an address over HTTP.",117,{"i":[{"n":"to"}],"o":{"g":["httplistener"],"n":"result"}}],[11,"accept","","",117,{"i":[{"n":"self"}],"o":{"g":["httpstream"],"n":"result"}}],[11,"local_addr","","",117,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"set_read_timeout","","",117,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[11,"set_write_timeout","","",117,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[11,"as_raw_fd","","",117,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",117,{"i":[{"n":"rawfd"}],"o":{"n":"httplistener"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"httpstream"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"read","","",109,null],[11,"write","","",109,null],[11,"flush","","",109,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"as_raw_fd","","",109,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",109,{"i":[{"n":"rawfd"}],"o":{"n":"httpstream"}}],[11,"peer_addr","","",109,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"set_read_timeout","","",109,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"set_write_timeout","","",109,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"close","","",109,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"httpconnector"}}],[11,"default","","",118,{"o":{"n":"httpconnector"}}],[11,"connect","","",118,{"i":[{"n":"self"},{"n":"str"},{"n":"u16"},{"n":"str"}],"o":{"g":["httpstream"],"n":"result"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"httpsstream"}}],[11,"read","","",110,null],[11,"write","","",110,null],[11,"flush","","",110,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"peer_addr","","",110,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"set_read_timeout","","",110,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"set_write_timeout","","",110,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"close","","",110,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"result"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"httpslistener"}}],[11,"new","","Start listening to an address over HTTPS.",119,{"i":[{"n":"to"},{"n":"s"}],"o":{"g":["httpslistener"],"n":"result"}}],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",119,{"i":[{"n":"httplistener"},{"n":"s"}],"o":{"n":"httpslistener"}}],[11,"accept","","",119,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"local_addr","","",119,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"set_read_timeout","","",119,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[11,"set_write_timeout","","",119,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",120,{"o":{"n":"httpsconnector"}}],[11,"new","","Create a new connector using the provided SSL implementation.",120,{"i":[{"n":"s"}],"o":{"g":["httpconnector"],"n":"httpsconnector"}}],[11,"with_connector","","Create a new connector using the provided SSL implementation.",120,{"i":[{"n":"s"},{"n":"c"}],"o":{"n":"httpsconnector"}}],[11,"connect","","",120,{"i":[{"n":"self"},{"n":"str"},{"n":"u16"},{"n":"str"}],"o":{"n":"result"}}],[0,"server","hyper","HTTP Server",null,null],[3,"Server","hyper::server","A server can listen on a TCP socket.",null,null],[3,"Listening","","A listening server, which can later be closed.",null,null],[12,"socket","","The socket addresses that the server is bound to.",121,null],[0,"request","","Server Requests",null,null],[3,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",null,null],[12,"remote_addr","","The IP address of the remote connection.",122,null],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",122,null],[12,"headers","","The headers of the incoming request.",122,null],[12,"uri","","The target request-uri for this request.",122,null],[12,"version","","The version of HTTP for this request.",122,null],[11,"new","","Create a new Request, reading the StartLine and Headers so they are immediately useful.",122,{"i":[{"n":"bufreader"},{"n":"socketaddr"}],"o":{"g":["request"],"n":"result"}}],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",122,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",122,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected over HTTPS.",122,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",122,null],[11,"read","","",122,null],[0,"response","hyper::server","Server Responses",null,null],[3,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",null,null],[12,"version","","The HTTP version of this response.",123,null],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"status","","The status of this response.",123,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"headers","","The headers of this response.",123,{"i":[{"n":"self"}],"o":{"n":"headers"}}],[11,"construct","","Construct a Response from its constituent parts.",123,{"i":[{"n":"httpversion"},{"g":["write"],"n":"httpwriter"},{"n":"statuscode"},{"n":"headers"}],"o":{"g":["fresh"],"n":"response"}}],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",123,null],[11,"new","","Creates a new Response that can be used to write to a network stream.",123,{"i":[{"n":"write"},{"n":"headers"}],"o":{"g":["fresh"],"n":"response"}}],[11,"send","","Writes the body and ends the response.",123,null],[11,"start","","Consume this Response, writing the Headers and Status and creating a Response",123,{"i":[{"n":"self"}],"o":{"g":["response"],"n":"result"}}],[11,"status_mut","","Get a mutable reference to the status.",123,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"headers_mut","","Get a mutable reference to the Headers.",123,{"i":[{"n":"self"}],"o":{"n":"headers"}}],[11,"end","","Flushes all writing of a response to the client.",123,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"write","","",123,null],[11,"flush","","",123,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"drop","","",123,{"i":[{"n":"self"}]}],[8,"Handler","hyper::server","A handler that can handle incoming requests for a server.",null,null],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",124,{"i":[{"n":"self"},{"n":"request"},{"g":["fresh"],"n":"response"}]}],[11,"check_continue","","Called when a Request includes a `Expect: 100-continue` header.",124,null],[11,"on_connection_start","","This is run after a connection is received, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",124,{"i":[{"n":"self"}]}],[11,"on_connection_end","","This is run before a connection is closed, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",124,{"i":[{"n":"self"}]}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new server with the provided handler.",125,{"i":[{"n":"l"}],"o":{"n":"server"}}],[11,"keep_alive","","Controls keep-alive for this server.",125,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",125,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",125,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}]}],[11,"local_addr","","Get the address that the server is listening on.",125,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"http","","Creates a new server that will handle `HttpStream`s.",125,{"i":[{"n":"to"}],"o":{"g":["server"],"n":"result"}}],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",125,{"i":[{"n":"a"},{"n":"s"}],"o":{"g":["server"],"n":"result"}}],[11,"handle","","Binds to a socket and starts handling connections.",125,{"i":[{"n":"self"},{"n":"h"}],"o":{"g":["listening"],"n":"result"}}],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided number of threads.",125,{"i":[{"n":"self"},{"n":"h"},{"n":"usize"}],"o":{"g":["listening"],"n":"result"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",121,{"i":[{"n":"self"}]}],[11,"close","","Warning: This function doesn't work. The server remains listening after you called it. See https://github.com/hyperium/hyper/issues/338 for more details.",121,{"i":[{"n":"self"}],"o":{"n":"result"}}],[0,"status","hyper","HTTP status codes",null,null],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",126,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",126,null],[13,"Processing","","102 Processing [RFC2518]",126,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",126,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",126,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",126,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",126,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",126,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",126,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",126,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",126,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",126,null],[13,"ImUsed","","226 IM Used [RFC3229]",126,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",126,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",126,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",126,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",126,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",126,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",126,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",126,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",126,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",126,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",126,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",126,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",126,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",126,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",126,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",126,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",126,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",126,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",126,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",126,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",126,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",126,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",126,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",126,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",126,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",126,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",126,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",126,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",126,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",126,null],[13,"Locked","","423 Locked [RFC4918]",126,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",126,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",126,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",126,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",126,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",126,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",126,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",126,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",126,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",126,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",126,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",126,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",126,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",126,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",126,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",126,null],[13,"NotExtended","","510 Not Extended [RFC2774]",126,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",126,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",126,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",127,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",127,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",127,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",127,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",127,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",127,null],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",126,null],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",126,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",126,{"i":[{"n":"self"}],"o":{"n":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",126,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_success","","Check if class is Success.",126,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",126,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",126,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",126,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",126,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",126,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"partial_cmp","","",126,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",126,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"ordering"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"statusclass"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"statusclass"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",127,{"i":[{"n":"self"},{"n":"statusclass"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",127,{"i":[{"n":"self"},{"n":"statusclass"}],"o":{"n":"ordering"}}],[11,"default_code","","Get the default status code for the class.",127,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[0,"uri","hyper","HTTP RequestUris",null,null],[4,"RequestUri","hyper::uri","The Request-URI of a Request's StartLine.",null,null],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",128,null],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",128,null],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",128,null],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",128,null],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"requesturi"}],"o":{"n":"bool"}}],[11,"ne","","",128,{"i":[{"n":"self"},{"n":"requesturi"}],"o":{"n":"bool"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"requesturi"}}],[11,"from_str","","",128,{"i":[{"n":"str"}],"o":{"g":["requesturi","error"],"n":"result"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"version","hyper","HTTP Versions enum",null,null],[4,"HttpVersion","hyper::version","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",129,null],[13,"Http10","","`HTTP/1.0`",129,null],[13,"Http11","","`HTTP/1.1`",129,null],[13,"Http20","","`HTTP/2.0`",129,null],[11,"eq","","",129,{"i":[{"n":"self"},{"n":"httpversion"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",129,{"i":[{"n":"self"},{"n":"httpversion"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"httpversion"}}],[11,"cmp","","",129,{"i":[{"n":"self"},{"n":"httpversion"}],"o":{"n":"ordering"}}],[11,"hash","","",129,null],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",129,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_str","","",129,{"i":[{"n":"str"}],"o":{"n":"result"}}],[0,"mime","hyper","Re-exporting the mime crate, for convenience.",null,null],[3,"Mime","hyper::mime","Mime, or Media Type. Encapsulates common registers types.",null,null],[12,"0","","",130,null],[12,"1","","",130,null],[12,"2","","",130,null],[4,"TopLevel","","",null,null],[13,"Star","","",131,null],[13,"Text","","",131,null],[13,"Image","","",131,null],[13,"Audio","","",131,null],[13,"Video","","",131,null],[13,"Application","","",131,null],[13,"Multipart","","",131,null],[13,"Message","","",131,null],[13,"Model","","",131,null],[13,"Ext","","",131,null],[4,"SubLevel","","",null,null],[13,"Star","","",132,null],[13,"Plain","","",132,null],[13,"Html","","",132,null],[13,"Xml","","",132,null],[13,"Javascript","","",132,null],[13,"Css","","",132,null],[13,"EventStream","","",132,null],[13,"Json","","",132,null],[13,"WwwFormUrlEncoded","","",132,null],[13,"Msgpack","","",132,null],[13,"OctetStream","","",132,null],[13,"FormData","","",132,null],[13,"Png","","",132,null],[13,"Gif","","",132,null],[13,"Bmp","","",132,null],[13,"Jpeg","","",132,null],[13,"Mpeg","","",132,null],[13,"Mp4","","",132,null],[13,"Ogg","","",132,null],[13,"Ext","","",132,null],[4,"Attr","","",null,null],[13,"Charset","","",133,null],[13,"Boundary","","",133,null],[13,"Q","","",133,null],[13,"Ext","","",133,null],[4,"Value","","",null,null],[13,"Utf8","","",134,null],[13,"Ext","","",134,null],[6,"Param","","",null,null],[14,"mime","","Easily create a Mime without having to import so many enums.",null,null],[14,"header","hyper","",null,null],[11,"parse","","Parse an absolute URL from a string.",11,{"i":[{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",11,{"i":[{"n":"str"},{"n":"i"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",11,{"o":{"n":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_string","","Return the serialization of this URL.",11,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",11,{"i":[{"n":"self"}],"o":{"n":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",11,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",11,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",11,{"i":[{"n":"self"}],"o":{"g":["host"],"n":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",11,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"port","","Return the port number for this URL, if any.",11,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",11,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",11,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["hostandport","error"],"n":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",11,{"i":[{"n":"self"}],"o":{"g":["split"],"n":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",11,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",11,{"i":[{"n":"self"}],"o":{"n":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",11,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",11,null],[11,"set_query","","Change this URL’s query string.",11,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",11,{"i":[{"n":"self"}],"o":{"g":["urlquery"],"n":"serializer"}}],[11,"set_path","","Change this URL’s path.",11,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",11,{"i":[{"n":"self"}],"o":{"g":["pathsegmentsmut"],"n":"result"}}],[11,"set_port","","Change this URL’s port number.",11,{"i":[{"n":"self"},{"g":["u16"],"n":"option"}],"o":{"n":"result"}}],[11,"set_host","","Change this URL’s host.",11,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",11,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"result"}}],[11,"set_password","","Change this URL’s password.",11,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"n":"result"}}],[11,"set_username","","Change this URL’s username.",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",11,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",11,{"i":[{"n":"p"}],"o":{"g":["url"],"n":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",11,{"i":[{"n":"p"}],"o":{"g":["url"],"n":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",11,{"i":[{"n":"self"}],"o":{"g":["pathbuf"],"n":"result"}}],[11,"as_ref","","",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","hyper::error","",13,{"i":[{"n":"errors"}],"o":{"n":"parseerror"}}],[11,"fmt","hyper","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","hyper::error","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","hyper","",11,{"i":[{"n":"self"},{"n":"url"}],"o":{"n":"bool"}}],[11,"eq","hyper::error","",13,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"to_socket_addrs","hyper","",11,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","hyper::error","",13,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"clone","hyper","",11,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"url"}],"o":{"g":["ordering"],"n":"option"}}],[11,"description","hyper::error","",13,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_str","hyper","",11,{"i":[{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"index","","",11,{"i":[{"n":"self"},{"g":["position"],"n":"rangefrom"}],"o":{"n":"str"}}],[11,"index","","",11,{"i":[{"n":"self"},{"g":["position"],"n":"rangeto"}],"o":{"n":"str"}}],[11,"index","","",11,{"i":[{"n":"self"},{"g":["position"],"n":"range"}],"o":{"n":"str"}}],[11,"index","","",11,{"i":[{"n":"self"},{"n":"rangefull"}],"o":{"n":"str"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"url"}],"o":{"n":"ordering"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","hyper::error","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","hyper","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"languagetag"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"languagetag"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["languagetag","error"],"n":"result"}}],[11,"default","","",0,{"o":{"n":"languagetag"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","hyper::mime","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"attr"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"toplevel"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"sublevel"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"mime"}}],[11,"partial_cmp","","",133,{"i":[{"n":"self"},{"n":"attr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",133,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"le","","",133,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"gt","","",133,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"ge","","",133,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",131,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",131,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"le","","",131,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"gt","","",131,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"ge","","",131,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",134,{"i":[{"n":"self"},{"n":"value"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",134,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"le","","",134,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"gt","","",134,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"ge","","",134,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",132,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",132,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"le","","",132,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"gt","","",132,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"ge","","",132,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",130,{"i":[{"n":"self"},{"n":"mime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",130,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"le","","",130,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"gt","","",130,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"ge","","",130,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"from_str","","",134,{"i":[{"n":"str"}],"o":{"g":["value"],"n":"result"}}],[11,"from_str","","",132,{"i":[{"n":"str"}],"o":{"g":["sublevel"],"n":"result"}}],[11,"from_str","","",133,{"i":[{"n":"str"}],"o":{"g":["attr"],"n":"result"}}],[11,"from_str","","",130,{"i":[{"n":"str"}],"o":{"g":["mime"],"n":"result"}}],[11,"from_str","","",131,{"i":[{"n":"str"}],"o":{"g":["toplevel"],"n":"result"}}],[11,"cmp","","",131,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"ordering"}}],[11,"cmp","","",132,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"ordering"}}],[11,"cmp","","",134,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"ordering"}}],[11,"cmp","","",130,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"ordering"}}],[11,"cmp","","",133,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"ordering"}}],[11,"hash","","",133,null],[11,"hash","","",132,null],[11,"hash","","",131,null],[11,"hash","","",130,null],[11,"hash","","",134,null],[11,"deref","","",132,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",131,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",134,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",133,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"matches","hyper","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"i":[{"n":"self"},{"n":"languagetag"}],"o":{"n":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"i":[{"n":"self"}],"o":{"n":"languagetag"}}],[11,"get_param","hyper::mime","",130,{"i":[{"n":"self"},{"n":"a"}],"o":{"g":["value"],"n":"option"}}],[11,"as_str","","",131,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_str","","",132,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_str","","",133,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_str","","",134,{"i":[{"n":"self"}],"o":{"n":"str"}}]],"paths":[[3,"LanguageTag"],[4,"Body"],[4,"RedirectPolicy"],[3,"Config"],[3,"Pool"],[3,"PooledStream"],[3,"Request"],[3,"Response"],[8,"IntoUrl"],[3,"Client"],[3,"RequestBuilder"],[3,"Url"],[3,"ProxyConfig"],[4,"ParseError"],[4,"Error"],[4,"Method"],[3,"EntityTag"],[3,"HttpDate"],[3,"Quality"],[3,"QualityItem"],[3,"Accept"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentLength"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentRange"],[3,"ContentType"],[3,"Cookie"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"Host"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Origin"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"Protocol"],[3,"UserAgent"],[3,"HeaderFormatter"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[4,"ProtocolName"],[4,"Vary"],[4,"RelationType"],[4,"MediaDesc"],[3,"AccessControlAllowCredentials"],[3,"Link"],[3,"LinkValue"],[3,"ExtendedValue"],[3,"HTTP_VALUE"],[8,"Scheme"],[8,"Header"],[8,"HeaderFormat"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"RawStatus"],[3,"Incoming"],[4,"HttpReader"],[4,"HttpWriter"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"EndError"],[3,"RequestHead"],[3,"ResponseHead"],[8,"Protocol"],[8,"HttpMessage"],[3,"HttpStream"],[4,"HttpsStream"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[8,"SslClient"],[8,"SslServer"],[3,"NetworkConnections"],[3,"HttpListener"],[3,"HttpConnector"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Listening"],[3,"Request"],[3,"Response"],[8,"Handler"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"],[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",null,{"i":[{"n":"str"}],"o":{"g":["string","errors"],"n":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[0,"punycode","","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"i":[{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"i":[{"n":"str"}],"o":{"g":["vec"],"n":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"i":[{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"i":[{"n":"str"},{"n":"flags"}],"o":{"g":["string","errors"],"n":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[7,"PUNYCODE_PREFIX","","",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"flags"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["inotify"] = {"doc":"Binding and wrapper for inotify.","items":[[0,"ffi","inotify","Bindings for inotify",null,null],[5,"close","inotify::ffi","",null,{"i":[{"n":"i32"}],"o":{"n":"i32"}}],[5,"read","","",null,null],[3,"inotify_event","","Describes an event.",null,null],[12,"wd","","Identifies the watch for which this event occurs.",0,null],[12,"mask","","Contains bits that describe the event that occurred.",0,null],[12,"cookie","","A unique integer that connects related events.",0,null],[12,"len","","The length of `name`.",0,null],[5,"inotify_init","","Creates an inotify instance.",null,null],[5,"inotify_init1","","Creates an inotify instance.",null,null],[5,"inotify_add_watch","","Manipulates the \"watch list\" associated with an inotify instance.",null,null],[5,"inotify_rm_watch","","Removes an item from an inotify watch list.",null,null],[17,"IN_CLOEXEC","","Flag: Set the FD_CLOEXEC flag",null,null],[17,"IN_NONBLOCK","","Flag: Set the O_NONBLOCK file status flag",null,null],[17,"IN_ACCESS","","Event: File was accessed.",null,null],[17,"IN_MODIFY","","Event: File was modified.",null,null],[17,"IN_ATTRIB","","Event: Metadata has changed.",null,null],[17,"IN_CLOSE_WRITE","","Event: File opened for writing was closed.",null,null],[17,"IN_CLOSE_NOWRITE","","Event: File not opened for writing was closed.",null,null],[17,"IN_OPEN","","Event: File was opened.",null,null],[17,"IN_MOVED_FROM","","Event: File or directory was moved away.",null,null],[17,"IN_MOVED_TO","","Event: File or directory was moved in.",null,null],[17,"IN_CREATE","","Event: File or directory was created.",null,null],[17,"IN_DELETE","","Event: File or directory was deleted.",null,null],[17,"IN_DELETE_SELF","","Event: Watched file or directory was deleted.",null,null],[17,"IN_MOVE_SELF","","Event: Watched file or directory was moved.",null,null],[17,"IN_MOVE","","Event: File or directory was moved away or in.",null,null],[17,"IN_CLOSE","","Event: File opened was closed.",null,null],[17,"IN_ALL_EVENTS","","Event: Any event occured.",null,null],[17,"IN_ONLYDIR","","Option: Don't watch children (if self is a directory).",null,null],[17,"IN_DONT_FOLLOW","","Option: Don't dereference (if self is a symlink).",null,null],[17,"IN_EXCL_UNLINK","","Option: Don't watch unlinked children.",null,null],[17,"IN_MASK_ADD","","Option: Add events to an existing watch instead of replacing it.",null,null],[17,"IN_ONESHOT","","Option: Listen for one event, then remove the watch.",null,null],[17,"IN_ISDIR","","Info: Subject of this event is a directory.",null,null],[17,"IN_UNMOUNT","","Info: Filesystem containing self was unmounted.",null,null],[17,"IN_Q_OVERFLOW","","Info: Event queue overflowed.",null,null],[17,"IN_IGNORED","","Info: Watch was removed.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"inotify_event"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"wrapper","inotify","Idiomatic wrapper for inotify",null,null],[3,"INotify","inotify::wrapper","",null,null],[12,"fd","","",1,null],[3,"Event","","",null,null],[12,"wd","","",2,null],[12,"mask","","",2,null],[12,"cookie","","",2,null],[12,"name","","",2,null],[6,"Watch","","",null,null],[11,"init","","",1,{"o":{"g":["inotify"],"n":"result"}}],[11,"init_with_flags","","",1,{"i":[{"n":"c_int"}],"o":{"g":["inotify"],"n":"result"}}],[11,"add_watch","","",1,{"i":[{"n":"self"},{"n":"path"},{"n":"u32"}],"o":{"g":["watch"],"n":"result"}}],[11,"rm_watch","","",1,{"i":[{"n":"self"},{"n":"watch"}],"o":{"n":"result"}}],[11,"wait_for_events","","Wait until events are available, then return them. This function will block until events are available. If you want it to return immediately, use `available_events`.",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"available_events","","Returns available inotify events. If no events are available, this method will simply return a slice with zero events. If you want to wait for events to become available, call `wait_for_events`.",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"close","","",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_access","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_modify","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_attrib","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_close_write","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_close_nowrite","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_open","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_moved_from","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_moved_to","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_create","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_delete","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_delete_self","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_move_self","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_move","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_close","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_dir","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unmount","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_queue_overflow","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_ignored","","",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[3,"inotify_event"],[3,"INotify"],[3,"Event"]]};
searchIndex["iovec"] = {"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",null,null],[0,"unix","","IoVec extensions for Unix platforms.",null,null],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",null,null],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",null,null],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",null,null],[11,"from_bytes","","",0,null],[11,"from_bytes_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null]],"paths":[[3,"IoVec"]]};
searchIndex["iron"] = {"doc":"The main crate for Iron.","items":[[3,"Listening","iron","A listening server, which can later be closed.",null,null],[12,"socket","","The socket addresses that the server is bound to.",0,null],[3,"TypeMap","","A map keyed by types.",null,null],[0,"headers","","Headers container, and common header fields.",null,null],[0,"parsing","iron::headers","Utility functions for Header implementations.",null,null],[5,"from_one_raw_str","iron::headers::parsing","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[3,"ExtendedValue","","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",1,null],[12,"language_tag","","The human language details of the `value`, if available.",1,null],[12,"value","","The parameter value, as expressed in octets.",1,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"i":[{"n":"str"}],"o":{"g":["extendedvalue","error"],"n":"result"}}],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",null,null],[8,"Header","iron::headers","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",2,{"o":{"n":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",2,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[8,"HeaderClone","","Internal implementation detail.",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",null,null],[12,"0","","",4,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",5,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",6,null],[12,"range","iron::headers::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",6,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",6,null],[13,"Unregistered","iron::headers","Custom range, with unit not registered at IANA",6,null],[12,"unit","iron::headers::ContentRangeSpec","other-range-unit",6,null],[12,"resp","","other-range-resp",6,null],[3,"Authorization","iron::headers","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",7,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",8,null],[13,"ReturnRepresentation","","\"return=representation\"",8,null],[13,"ReturnMinimal","","\"return=minimal\"",8,null],[13,"HandlingStrict","","\"handling=strict\"",8,null],[13,"HandlingLeniant","","\"handling=leniant\"",8,null],[13,"Wait","","\"wait=delta\"",8,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",8,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",9,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",10,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[12,"0","","",11,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",12,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",13,null],[13,"Close","","The `close` connection value.",13,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",13,null],[3,"Origin","","The `Origin` header.",null,null],[12,"scheme","","The scheme, such as http or https",14,null],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",14,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",15,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",16,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[12,"0","","",17,null],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"i":[{"n":"f32"}],"o":{"n":"quality"}}],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",18,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",19,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",20,null],[4,"MediaDesc","","A Media Descriptors Enum based on: https://www.w3.org/TR/html401/types.html#h-6.13",null,null],[13,"Screen","","screen.",21,null],[13,"Tty","","tty.",21,null],[13,"Tv","","tv.",21,null],[13,"Projection","","projection.",21,null],[13,"Handheld","","handheld.",21,null],[13,"Print","","print.",21,null],[13,"Braille","","braille.",21,null],[13,"Aural","","aural.",21,null],[13,"All","","all.",21,null],[13,"Extension","","Unrecognized media descriptor extension.",21,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",22,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",23,null],[13,"Date","","The date when the client retrieved the resource",23,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",24,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",24,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",24,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",25,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",26,null],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",null,null],[13,"Alternate","","alternate.",27,null],[13,"Appendix","","appendix.",27,null],[13,"Bookmark","","bookmark.",27,null],[13,"Chapter","","chapter.",27,null],[13,"Contents","","contents.",27,null],[13,"Copyright","","copyright.",27,null],[13,"Current","","current.",27,null],[13,"DescribedBy","","describedby.",27,null],[13,"Edit","","edit.",27,null],[13,"EditMedia","","edit-media.",27,null],[13,"Enclosure","","enclosure.",27,null],[13,"First","","first.",27,null],[13,"Glossary","","glossary.",27,null],[13,"Help","","help.",27,null],[13,"Hub","","hub.",27,null],[13,"Index","","index.",27,null],[13,"Last","","last.",27,null],[13,"LatestVersion","","latest-version.",27,null],[13,"License","","license.",27,null],[13,"Next","","next.",27,null],[13,"NextArchive","","next-archive.",27,null],[13,"Payment","","payment.",27,null],[13,"Prev","","prev.",27,null],[13,"PredecessorVersion","","predecessor-version.",27,null],[13,"Previous","","previous.",27,null],[13,"PrevArchive","","prev-archive.",27,null],[13,"Related","","related.",27,null],[13,"Replies","","replies.",27,null],[13,"Section","","section.",27,null],[13,"RelationTypeSelf","","self.",27,null],[13,"Service","","service.",27,null],[13,"Start","","start.",27,null],[13,"Stylesheet","","stylesheet.",27,null],[13,"Subsection","","subsection.",27,null],[13,"SuccessorVersion","","successor-version.",27,null],[13,"Up","","up.",27,null],[13,"VersionHistory","","versionHistory.",27,null],[13,"Via","","via.",27,null],[13,"WorkingCopy","","working-copy.",27,null],[13,"WorkingCopyOf","","working-copy-of.",27,null],[13,"ExtRelType","","ext-rel-type.",27,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",28,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",28,null],[13,"Last","","Get last x bytes (\"-x\")",28,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",29,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",29,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",30,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[12,"0","","",31,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[12,"0","","",32,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",33,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",34,null],[13,"Ext","","Every value other than `no-cache`.",34,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",35,null],[13,"NoStore","","\"no-store\"",35,null],[13,"NoTransform","","\"no-transform\"",35,null],[13,"OnlyIfCached","","\"only-if-cached\"",35,null],[13,"MaxAge","","\"max-age=delta\"",35,null],[13,"MaxStale","","\"max-stale=delta\"",35,null],[13,"MinFresh","","\"min-fresh=delta\"",35,null],[13,"MustRevalidate","","\"must-revalidate\"",35,null],[13,"Public","","\"public\"",35,null],[13,"Private","","\"private\"",35,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",35,null],[13,"SMaxAge","","\"s-maxage=delta\"",35,null],[13,"Extension","","Extension directives. Optionally include an argument.",35,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"i":[{"n":"t"}],"o":{"n":"qualityitem"}}],[3,"Server","","`Server` header, defined in RFC7231",null,null],[12,"0","","",36,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",37,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",38,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",39,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",39,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",39,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",39,null],[13,"Unregistered","","Any other protocol name not known to hyper",39,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",40,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",40,null],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",null,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",41,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",41,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",42,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",43,null],[13,"Iso_8859_1","","ISO-8859-1",43,null],[13,"Iso_8859_2","","ISO-8859-2",43,null],[13,"Iso_8859_3","","ISO-8859-3",43,null],[13,"Iso_8859_4","","ISO-8859-4",43,null],[13,"Iso_8859_5","","ISO-8859-5",43,null],[13,"Iso_8859_6","","ISO-8859-6",43,null],[13,"Iso_8859_7","","ISO-8859-7",43,null],[13,"Iso_8859_8","","ISO-8859-8",43,null],[13,"Iso_8859_9","","ISO-8859-9",43,null],[13,"Iso_8859_10","","ISO-8859-10",43,null],[13,"Shift_Jis","","Shift_JIS",43,null],[13,"Euc_Jp","","EUC-JP",43,null],[13,"Iso_2022_Kr","","ISO-2022-KR",43,null],[13,"Euc_Kr","","EUC-KR",43,null],[13,"Iso_2022_Jp","","ISO-2022-JP",43,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",43,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",43,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",43,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",43,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",43,null],[13,"Gb2312","","GB2312",43,null],[13,"Big5","","Big5",43,null],[13,"Koi8_R","","KOI8-R",43,null],[13,"Ext","","An arbitrary charset specified as a string",43,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",44,null],[12,"quality","","The quality (client or server preference) for the value.",44,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",45,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",46,null],[13,"Null","","A hidden origin",46,null],[13,"Value","","Allow one particular origin",46,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",47,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",47,null],[13,"Unregistered","","The given range unit is not registered at IANA.",47,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",48,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",49,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",50,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",50,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[12,"0","","",51,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",52,null],[8,"Scheme","","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",53,{"o":{"g":["str"],"n":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",54,null],[13,"Items","","Only the listed items are a match",54,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",55,null],[12,"port","","An optional port number.",55,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",56,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",57,null],[3,"Link","","The `Link` header, defined in RFC5988",null,null],[4,"Expect","","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",58,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",59,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",60,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[12,"0","","",61,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",62,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",63,null],[13,"Items","","Only the listed items are a match",63,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",64,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",65,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",65,null],[13,"SameOrigin","","`same-origin`",65,null],[13,"Origin","","`origin`",65,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",65,null],[13,"UnsafeUrl","","`unsafe-url`",65,null],[13,"StrictOrigin","","`strict-origin`",65,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",65,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",null,null],[12,"disposition","","The disposition",66,null],[12,"parameters","","Disposition parameters",66,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",67,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",68,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",68,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",69,null],[3,"EntityTag","","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",70,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",71,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",72,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",73,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",74,null],[13,"Items","","Only the listed items are a match",74,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",75,null],[13,"Gzip","","The `gzip` encoding.",75,null],[13,"Deflate","","The `deflate` encoding.",75,null],[13,"Compress","","The `compress` encoding.",75,null],[13,"Identity","","The `identity` encoding.",75,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",75,null],[3,"Headers","iron","A map of header fields on requests and responses.",null,null],[8,"Plugin","","An interface for plugins that cache values between calls.",null,null],[11,"get","","Return a copy of the plugin's produced value.",76,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"get_ref","","Return a reference to the plugin's produced value.",76,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"get_mut","","Return a mutable reference to the plugin's produced value.",76,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"compute","","Create and evaluate a once-off instance of a plugin.",76,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"Set","","A trait providing the set and set_mut methods for all types.",null,null],[11,"set","","Modify self using the provided modifier.",77,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"self"}}],[11,"set_mut","","Modify self through a mutable reference with the provided modifier.",77,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"self"}}],[8,"Error","","An extension to std::error::Error which provides dynamic downcasting of errors for use in highly generic contexts.",null,null],[0,"mime","","Re-exporting the mime crate, for convenience.",null,null],[4,"TopLevel","iron::mime","",null,null],[13,"Star","","",78,null],[13,"Text","","",78,null],[13,"Image","","",78,null],[13,"Audio","","",78,null],[13,"Video","","",78,null],[13,"Application","","",78,null],[13,"Multipart","","",78,null],[13,"Message","","",78,null],[13,"Model","","",78,null],[13,"Ext","","",78,null],[4,"Value","","",null,null],[13,"Utf8","","",79,null],[13,"Ext","","",79,null],[4,"Attr","","",null,null],[13,"Charset","","",80,null],[13,"Boundary","","",80,null],[13,"Q","","",80,null],[13,"Ext","","",80,null],[6,"Param","","",null,null],[4,"SubLevel","","",null,null],[13,"Star","","",81,null],[13,"Plain","","",81,null],[13,"Html","","",81,null],[13,"Xml","","",81,null],[13,"Javascript","","",81,null],[13,"Css","","",81,null],[13,"EventStream","","",81,null],[13,"Json","","",81,null],[13,"WwwFormUrlEncoded","","",81,null],[13,"Msgpack","","",81,null],[13,"OctetStream","","",81,null],[13,"FormData","","",81,null],[13,"Png","","",81,null],[13,"Gif","","",81,null],[13,"Bmp","","",81,null],[13,"Jpeg","","",81,null],[13,"Mpeg","","",81,null],[13,"Mp4","","",81,null],[13,"Ogg","","",81,null],[13,"Ext","","",81,null],[3,"Mime","","Mime, or Media Type. Encapsulates common registers types.",null,null],[12,"0","","",82,null],[12,"1","","",82,null],[12,"2","","",82,null],[3,"Url","iron","HTTP/HTTPS URL type for Iron.",null,null],[3,"Iron","","The primary entrance point to `Iron`, a `struct` to instantiate a new server.",null,null],[12,"handler","","Iron contains a `Handler`, which it uses to create responses for client requests.",83,null],[12,"timeouts","","Server timeouts.",83,null],[12,"threads","","The number of request handling threads.",83,null],[3,"Timeouts","","A settings struct containing a set of timeouts which can be applied to a server.",null,null],[12,"keep_alive","","Controls the timeout for keep alive connections.",84,null],[12,"read","","Controls the timeout for reads on existing connections.",84,null],[12,"write","","Controls the timeout for writes on existing connections.",84,null],[3,"Protocol","","Protocol used to serve content.",null,null],[0,"error","","Iron's error type and associated utilities.",null,null],[8,"Error","iron::error","An extension to std::error::Error which provides dynamic downcasting of errors for use in highly generic contexts.",null,null],[4,"HttpError","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",85,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",85,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",85,null],[13,"Header","","An invalid `Header`.",85,null],[13,"TooLarge","","A message head is too large to be reasonable.",85,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",85,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",85,null],[13,"Ssl","","An error from a SSL library.",85,null],[13,"Utf8","","Parsing a field as string failed",85,null],[6,"HttpResult","","Result type often returned from methods that can have hyper `Error`s.",null,null],[3,"IronError","","The type of Errors inside and when using Iron.",null,null],[12,"error","","The underlying error",86,null],[12,"response","","What to do about this error.",86,null],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new IronError from an error and a modifier.",86,{"i":[{"n":"e"},{"n":"m"}],"o":{"n":"ironerror"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",86,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",86,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"option"}}],[0,"prelude","iron","A module meant to be glob imported when using Iron.",null,null],[0,"typemap","","Re-exports from the TypeMap crate.",null,null],[3,"TypeMap","iron::typemap","A map keyed by types.",null,null],[8,"Key","","This trait defines the relationship between keys and values in a TypeMap.",null,null],[16,"Value","","The value type associated with this key type.",87,null],[0,"modifier","iron","Re-exports from the Modifier crate.",null,null],[8,"Modifier","iron::modifier","Allows use of the implemented type as an argument to Set::set.",null,null],[10,"modify","","Modify `F` with self.",88,null],[8,"Set","","A trait providing the set and set_mut methods for all types.",null,null],[11,"set","","Modify self using the provided modifier.",77,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"self"}}],[11,"set_mut","","Modify self through a mutable reference with the provided modifier.",77,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"self"}}],[0,"url","iron","Re-exports from the url crate.",null,null],[0,"form_urlencoded","iron::url","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[5,"parse","iron::url::form_urlencoded","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[3,"Parse","","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",89,{"i":[{"n":"self"}],"o":{"n":"string"}}],[10,"finish","","",89,null],[16,"Finished","","",89,null],[3,"Url","iron::url","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"OpaqueOrigin","","Opaque identifier for URLs that have file or other schemes",null,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",90,null],[13,"AfterScheme","","",90,null],[13,"BeforeUsername","","",90,null],[13,"AfterUsername","","",90,null],[13,"BeforePassword","","",90,null],[13,"AfterPassword","","",90,null],[13,"BeforeHost","","",90,null],[13,"AfterHost","","",90,null],[13,"BeforePort","","",90,null],[13,"AfterPort","","",90,null],[13,"BeforePath","","",90,null],[13,"AfterPath","","",90,null],[13,"BeforeQuery","","",90,null],[13,"AfterQuery","","",90,null],[13,"BeforeFragment","","",90,null],[13,"AfterFragment","","",90,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",91,null],[13,"Tuple","","Consists of the URL's scheme, host and port",91,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[8,"EncodeSet","iron::url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",92,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[3,"SIMPLE_ENCODE_SET","","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"i":[{"n":"u8"}],"o":{"n":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"i":[{"n":"str"},{"n":"e"}],"o":{"n":"percentencode"}}],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[3,"HostAndPort","iron::url","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",93,null],[12,"port","","",93,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",94,null],[13,"IdnaError","","",94,null],[13,"InvalidPort","","",94,null],[13,"InvalidIpv4Address","","",94,null],[13,"InvalidIpv6Address","","",94,null],[13,"InvalidDomainCharacter","","",94,null],[13,"RelativeUrlWithoutBase","","",94,null],[13,"RelativeUrlWithCannotBeABaseBase","","",94,null],[13,"SetHostOnCannotBeABaseUrl","","",94,null],[13,"Overflow","","",94,null],[0,"punycode","iron::url::idna","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","iron::url::idna::punycode","Convert Punycode to an Unicode `String`.",null,{"i":[{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"i":[{"n":"str"}],"o":{"g":["vec"],"n":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"i":[{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","iron::url::idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",null,null],[7,"PUNYCODE_PREFIX","iron::url::idna::uts46","",null,null],[3,"Flags","","",null,null],[12,"use_std3_ascii_rules","","",95,null],[12,"transitional_processing","","",95,null],[12,"verify_dns_length","","",95,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"i":[{"n":"str"},{"n":"flags"}],"o":{"g":["string","errors"],"n":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[5,"domain_to_ascii","iron::url::idna","The domain to ASCII algorithm.",null,{"i":[{"n":"str"}],"o":{"g":["string","errors"],"n":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[4,"Host","iron::url","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA.",96,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",96,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",96,null],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null],[0,"status","iron","Status Codes",null,null],[4,"Status","iron::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",97,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",97,null],[13,"Processing","","102 Processing [RFC2518]",97,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",97,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",97,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",97,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",97,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",97,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",97,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",97,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",97,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",97,null],[13,"ImUsed","","226 IM Used [RFC3229]",97,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",97,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",97,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",97,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",97,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",97,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",97,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",97,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",97,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",97,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",97,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",97,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",97,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",97,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",97,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",97,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",97,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",97,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",97,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",97,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",97,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",97,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",97,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",97,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",97,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",97,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",97,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",97,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",97,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",97,null],[13,"Locked","","423 Locked [RFC4918]",97,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",97,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",97,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",97,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",97,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",97,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",97,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",97,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",97,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",97,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",97,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",97,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",97,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",97,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",97,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",97,null],[13,"NotExtended","","510 Not Extended [RFC2774]",97,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",97,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",97,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",98,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",98,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",98,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",98,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",98,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",98,null],[0,"method","iron","HTTP Methods",null,null],[4,"Method","iron::method","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",99,null],[13,"Get","","GET",99,null],[13,"Post","","POST",99,null],[13,"Put","","PUT",99,null],[13,"Delete","","DELETE",99,null],[13,"Head","","HEAD",99,null],[13,"Trace","","TRACE",99,null],[13,"Connect","","CONNECT",99,null],[13,"Patch","","PATCH",99,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",99,null],[0,"middleware","iron","Iron's Middleware and Handler System",null,null],[3,"Chain","iron::middleware","The middleware chain used in Iron.",null,null],[8,"Handler","","`Handler`s are responsible for handling requests by creating Responses from Requests.",null,null],[10,"handle","","Produce a `Response` from a Request, with the possibility of error.",100,{"i":[{"n":"self"},{"n":"request"}],"o":{"g":["response"],"n":"ironresult"}}],[8,"BeforeMiddleware","","`BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.",null,null],[11,"before","","Do whatever work this middleware should do with a `Request` object.",101,{"i":[{"n":"self"},{"n":"request"}],"o":{"n":"ironresult"}}],[11,"catch","","Respond to an error thrown by a previous `BeforeMiddleware`.",101,{"i":[{"n":"self"},{"n":"request"},{"n":"ironerror"}],"o":{"n":"ironresult"}}],[8,"AfterMiddleware","","`AfterMiddleware` are fired after a `Handler` is called inside of a Chain.",null,null],[11,"after","","Do whatever post-processing this middleware should do.",102,{"i":[{"n":"self"},{"n":"request"},{"n":"response"}],"o":{"g":["response"],"n":"ironresult"}}],[11,"catch","","Respond to an error thrown by previous `AfterMiddleware`, the `Handler`, or a `BeforeMiddleware`.",102,{"i":[{"n":"self"},{"n":"request"},{"n":"ironerror"}],"o":{"g":["response"],"n":"ironresult"}}],[8,"AroundMiddleware","","AroundMiddleware are used to wrap and replace the `Handler` in a `Chain`.",null,null],[10,"around","","Produce a `Handler` from this `AroundMiddleware` given another `Handler`.",103,{"i":[{"n":"self"},{"g":["handler"],"n":"box"}],"o":{"g":["handler"],"n":"box"}}],[11,"new","","Construct a new ChainBuilder from a `Handler`.",104,{"i":[{"n":"h"}],"o":{"n":"chain"}}],[11,"link","","Link both a before and after middleware to the chain at once.",104,null],[11,"link_before","","Link a `BeforeMiddleware` to the `Chain`, after all previously linked `BeforeMiddleware`.",104,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"chain"}}],[11,"link_after","","Link a `AfterMiddleware` to the `Chain`, after all previously linked `AfterMiddleware`.",104,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"chain"}}],[11,"around","","Apply an `AroundMiddleware` to the `Handler` in this `Chain`.",104,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"chain"}}],[11,"link_around","","Apply an `AroundMiddleware` to the `Handler` in this `Chain`.",104,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"chain"}}],[11,"handle","","",104,{"i":[{"n":"self"},{"n":"request"}],"o":{"g":["response"],"n":"ironresult"}}],[0,"response","iron","Iron's HTTP Response representation and associated methods.",null,null],[3,"HttpResponse","iron::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",null,null],[12,"version","","The HTTP version of this response.",105,null],[3,"BodyReader","","Wrapper type to set `Read`ers as response bodies",null,null],[12,"0","","",106,null],[3,"Response","","The response representation given to `Middleware`",null,null],[12,"status","","The response status-code.",107,null],[12,"headers","","The headers of the response.",107,null],[12,"extensions","","A TypeMap to be used as an extensible storage for data associated with this Response.",107,null],[12,"body","","The body of the response.",107,null],[8,"WriteBody","","A trait which writes the body of an HTTP response.",null,null],[10,"write_body","","Writes the body to the provided `Write`.",108,{"i":[{"n":"self"},{"n":"write"}],"o":{"n":"result"}}],[11,"write_body","","",106,{"i":[{"n":"self"},{"n":"write"}],"o":{"n":"result"}}],[11,"new","","Construct a blank Response",107,{"o":{"n":"response"}}],[11,"with","","Construct a Response with the specified modifier pre-applied.",107,{"i":[{"n":"m"}],"o":{"n":"response"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"extensions","","",107,{"i":[{"n":"self"}],"o":{"n":"typemap"}}],[11,"extensions_mut","","",107,{"i":[{"n":"self"}],"o":{"n":"typemap"}}],[0,"request","iron","Iron's HTTP Request representation and associated methods.",null,null],[3,"HttpRequest","iron::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",null,null],[12,"remote_addr","","The IP address of the remote connection.",109,null],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",109,null],[12,"headers","","The headers of the incoming request.",109,null],[12,"uri","","The target request-uri for this request.",109,null],[12,"version","","The version of HTTP for this request.",109,null],[3,"Url","","HTTP/HTTPS URL type for Iron.",null,null],[3,"Request","","The `Request` given to all `Middleware`.",null,null],[12,"url","","The requested URL.",110,null],[12,"remote_addr","","The originating address of the request.",110,null],[12,"local_addr","","The local address of the request.",110,null],[12,"headers","","The request headers.",110,null],[12,"body","","The request body as a reader.",110,null],[12,"method","","The request method.",110,null],[12,"extensions","","Extensible storage for data passed between middleware.",110,null],[12,"version","","The version of the HTTP protocol used.",110,null],[3,"Body","","The body of an Iron request,",null,null],[11,"eq","iron","",111,{"i":[{"n":"self"},{"n":"url"}],"o":{"n":"bool"}}],[11,"ne","","",111,{"i":[{"n":"self"},{"n":"url"}],"o":{"n":"bool"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"parse","","Create a URL from a string.",111,{"i":[{"n":"str"}],"o":{"g":["url","string"],"n":"result"}}],[11,"from_generic_url","","Create a `Url` from a `rust-url` `Url`.",111,{"i":[{"n":"url"}],"o":{"g":["url","string"],"n":"result"}}],[11,"into_generic_url","","Create a `rust-url` `Url` from a `Url`.",111,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"scheme","","The lower-cased scheme of the URL, typically \"http\" or \"https\".",111,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"host","","The host field of the URL, probably a domain.",111,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"host"}}],[11,"port","","The connection port.",111,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"path","","The URL path, the resource to be accessed.",111,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"vec"}}],[11,"username","","The URL username field, from the userinfo section of the URL.",111,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"password","","The URL password field, from the userinfo section of the URL.",111,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"query","","The URL query string.",111,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"fragment","","The URL fragment.",111,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into","","",111,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"as_ref","","",111,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"as_mut","","",111,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"fmt","iron::request","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_http","","Create a request from an HttpRequest.",110,{"i":[{"n":"httprequest"},{"n":"socketaddr"},{"n":"protocol"}],"o":{"g":["request","string"],"n":"result"}}],[11,"new","","Create a new reader for use in an Iron request from a hyper HttpReader.",112,{"i":[{"g":["bufreader"],"n":"httpreader"}],"o":{"n":"body"}}],[11,"read","","",112,null],[11,"extensions","","",110,{"i":[{"n":"self"}],"o":{"n":"typemap"}}],[11,"extensions_mut","","",110,{"i":[{"n":"self"}],"o":{"n":"typemap"}}],[0,"modifiers","iron","This module defines a series of convenience modifiers for changing Responses.",null,null],[3,"Header","iron::modifiers","A modifier for changing headers on requests and responses.",null,null],[12,"0","","",113,null],[3,"Redirect","","A modifier for creating redirect responses.",null,null],[12,"0","","",114,null],[3,"RedirectRaw","","A modifier for creating redirect responses.",null,null],[12,"0","","",115,null],[11,"modify","iron::mime","",82,{"i":[{"n":"self"},{"n":"response"}]}],[11,"modify","iron::response","",106,{"i":[{"n":"self"},{"n":"response"}]}],[11,"modify","iron::status","",97,{"i":[{"n":"self"},{"n":"response"}]}],[11,"clone","iron::modifiers","",113,{"i":[{"n":"self"}],"o":{"n":"header"}}],[11,"modify","","",113,{"i":[{"n":"self"},{"n":"response"}]}],[11,"modify","","",113,{"i":[{"n":"self"},{"n":"request"}]}],[11,"modify","","",114,{"i":[{"n":"self"},{"n":"response"}]}],[11,"modify","","",115,{"i":[{"n":"self"},{"n":"response"}]}],[11,"fmt","iron","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"timeouts"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"timeouts"}],"o":{"n":"bool"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"timeouts"}}],[11,"default","","",84,{"o":{"n":"self"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"protocol"}}],[11,"http","","Plaintext HTTP/1",116,{"o":{"n":"protocol"}}],[11,"https","","HTTP/1 over SSL/TLS",116,{"o":{"n":"protocol"}}],[11,"name","","Returns the name used for this protocol in a URI's scheme part.",116,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Instantiate a new instance of `Iron`.",83,{"i":[{"n":"h"}],"o":{"n":"iron"}}],[11,"http","","Kick off the server process using the HTTP protocol.",83,{"i":[{"n":"self"},{"n":"a"}],"o":{"g":["listening"],"n":"httpresult"}}],[11,"https","","Kick off the server process using the HTTPS protocol.",83,{"i":[{"n":"self"},{"n":"a"},{"n":"s"}],"o":{"g":["listening"],"n":"httpresult"}}],[11,"listen","","Kick off a server process on an arbitrary `Listener`.",83,{"i":[{"n":"self"},{"n":"l"},{"n":"protocol"}],"o":{"g":["listening"],"n":"httpresult"}}],[6,"IronResult","","The Result alias used throughout Iron and in clients of Iron.",null,null],[14,"itry","","Like `try!()`, but wraps the error value in `IronError`. To be used in request handlers.",null,null],[14,"iexpect","","Unwrap the given `Option` or return a `Ok(Response::new())` with the given modifier. The default modifier is `status::BadRequest`.",null,null],[11,"close","","Warning: This function doesn't work. The server remains listening after you called it. See https://github.com/hyperium/hyper/issues/338 for more details.",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"as_ref","iron::method","",99,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"scheme","iron::headers","",40,{"o":{"g":["str"],"n":"option"}}],[11,"fmt_scheme","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"scheme","","",25,{"o":{"g":["str"],"n":"option"}}],[11,"fmt_scheme","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","iron::error","",85,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"from","","",85,{"i":[{"n":"parseerror"}],"o":{"n":"error"}}],[11,"from","","",85,{"i":[{"n":"fromutf8error"}],"o":{"n":"error"}}],[11,"from","","",85,{"i":[{"n":"utf8error"}],"o":{"n":"error"}}],[11,"from","","",85,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"into_url","iron::url","",117,{"i":[{"n":"self"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"fmt","iron::headers","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::status","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::method","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers::parsing","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::error","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"write","iron::response","",105,null],[11,"flush","","",105,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","iron::headers","",66,{"i":[{"n":"self"},{"n":"contentdisposition"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"contentdisposition"}],"o":{"n":"bool"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"referrerpolicy"}],"o":{"n":"bool"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"relationtype"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"relationtype"}],"o":{"n":"bool"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"ifmodifiedsince"}],"o":{"n":"bool"}}],[11,"ne","","",33,{"i":[{"n":"self"},{"n":"ifmodifiedsince"}],"o":{"n":"bool"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"acceptcharset"}],"o":{"n":"bool"}}],[11,"ne","","",67,{"i":[{"n":"self"},{"n":"acceptcharset"}],"o":{"n":"bool"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"origin"}],"o":{"n":"bool"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"contenttype"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"contenttype"}],"o":{"n":"bool"}}],[11,"eq","iron::status","",97,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"eq","iron::headers","",55,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"ne","","",55,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"mediadesc"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"mediadesc"}],"o":{"n":"bool"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"contentrangespec"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"contentrangespec"}],"o":{"n":"bool"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"prefer"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"prefer"}],"o":{"n":"bool"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"ifmatch"}],"o":{"n":"bool"}}],[11,"ne","","",63,{"i":[{"n":"self"},{"n":"ifmatch"}],"o":{"n":"bool"}}],[11,"eq","iron::method","",99,{"i":[{"n":"self"},{"n":"method"}],"o":{"n":"bool"}}],[11,"ne","","",99,{"i":[{"n":"self"},{"n":"method"}],"o":{"n":"bool"}}],[11,"eq","iron::headers","",18,{"i":[{"n":"self"},{"n":"transferencoding"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"transferencoding"}],"o":{"n":"bool"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"accesscontrolrequestmethod"}],"o":{"n":"bool"}}],[11,"ne","","",45,{"i":[{"n":"self"},{"n":"accesscontrolrequestmethod"}],"o":{"n":"bool"}}],[11,"eq","","",56,{"i":[{"n":"self"},{"n":"contentencoding"}],"o":{"n":"bool"}}],[11,"ne","","",56,{"i":[{"n":"self"},{"n":"contentencoding"}],"o":{"n":"bool"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"charset"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"charset"}],"o":{"n":"bool"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"setcookie"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"setcookie"}],"o":{"n":"bool"}}],[11,"eq","iron::status","",98,{"i":[{"n":"self"},{"n":"statusclass"}],"o":{"n":"bool"}}],[11,"eq","iron::headers","",41,{"i":[{"n":"self"},{"n":"range"}],"o":{"n":"bool"}}],[11,"ne","","",41,{"i":[{"n":"self"},{"n":"range"}],"o":{"n":"bool"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"bearer"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"bearer"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"authorization"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"authorization"}],"o":{"n":"bool"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"allow"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"allow"}],"o":{"n":"bool"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"accesscontrolexposeheaders"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"accesscontrolexposeheaders"}],"o":{"n":"bool"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"rangeunit"}],"o":{"n":"bool"}}],[11,"ne","","",47,{"i":[{"n":"self"},{"n":"rangeunit"}],"o":{"n":"bool"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"basic"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"basic"}],"o":{"n":"bool"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"acceptranges"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"acceptranges"}],"o":{"n":"bool"}}],[11,"eq","","",54,{"i":[{"n":"self"},{"n":"ifnonematch"}],"o":{"n":"bool"}}],[11,"ne","","",54,{"i":[{"n":"self"},{"n":"ifnonematch"}],"o":{"n":"bool"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"accesscontrolallowheaders"}],"o":{"n":"bool"}}],[11,"ne","","",73,{"i":[{"n":"self"},{"n":"accesscontrolallowheaders"}],"o":{"n":"bool"}}],[11,"eq","","",122,{"i":[{"n":"self"},{"n":"linkvalue"}],"o":{"n":"bool"}}],[11,"ne","","",122,{"i":[{"n":"self"},{"n":"linkvalue"}],"o":{"n":"bool"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"server"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"server"}],"o":{"n":"bool"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"expires"}],"o":{"n":"bool"}}],[11,"ne","","",42,{"i":[{"n":"self"},{"n":"expires"}],"o":{"n":"bool"}}],[11,"eq","","",61,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"ne","","",61,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"dispositiontype"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"dispositiontype"}],"o":{"n":"bool"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"lastmodified"}],"o":{"n":"bool"}}],[11,"ne","","",72,{"i":[{"n":"self"},{"n":"lastmodified"}],"o":{"n":"bool"}}],[11,"eq","iron::headers::parsing","",1,{"i":[{"n":"self"},{"n":"extendedvalue"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"extendedvalue"}],"o":{"n":"bool"}}],[11,"eq","iron::headers","",46,{"i":[{"n":"self"},{"n":"accesscontrolalloworigin"}],"o":{"n":"bool"}}],[11,"ne","","",46,{"i":[{"n":"self"},{"n":"accesscontrolalloworigin"}],"o":{"n":"bool"}}],[11,"eq","","",121,{"i":[{"n":"self"},{"n":"accesscontrolallowcredentials"}],"o":{"n":"bool"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"protocol"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"protocol"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"from"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"from"}],"o":{"n":"bool"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"bool"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"cachedirective"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"cachedirective"}],"o":{"n":"bool"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"etag"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"etag"}],"o":{"n":"bool"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"acceptencoding"}],"o":{"n":"bool"}}],[11,"ne","","",38,{"i":[{"n":"self"},{"n":"acceptencoding"}],"o":{"n":"bool"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"contentlength"}],"o":{"n":"bool"}}],[11,"ne","","",60,{"i":[{"n":"self"},{"n":"contentlength"}],"o":{"n":"bool"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"connectionoption"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"connectionoption"}],"o":{"n":"bool"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"stricttransportsecurity"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"stricttransportsecurity"}],"o":{"n":"bool"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"cookie"}],"o":{"n":"bool"}}],[11,"ne","","",32,{"i":[{"n":"self"},{"n":"cookie"}],"o":{"n":"bool"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"ifunmodifiedsince"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"ifunmodifiedsince"}],"o":{"n":"bool"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"preference"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"preference"}],"o":{"n":"bool"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"accesscontrolallowmethods"}],"o":{"n":"bool"}}],[11,"ne","","",57,{"i":[{"n":"self"},{"n":"accesscontrolallowmethods"}],"o":{"n":"bool"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"cachecontrol"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"cachecontrol"}],"o":{"n":"bool"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"pragma"}],"o":{"n":"bool"}}],[11,"ne","","",34,{"i":[{"n":"self"},{"n":"pragma"}],"o":{"n":"bool"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"referer"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"referer"}],"o":{"n":"bool"}}],[11,"eq","","",118,{"i":[{"n":"self"},{"n":"link"}],"o":{"n":"bool"}}],[11,"ne","","",118,{"i":[{"n":"self"},{"n":"link"}],"o":{"n":"bool"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"byterangespec"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"byterangespec"}],"o":{"n":"bool"}}],[11,"eq","","",70,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"ne","","",70,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"dispositionparam"}],"o":{"n":"bool"}}],[11,"ne","","",50,{"i":[{"n":"self"},{"n":"dispositionparam"}],"o":{"n":"bool"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"contentlanguage"}],"o":{"n":"bool"}}],[11,"ne","","",71,{"i":[{"n":"self"},{"n":"contentlanguage"}],"o":{"n":"bool"}}],[11,"eq","","",74,{"i":[{"n":"self"},{"n":"vary"}],"o":{"n":"bool"}}],[11,"ne","","",74,{"i":[{"n":"self"},{"n":"vary"}],"o":{"n":"bool"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"encoding"}],"o":{"n":"bool"}}],[11,"ne","","",75,{"i":[{"n":"self"},{"n":"encoding"}],"o":{"n":"bool"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"protocolname"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"protocolname"}],"o":{"n":"bool"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"expect"}],"o":{"n":"bool"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"contentrange"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"contentrange"}],"o":{"n":"bool"}}],[11,"eq","","",62,{"i":[{"n":"self"},{"n":"acceptlanguage"}],"o":{"n":"bool"}}],[11,"ne","","",62,{"i":[{"n":"self"},{"n":"acceptlanguage"}],"o":{"n":"bool"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"connection"}],"o":{"n":"bool"}}],[11,"ne","","",59,{"i":[{"n":"self"},{"n":"connection"}],"o":{"n":"bool"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"accept"}],"o":{"n":"bool"}}],[11,"ne","","",69,{"i":[{"n":"self"},{"n":"accept"}],"o":{"n":"bool"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"accesscontrolrequestheaders"}],"o":{"n":"bool"}}],[11,"ne","","",64,{"i":[{"n":"self"},{"n":"accesscontrolrequestheaders"}],"o":{"n":"bool"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"ne","","",31,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"useragent"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"useragent"}],"o":{"n":"bool"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"qualityitem"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"qualityitem"}],"o":{"n":"bool"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"accesscontrolmaxage"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"accesscontrolmaxage"}],"o":{"n":"bool"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"ifrange"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"ifrange"}],"o":{"n":"bool"}}],[11,"eq","iron","",120,{"i":[{"n":"self"},{"n":"headers"}],"o":{"n":"bool"}}],[11,"eq","iron::headers","",15,{"i":[{"n":"self"},{"n":"preferenceapplied"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"preferenceapplied"}],"o":{"n":"bool"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"upgrade"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"upgrade"}],"o":{"n":"bool"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"connectionoption"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"byterangespec"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"from"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"cookie"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"entitytag"}}],[11,"clone","iron::status","",97,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"clone","iron::headers","",27,{"i":[{"n":"self"}],"o":{"n":"relationtype"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"basic"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"referer"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"accesscontrolallowmethods"}}],[11,"clone","iron","",120,{"i":[{"n":"self"}],"o":{"n":"headers"}}],[11,"clone","iron::headers","",43,{"i":[{"n":"self"}],"o":{"n":"charset"}}],[11,"clone","iron::headers::parsing","",1,{"i":[{"n":"self"}],"o":{"n":"extendedvalue"}}],[11,"clone","iron::headers","",17,{"i":[{"n":"self"}],"o":{"n":"useragent"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"ifmodifiedsince"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"referrerpolicy"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"preference"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"host"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"accesscontrolrequestmethod"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"authorization"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"contentlanguage"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"acceptranges"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"encoding"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"location"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"accesscontrolmaxage"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"qualityitem"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"quality"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"etag"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"accesscontrolrequestheaders"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"contentdisposition"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"accesscontrolexposeheaders"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"accesscontrolallowheaders"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"ifnonematch"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"ifmatch"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"acceptcharset"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"mediadesc"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"linkvalue"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"cachedirective"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"origin"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"server"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"cachecontrol"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"allow"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"contentrangespec"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"bearer"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"expires"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"acceptencoding"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"preferenceapplied"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"link"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"acceptlanguage"}}],[11,"clone","iron::method","",99,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"clone","iron::headers","",56,{"i":[{"n":"self"}],"o":{"n":"contentencoding"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"upgrade"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"stricttransportsecurity"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"dispositionparam"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"rangeunit"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"setcookie"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"vary"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"contenttype"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"ifunmodifiedsince"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"accesscontrolallowcredentials"}}],[11,"clone","iron::status","",98,{"i":[{"n":"self"}],"o":{"n":"statusclass"}}],[11,"clone","iron::headers","",18,{"i":[{"n":"self"}],"o":{"n":"transferencoding"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"contentlength"}}],[11,"clone","iron::headers::parsing","",123,{"i":[{"n":"self"}],"o":{"n":"http_value"}}],[11,"clone","iron::headers","",58,{"i":[{"n":"self"}],"o":{"n":"expect"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"prefer"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"accept"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"ifrange"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"accesscontrolalloworigin"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"protocolname"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"contentrange"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"connection"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"pragma"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"dispositiontype"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"protocol"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"lastmodified"}}],[11,"deref_mut","","",38,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",9,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref_mut","","",22,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",26,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",69,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",36,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref_mut","","",33,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref_mut","","",72,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref_mut","","",59,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",56,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",17,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref_mut","","",30,{"i":[{"n":"self"}],"o":{"n":"entitytag"}}],[11,"deref_mut","","",64,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",60,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"deref_mut","","",15,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",42,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref_mut","","",67,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",49,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"deref_mut","","",12,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref_mut","","",19,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",52,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",11,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref_mut","","",48,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",71,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",51,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref_mut","","",5,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",7,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"deref_mut","","",18,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",73,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",32,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",20,{"i":[{"n":"self"}],"o":{"n":"contentrangespec"}}],[11,"deref_mut","","",62,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",57,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",10,{"i":[{"n":"self"}],"o":{"n":"mime"}}],[11,"deref_mut","","",37,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref_mut","","",16,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",45,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"description","iron::error","",85,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",85,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"from_str","iron::headers","",55,{"i":[{"n":"str"}],"o":{"g":["host","error"],"n":"result"}}],[11,"from_str","","",118,{"i":[{"n":"str"}],"o":{"g":["link","error"],"n":"result"}}],[11,"from_str","","",25,{"i":[{"n":"str"}],"o":{"g":["bearer","error"],"n":"result"}}],[11,"from_str","","",75,{"i":[{"n":"str"}],"o":{"g":["encoding","error"],"n":"result"}}],[11,"from_str","","",47,{"i":[{"n":"str"}],"o":{"g":["rangeunit","error"],"n":"result"}}],[11,"from_str","","",41,{"i":[{"n":"str"}],"o":{"g":["range","error"],"n":"result"}}],[11,"from_str","","",44,{"i":[{"n":"str"}],"o":{"g":["qualityitem","error"],"n":"result"}}],[11,"from_str","","",70,{"i":[{"n":"str"}],"o":{"g":["entitytag","error"],"n":"result"}}],[11,"from_str","","",13,{"i":[{"n":"str"}],"o":{"g":["connectionoption"],"n":"result"}}],[11,"from_str","","",35,{"i":[{"n":"str"}],"o":{"g":["cachedirective","option"],"n":"result"}}],[11,"from_str","","",14,{"i":[{"n":"str"}],"o":{"g":["origin","error"],"n":"result"}}],[11,"from_str","","",40,{"i":[{"n":"str"}],"o":{"g":["basic","error"],"n":"result"}}],[11,"from_str","iron::method","",99,{"i":[{"n":"str"}],"o":{"g":["method","error"],"n":"result"}}],[11,"from_str","iron::headers","",68,{"i":[{"n":"str"}],"o":{"g":["stricttransportsecurity","error"],"n":"result"}}],[11,"from_str","","",43,{"i":[{"n":"str"}],"o":{"g":["charset","error"],"n":"result"}}],[11,"from_str","","",8,{"i":[{"n":"str"}],"o":{"g":["preference","option"],"n":"result"}}],[11,"from_str","","",29,{"i":[{"n":"str"}],"o":{"g":["protocol"],"n":"result"}}],[11,"from_str","","",28,{"i":[{"n":"str"}],"o":{"g":["byterangespec","error"],"n":"result"}}],[11,"from_str","","",27,{"i":[{"n":"str"}],"o":{"g":["relationtype","error"],"n":"result"}}],[11,"from_str","","",6,{"i":[{"n":"str"}],"o":{"g":["contentrangespec","error"],"n":"result"}}],[11,"from_str","","",21,{"i":[{"n":"str"}],"o":{"g":["mediadesc","error"],"n":"result"}}],[11,"from_str","","",61,{"i":[{"n":"str"}],"o":{"g":["httpdate","error"],"n":"result"}}],[11,"from_str","","",39,{"i":[{"n":"str"}],"o":{"g":["protocolname"],"n":"result"}}],[11,"cmp","iron::status","",97,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"ordering"}}],[11,"cmp","","",98,{"i":[{"n":"self"},{"n":"statusclass"}],"o":{"n":"ordering"}}],[11,"cmp","iron::headers","",31,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"ordering"}}],[11,"cmp","","",61,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"ordering"}}],[11,"from_iter","iron","",120,{"i":[{"n":"i"}],"o":{"n":"headers"}}],[11,"default","iron::headers","",31,{"o":{"n":"quality"}}],[11,"next","","",124,{"i":[{"n":"self"}],"o":{"g":["headerview"],"n":"option"}}],[11,"deref","","",16,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",33,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref","","",42,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref","","",48,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",17,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref","","",64,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",60,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"deref","","",69,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",18,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",37,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref","","",12,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref","","",57,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",67,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",70,{"i":[{"n":"bool"},{"n":"string"}],"o":{"n":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",70,{"i":[{"n":"string"}],"o":{"n":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",70,{"i":[{"n":"string"}],"o":{"n":"entitytag"}}],[11,"tag","","Get the tag.",70,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",70,null],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",70,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",70,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",70,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",70,{"i":[{"n":"self"},{"n":"entitytag"}],"o":{"n":"bool"}}],[11,"deref","","",30,{"i":[{"n":"self"}],"o":{"n":"entitytag"}}],[11,"deref","","",32,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",19,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",49,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"deref","","",52,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",36,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref","","",22,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",56,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"safe","iron::method","Whether a method is considered \"safe\", meaning the request is essentially read-only.",99,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result is executed multiple times.",99,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"deref","iron::headers","",45,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"deref","","",62,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",20,{"i":[{"n":"self"}],"o":{"n":"contentrangespec"}}],[11,"deref","","",9,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref","","",26,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",15,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",5,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",7,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_param","iron::mime","",82,{"i":[{"n":"self"},{"n":"a"}],"o":{"g":["value"],"n":"option"}}],[11,"deref","iron::headers","",10,{"i":[{"n":"self"}],"o":{"n":"mime"}}],[11,"deref","","",72,{"i":[{"n":"self"}],"o":{"n":"httpdate"}}],[11,"deref","","",59,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",11,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref","","",51,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deref","","",71,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",38,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref","","",73,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::status","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::response","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::status","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::error","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::method","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers::parsing","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::headers","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"drop","iron::response","",105,null],[11,"drop","iron","",0,null],[11,"extend","","",120,null],[11,"read","iron::request","",109,null],[11,"fmt_header","iron::headers","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_multi_header","","",19,{"i":[{"n":"self"},{"n":"multilineformatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt_header","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"partial_cmp","","",31,{"i":[{"n":"self"},{"n":"quality"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",31,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"le","","",31,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"gt","","",31,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"ge","","",31,{"i":[{"n":"self"},{"n":"quality"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",61,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",61,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"le","","",61,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"gt","","",61,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"ge","","",61,{"i":[{"n":"self"},{"n":"httpdate"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",44,{"i":[{"n":"self"},{"n":"qualityitem"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","iron::status","",98,{"i":[{"n":"self"},{"n":"statusclass"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",97,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"header_name","iron::headers","",73,{"o":{"n":"str"}}],[11,"parse_header","","",73,null],[11,"header_name","","",42,{"o":{"n":"str"}}],[11,"parse_header","","",42,null],[11,"header_name","","",15,{"o":{"n":"str"}}],[11,"parse_header","","",15,null],[11,"header_name","","",48,{"o":{"n":"str"}}],[11,"parse_header","","",48,null],[11,"header_name","","",38,{"o":{"n":"str"}}],[11,"parse_header","","",38,null],[11,"header_name","","",20,{"o":{"n":"str"}}],[11,"parse_header","","",20,null],[11,"header_name","","",18,{"o":{"n":"str"}}],[11,"parse_header","","",18,null],[11,"header_name","","",63,{"o":{"n":"str"}}],[11,"parse_header","","",63,null],[11,"header_name","","",57,{"o":{"n":"str"}}],[11,"parse_header","","",57,null],[11,"header_name","","",62,{"o":{"n":"str"}}],[11,"parse_header","","",62,null],[11,"header_name","","",5,{"o":{"n":"str"}}],[11,"parse_header","","",5,null],[11,"header_name","","",65,{"o":{"n":"str"}}],[11,"parse_header","","",65,null],[11,"header_name","","",58,{"o":{"n":"str"}}],[11,"parse_header","","",58,null],[11,"header_name","","",9,{"o":{"n":"str"}}],[11,"parse_header","","",9,null],[11,"header_name","","",10,{"o":{"n":"str"}}],[11,"parse_header","","",10,null],[11,"header_name","","",12,{"o":{"n":"str"}}],[11,"parse_header","","",12,null],[11,"header_name","","",59,{"o":{"n":"str"}}],[11,"parse_header","","",59,null],[11,"header_name","","",55,{"o":{"n":"str"}}],[11,"parse_header","","",55,null],[11,"header_name","","",36,{"o":{"n":"str"}}],[11,"parse_header","","",36,null],[11,"header_name","","",37,{"o":{"n":"str"}}],[11,"parse_header","","",37,null],[11,"header_name","","",45,{"o":{"n":"str"}}],[11,"parse_header","","",45,null],[11,"header_name","","",54,{"o":{"n":"str"}}],[11,"parse_header","","",54,null],[11,"header_name","","",34,{"o":{"n":"str"}}],[11,"parse_header","","",34,null],[11,"header_name","","",33,{"o":{"n":"str"}}],[11,"parse_header","","",33,null],[11,"header_name","","",64,{"o":{"n":"str"}}],[11,"parse_header","","",64,null],[11,"header_name","","",30,{"o":{"n":"str"}}],[11,"parse_header","","",30,null],[11,"header_name","","",71,{"o":{"n":"str"}}],[11,"parse_header","","",71,null],[11,"header_name","","",49,{"o":{"n":"str"}}],[11,"parse_header","","",49,null],[11,"header_name","","",11,{"o":{"n":"str"}}],[11,"parse_header","","",11,null],[11,"header_name","","",23,{"o":{"n":"str"}}],[11,"parse_header","","",23,null],[11,"header_name","","",32,{"o":{"n":"str"}}],[11,"parse_header","","",32,null],[11,"header_name","","",68,{"o":{"n":"str"}}],[11,"parse_header","","",68,null],[11,"header_name","","",16,{"o":{"n":"str"}}],[11,"parse_header","","",16,null],[11,"header_name","","",121,{"o":{"n":"str"}}],[11,"parse_header","","",121,null],[11,"header_name","","",74,{"o":{"n":"str"}}],[11,"parse_header","","",74,null],[11,"header_name","","",19,{"o":{"n":"str"}}],[11,"parse_header","","",19,null],[11,"header_name","","",51,{"o":{"n":"str"}}],[11,"parse_header","","",51,null],[11,"header_name","","",22,{"o":{"n":"str"}}],[11,"parse_header","","",22,null],[11,"header_name","","",118,{"o":{"n":"str"}}],[11,"parse_header","","",118,null],[11,"header_name","","",66,{"o":{"n":"str"}}],[11,"parse_header","","",66,null],[11,"header_name","","",46,{"o":{"n":"str"}}],[11,"parse_header","","",46,null],[11,"header_name","","",41,{"o":{"n":"str"}}],[11,"parse_header","","",41,null],[11,"header_name","","",60,{"o":{"n":"str"}}],[11,"parse_header","","",60,null],[11,"header_name","","",26,{"o":{"n":"str"}}],[11,"parse_header","","",26,null],[11,"header_name","","",17,{"o":{"n":"str"}}],[11,"parse_header","","",17,null],[11,"header_name","","",52,{"o":{"n":"str"}}],[11,"parse_header","","",52,null],[11,"header_name","","",72,{"o":{"n":"str"}}],[11,"parse_header","","",72,null],[11,"header_name","","",69,{"o":{"n":"str"}}],[11,"parse_header","","",69,null],[11,"header_name","","",56,{"o":{"n":"str"}}],[11,"parse_header","","",56,null],[11,"header_name","","",14,{"o":{"n":"str"}}],[11,"parse_header","","",14,null],[11,"header_name","","",7,{"o":{"n":"str"}}],[11,"parse_header","","",7,null],[11,"header_name","","",67,{"o":{"n":"str"}}],[11,"parse_header","","",67,null],[11,"contains","iron::headers::parsing","",123,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"hash","iron::status","",97,null],[11,"hash","iron::method","",99,null],[11,"as_mut_string","iron::url","",125,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"finish","","",125,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"drop","","",126,null],[11,"drop","","",125,null],[11,"as_ref","","",117,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",94,{"i":[{"n":"errors"}],"o":{"n":"parseerror"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",117,{"i":[{"n":"self"},{"n":"url"}],"o":{"n":"bool"}}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"ne","","",96,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"origin"}],"o":{"n":"bool"}}],[11,"ne","","",91,{"i":[{"n":"self"},{"n":"origin"}],"o":{"n":"bool"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"opaqueorigin"}],"o":{"n":"bool"}}],[11,"ne","","",127,{"i":[{"n":"self"},{"n":"opaqueorigin"}],"o":{"n":"bool"}}],[11,"to_socket_addrs","","",117,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"to_socket_addrs","","",93,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"hostandport"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"origin"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"opaqueorigin"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"host"}}],[11,"clone","iron::url::form_urlencoded","",128,{"i":[{"n":"self"}],"o":{"n":"parse"}}],[11,"clone","iron::url","",94,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"parseoptions"}}],[11,"partial_cmp","","",96,{"i":[{"n":"self"},{"n":"host"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",96,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"le","","",96,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"gt","","",96,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"ge","","",96,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",117,{"i":[{"n":"self"},{"n":"url"}],"o":{"g":["ordering"],"n":"option"}}],[11,"description","","",94,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_str","","",117,{"i":[{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"index","","",117,{"i":[{"n":"self"},{"g":["position"],"n":"rangefrom"}],"o":{"n":"str"}}],[11,"index","","",117,{"i":[{"n":"self"},{"g":["position"],"n":"rangeto"}],"o":{"n":"str"}}],[11,"index","","",117,{"i":[{"n":"self"},{"g":["position"],"n":"range"}],"o":{"n":"str"}}],[11,"index","","",117,{"i":[{"n":"self"},{"n":"rangefull"}],"o":{"n":"str"}}],[11,"cmp","","",117,{"i":[{"n":"self"},{"n":"url"}],"o":{"n":"ordering"}}],[11,"cmp","","",96,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"ordering"}}],[11,"hash","","",127,null],[11,"hash","","",117,null],[11,"hash","","",91,null],[11,"hash","","",96,null],[11,"next","iron::url::form_urlencoded","",128,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","iron::url","",130,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"option"}}],[11,"next","iron::url::form_urlencoded","",131,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"size_hint","","",131,null],[11,"next","","",132,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::url","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::url::form_urlencoded","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::url","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::url::form_urlencoded","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::url","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","iron::url::idna::uts46","",95,{"i":[{"n":"self"}],"o":{"n":"flags"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::url::percent_encoding","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"contains","","",136,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"contains","","",137,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"contains","","",138,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"contains","","",139,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"contains","","",140,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"userinfo_encode_set"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"percentdecode"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"default_encode_set"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"percentencode"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"simple_encode_set"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"path_segment_encode_set"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"query_encode_set"}}],[11,"next","","",141,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"size_hint","","",141,null],[11,"next","","",135,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"size_hint","","",135,null],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","iron::mime","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"attr"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"toplevel"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"sublevel"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"mime"}}],[11,"partial_cmp","","",80,{"i":[{"n":"self"},{"n":"attr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",80,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"le","","",80,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"gt","","",80,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"ge","","",80,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",78,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",78,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"le","","",78,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"gt","","",78,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"ge","","",78,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",79,{"i":[{"n":"self"},{"n":"value"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",79,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"le","","",79,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"gt","","",79,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"ge","","",79,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",81,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",81,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"le","","",81,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"gt","","",81,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"ge","","",81,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",82,{"i":[{"n":"self"},{"n":"mime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",82,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"le","","",82,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"gt","","",82,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"ge","","",82,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"from_str","","",79,{"i":[{"n":"str"}],"o":{"g":["value"],"n":"result"}}],[11,"from_str","","",81,{"i":[{"n":"str"}],"o":{"g":["sublevel"],"n":"result"}}],[11,"from_str","","",80,{"i":[{"n":"str"}],"o":{"g":["attr"],"n":"result"}}],[11,"from_str","","",82,{"i":[{"n":"str"}],"o":{"g":["mime"],"n":"result"}}],[11,"from_str","","",78,{"i":[{"n":"str"}],"o":{"g":["toplevel"],"n":"result"}}],[11,"cmp","","",78,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"ordering"}}],[11,"cmp","","",81,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"ordering"}}],[11,"cmp","","",79,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"ordering"}}],[11,"cmp","","",82,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"ordering"}}],[11,"cmp","","",80,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"ordering"}}],[11,"hash","","",80,null],[11,"hash","","",81,null],[11,"hash","","",78,null],[11,"hash","","",82,null],[11,"hash","","",79,null],[11,"deref","","",81,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",78,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",79,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",80,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","iron::typemap","",142,{"i":[{"n":"self"}],"o":{"n":"typemap"}}],[11,"default","","",142,{"o":{"n":"typemap"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"new","","Create a new, empty TypeMap.",142,{"o":{"g":["unsafeany"],"n":"typemap"}}],[11,"custom","","Create a new, empty TypeMap.",142,{"o":{"n":"typemap"}}],[11,"insert","","Insert a value into the map with a specified key type.",142,null],[11,"get","","Find a value in the map and get a reference to it.",142,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Find a value in the map and get a mutable reference to it.",142,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"contains","","Check if a key has an associated value stored in the map.",142,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"remove","","Remove a value from the map.",142,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"entry","","Get the given key's corresponding entry in the map for in-place manipulation.",142,{"i":[{"n":"self"}],"o":{"n":"entry"}}],[11,"data","","Read the underlying HashMap",142,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"data_mut","","Get a mutable reference to the underlying HashMap",142,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"len","","Get the number of values stored in the map.",142,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Return true if the map contains no values.",142,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clear","","Remove all entries from the map.",142,null],[11,"new","iron","Creates a new, empty headers map.",120,{"o":{"n":"headers"}}],[11,"set","","Set a header field to the corresponding value.",120,null],[11,"get_raw","","Access the raw value of a header.",120,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",120,null],[11,"append_raw","","Append a value to raw value of this header.",120,null],[11,"remove_raw","","Remove a header set by set_raw",120,null],[11,"get","","Get a reference to the header field's value, if it exists.",120,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",120,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",120,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",120,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",120,{"i":[{"n":"self"}],"o":{"n":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",120,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clear","","Remove all headers from the map.",120,null],[11,"is","iron::headers","Check if a HeaderView is a certain Header.",119,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"name","","Get the Header name as a slice.",119,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"value","","Cast the value to a certain Header type.",119,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"value_string","","Get just the header value as a String.",119,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",10,{"o":{"n":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",10,{"o":{"n":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",10,{"o":{"n":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",10,{"o":{"n":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",10,{"o":{"n":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",10,{"o":{"n":"contenttype"}}],[11,"new","","Creates a new `Origin` header.",14,{"i":[{"n":"s"},{"n":"h"},{"g":["u16"],"n":"option"}],"o":{"n":"origin"}}],[11,"new","","Creates a new Protocol with the given name and version",29,{"i":[{"n":"protocolname"},{"g":["string"],"n":"option"}],"o":{"n":"protocol"}}],[11,"new","","Create `LinkValue` from URI-Reference.",122,{"i":[{"n":"t"}],"o":{"n":"linkvalue"}}],[11,"link","","Get the `LinkValue`'s value.",122,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",122,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",122,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",122,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",122,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",122,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"title","","Get the `LinkValue`'s `title` parameter.",122,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",122,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",122,{"i":[{"n":"self"}],"o":{"g":["mime"],"n":"option"}}],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",122,{"i":[{"n":"self"},{"n":"relationtype"}],"o":{"n":"linkvalue"}}],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",122,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"linkvalue"}}],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",122,{"i":[{"n":"self"},{"n":"relationtype"}],"o":{"n":"linkvalue"}}],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",122,{"i":[{"n":"self"},{"n":"languagetag"}],"o":{"n":"linkvalue"}}],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",122,{"i":[{"n":"self"},{"n":"mediadesc"}],"o":{"n":"linkvalue"}}],[11,"set_title","","Set `LinkValue`'s `title` parameter.",122,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"linkvalue"}}],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",122,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"linkvalue"}}],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",122,{"i":[{"n":"self"},{"g":["vec"],"n":"mime"}],"o":{"n":"linkvalue"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",41,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",41,{"i":[{"n":"vec"}],"o":{"n":"range"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",44,{"i":[{"n":"t"},{"n":"quality"}],"o":{"n":"qualityitem"}}],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",118,{"i":[{"g":["linkvalue"],"n":"vec"}],"o":{"n":"link"}}],[11,"values","","Get the `Link` header's `LinkValue`s.",118,null],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",118,null],[11,"close","","A constructor to easily create a `Connection: close` header.",59,{"o":{"n":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",59,{"o":{"n":"connection"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",68,{"i":[{"n":"u64"}],"o":{"n":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",68,{"i":[{"n":"u64"}],"o":{"n":"stricttransportsecurity"}}],[11,"star","","A constructor to easily create `Accept: */*`.",69,{"o":{"n":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",69,{"o":{"n":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",69,{"o":{"n":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",69,{"o":{"n":"accept"}}],[11,"is","iron::error","Is this `Error` object of type `E`?",143,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"downcast","","If this error is `E`, downcast this error to `E`, by reference.",143,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"is","","Is this `Error + Send` object of type `E`?",143,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"downcast","","If this error is `E`, downcast this error to `E`, by reference.",143,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_str","iron::mime","",78,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_str","","",79,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_str","","",80,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_str","","",81,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_owned","iron::url::form_urlencoded","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",128,{"i":[{"n":"self"}],"o":{"n":"parseintoowned"}}],[11,"new","","Create a new `application/x-www-form-urlencoded` serializer for the given target.",133,{"i":[{"n":"t"}],"o":{"n":"serializer"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",133,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"serializer"}}],[11,"clear","","Remove any existing name/value pair.",133,{"i":[{"n":"self"}],"o":{"n":"serializer"}}],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",133,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"serializer"}}],[11,"append_pair","","Serialize and append a name/value pair.",133,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"n":"serializer"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",133,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"serializer"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",133,null],[11,"parse","iron::url","Parse an absolute URL from a string.",117,{"i":[{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",117,{"i":[{"n":"str"},{"n":"i"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",117,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",117,{"o":{"n":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",117,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_string","","Return the serialization of this URL.",117,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",117,{"i":[{"n":"self"}],"o":{"n":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",117,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",117,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",117,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",117,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",117,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",117,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",117,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",117,{"i":[{"n":"self"}],"o":{"g":["host"],"n":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",117,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"port","","Return the port number for this URL, if any.",117,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",117,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",117,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["hostandport","error"],"n":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",117,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",117,{"i":[{"n":"self"}],"o":{"g":["split"],"n":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",117,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",117,{"i":[{"n":"self"}],"o":{"n":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",117,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",117,null],[11,"set_query","","Change this URL’s query string.",117,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",117,{"i":[{"n":"self"}],"o":{"g":["urlquery"],"n":"serializer"}}],[11,"set_path","","Change this URL’s path.",117,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",117,{"i":[{"n":"self"}],"o":{"g":["pathsegmentsmut"],"n":"result"}}],[11,"set_port","","Change this URL’s port number.",117,{"i":[{"n":"self"},{"g":["u16"],"n":"option"}],"o":{"n":"result"}}],[11,"set_host","","Change this URL’s host.",117,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",117,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"result"}}],[11,"set_password","","Change this URL’s password.",117,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"n":"result"}}],[11,"set_username","","Change this URL’s username.",117,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",117,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",117,{"i":[{"n":"p"}],"o":{"g":["url"],"n":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",117,{"i":[{"n":"p"}],"o":{"g":["url"],"n":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",117,{"i":[{"n":"self"}],"o":{"g":["pathbuf"],"n":"result"}}],[11,"base_url","","Change the base URL",129,{"i":[{"n":"self"},{"g":["url"],"n":"option"}],"o":{"n":"parseoptions"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",129,{"i":[{"n":"self"},{"g":["fn"],"n":"option"}],"o":{"n":"parseoptions"}}],[11,"parse","","Parse an URL string with the configuration so far.",129,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",126,{"i":[{"n":"self"}],"o":{"n":"pathsegmentsmut"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",126,{"i":[{"n":"self"}],"o":{"n":"pathsegmentsmut"}}],[11,"pop","","Remove the last segment of this URL’s path.",126,{"i":[{"n":"self"}],"o":{"n":"pathsegmentsmut"}}],[11,"push","","Append the given segment at the end of this URL’s path.",126,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"pathsegmentsmut"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",126,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"pathsegmentsmut"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",91,{"o":{"n":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",91,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",91,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",91,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"if_any","iron::url::percent_encoding","If the percent-decoding is different from the input, return it as a new bytes vector.",141,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",141,{"i":[{"n":"self"}],"o":{"g":["cow","utf8error"],"n":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",141,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"cow"}}],[11,"to_owned","iron::url","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",93,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"hostandport"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",96,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",96,{"i":[{"n":"str"}],"o":{"g":["host","parseerror"],"n":"result"}}],[11,"canonical_reason","iron::status","Get the standardised `reason-phrase` for this status code.",97,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",97,{"i":[{"n":"self"}],"o":{"n":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_success","","Check if class is Success.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"default_code","","Get the default status code for the class.",98,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"status","iron::response","The status of this response.",105,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"headers","","The headers of this response.",105,{"i":[{"n":"self"}],"o":{"n":"headers"}}],[11,"construct","","Construct a Response from its constituent parts.",105,{"i":[{"n":"httpversion"},{"g":["write"],"n":"httpwriter"},{"n":"statuscode"},{"n":"headers"}],"o":{"g":["fresh"],"n":"response"}}],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",105,null],[11,"new","","Creates a new Response that can be used to write to a network stream.",105,{"i":[{"n":"write"},{"n":"headers"}],"o":{"g":["fresh"],"n":"response"}}],[11,"send","","Writes the body and ends the response.",105,null],[11,"start","","Consume this Response, writing the Headers and Status and creating a Response",105,{"i":[{"n":"self"}],"o":{"g":["response","error"],"n":"result"}}],[11,"status_mut","","Get a mutable reference to the status.",105,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"headers_mut","","Get a mutable reference to the Headers.",105,{"i":[{"n":"self"}],"o":{"n":"headers"}}],[11,"end","","Flushes all writing of a response to the client.",105,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"new","iron::request","Create a new Request, reading the StartLine and Headers so they are immediately useful.",109,{"i":[{"n":"bufreader"},{"n":"socketaddr"}],"o":{"g":["request","error"],"n":"result"}}],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",109,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"g":["error"],"n":"result"}}],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",109,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected over HTTPS.",109,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",109,null]],"paths":[[3,"Listening"],[3,"ExtendedValue"],[8,"Header"],[8,"HeaderFormat"],[3,"HeaderFormatter"],[3,"Upgrade"],[4,"ContentRangeSpec"],[3,"Authorization"],[4,"Preference"],[3,"Date"],[3,"ContentType"],[3,"Location"],[3,"From"],[4,"ConnectionOption"],[3,"Origin"],[3,"PreferenceApplied"],[3,"AcceptRanges"],[3,"UserAgent"],[3,"TransferEncoding"],[3,"SetCookie"],[3,"ContentRange"],[4,"MediaDesc"],[3,"AccessControlExposeHeaders"],[4,"IfRange"],[4,"DispositionType"],[3,"Bearer"],[3,"Allow"],[4,"RelationType"],[4,"ByteRangeSpec"],[3,"Protocol"],[3,"ETag"],[3,"Quality"],[3,"Cookie"],[3,"IfModifiedSince"],[4,"Pragma"],[4,"CacheDirective"],[3,"Server"],[3,"IfUnmodifiedSince"],[3,"AcceptEncoding"],[4,"ProtocolName"],[3,"Basic"],[4,"Range"],[3,"Expires"],[4,"Charset"],[3,"QualityItem"],[3,"AccessControlRequestMethod"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[3,"CacheControl"],[3,"AccessControlMaxAge"],[4,"DispositionParam"],[3,"Referer"],[3,"Prefer"],[8,"Scheme"],[4,"IfNoneMatch"],[3,"Host"],[3,"ContentEncoding"],[3,"AccessControlAllowMethods"],[4,"Expect"],[3,"Connection"],[3,"ContentLength"],[3,"HttpDate"],[3,"AcceptLanguage"],[4,"IfMatch"],[3,"AccessControlRequestHeaders"],[4,"ReferrerPolicy"],[3,"ContentDisposition"],[3,"AcceptCharset"],[3,"StrictTransportSecurity"],[3,"Accept"],[3,"EntityTag"],[3,"ContentLanguage"],[3,"LastModified"],[3,"AccessControlAllowHeaders"],[4,"Vary"],[4,"Encoding"],[8,"Plugin"],[8,"Set"],[4,"TopLevel"],[4,"Value"],[4,"Attr"],[4,"SubLevel"],[3,"Mime"],[3,"Iron"],[3,"Timeouts"],[4,"HttpError"],[3,"IronError"],[8,"Key"],[8,"Modifier"],[8,"Target"],[4,"Position"],[4,"Origin"],[8,"EncodeSet"],[3,"HostAndPort"],[4,"ParseError"],[3,"Flags"],[4,"Host"],[4,"Status"],[4,"StatusClass"],[4,"Method"],[8,"Handler"],[8,"BeforeMiddleware"],[8,"AfterMiddleware"],[8,"AroundMiddleware"],[3,"Chain"],[3,"HttpResponse"],[3,"BodyReader"],[3,"Response"],[8,"WriteBody"],[3,"HttpRequest"],[3,"Request"],[3,"Url"],[3,"Body"],[3,"Header"],[3,"Redirect"],[3,"RedirectRaw"],[3,"Protocol"],[3,"Url"],[3,"Link"],[3,"HeaderView"],[3,"Headers"],[3,"AccessControlAllowCredentials"],[3,"LinkValue"],[3,"HTTP_VALUE"],[3,"HeadersItems"],[3,"UrlQuery"],[3,"PathSegmentsMut"],[3,"OpaqueOrigin"],[3,"Parse"],[3,"ParseOptions"],[3,"SocketAddrs"],[3,"ByteSerialize"],[3,"ParseIntoOwned"],[3,"Serializer"],[3,"Errors"],[3,"PercentEncode"],[3,"SIMPLE_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentDecode"],[3,"TypeMap"],[8,"Error"]]};
searchIndex["is_match"] = {"doc":"","items":[[14,"is_match","is_match","",null,null]],"paths":[]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","Value that either holds a single A or B, or both.",null,null],[13,"Both","","Both values are present.",4,null],[13,"Left","","Only the left value of type `A` is present.",4,null],[13,"Right","","Only the right value of type `B` is present.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"concat","","Combine all an iterator's elements into one element by using `Extend`.",null,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"i":[{"n":"i"}],"o":{"n":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"i":[{"n":"i"},{"n":"j"},{"n":"f"}],"o":{"g":["diff"],"n":"option"}}],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"kmergeby"}}],[5,"process_results","","“Lift” a function of the values of an iterator so that it can process an iterator of `Result` values instead.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"result"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"i":[{"n":"a"},{"n":"usize"}],"o":{"n":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"i":[{"n":"f"}],"o":{"n":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"i":[{"n":"st"},{"n":"f"}],"o":{"n":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"i":[{"n":"st"},{"n":"f"}],"o":{"n":"iterate"}}],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",null,{"i":[{"n":"u"}],"o":{"n":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"i":[{"n":"i"}],"o":{"n":"putback"}}],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",null,{"i":[{"n":"i"}],"o":{"n":"putbackn"}}],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",null,{"i":[{"n":"i"}],"o":{"n":"multipeek"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",null,{"i":[{"n":"i"}],"o":{"n":"kmerge"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"zipeq"}}],[5,"merge_join_by","","Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.",null,{"i":[{"n":"i"},{"n":"j"},{"n":"f"}],"o":{"n":"mergejoinby"}}],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,{"i":[{"n":"i"}],"o":{"n":"rciter"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"i":[{"n":"i"}],"o":{"n":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"i":[{"n":"i"}],"o":{"n":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"i":[{"n":"i"}],"o":{"n":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"i":[{"n":"i"},{"n":"b"},{"n":"f"}],"o":{"n":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"i":[{"n":"i"}],"o":{"n":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"i":[{"n":"i"}],"o":{"n":"option"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"i":[{"n":"i"},{"n":"str"}],"o":{"n":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"i":[{"n":"i"}],"o":{"n":"vec"}}],[5,"equal","","Return `true` if both iterables produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"i":[{"n":"i"},{"n":"j"}],"o":{"n":"bool"}}],[5,"assert_equal","","Assert that two iterables produce equal sequences, with the same semantics as equal(a, b).",null,{"i":[{"n":"i"},{"n":"j"}]}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Positions","","An iterator adapter to get the positions of each element that matches a predicate.",null,null],[3,"Update","","An iterator adapter to apply a mutating function to each element before yielding it.",null,null],[3,"MultiProduct","","An iterator adaptor that iterates over the cartesian product of multiple iterators of type `I`.",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",null,null],[3,"MergeJoinBy","","An iterator adaptor that merge-joins items from the two base iterators in ascending order.",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"ProcessResults","","An iterator that produces only the `T` values as long as the inner iterator produces `Ok(T)`.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces n repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"multiproduct"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"count","","",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"size_hint","","",8,null],[11,"last","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"interleave"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"interleaveshortest"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"putback"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"with_value","","put back value `value` (builder method)",11,null],[11,"into_parts","","Split the `PutBack` into its parts.",11,null],[11,"put_back","","Put back a single value to the front of the iterator.",11,null],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",11,null],[11,"all","","",11,{"i":[{"n":"self"},{"n":"g"}],"o":{"n":"bool"}}],[11,"fold","","",11,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"product"}}],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",12,null],[11,"fold","","",12,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"batching"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"step"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",14,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",15,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",15,null],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"next","","",16,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",16,null],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",17,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",18,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",18,null],[11,"fold","","",18,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",19,null],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",20,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",20,null],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",21,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",22,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fold","","",22,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"next","","",23,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",23,null],[11,"fold","","",23,{"i":[{"n":"self"},{"n":"acc"},{"n":"fold"}],"o":{"n":"acc"}}],[11,"collect","","",23,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next","","",24,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",25,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",25,null],[11,"fold","","",25,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"collect","","",25,{"i":[{"n":"self"}],"o":{"n":"c"}}],[11,"next_back","","",25,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","itertools","",4,{"i":[{"n":"self"}],"o":{"n":"eitherorboth"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"eitherorboth"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"eitherorboth"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","itertools::structs","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"i":[{"n":"self"},{"n":"acc"},{"n":"fold"}],"o":{"n":"acc"}}],[11,"next_back","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"i":[{"n":"self"},{"n":"acc"},{"n":"fold"}],"o":{"n":"acc"}}],[11,"next_back","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"i":[{"n":"self"},{"n":"acc"},{"n":"fold"}],"o":{"n":"acc"}}],[11,"next_back","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"i":[{"n":"self"},{"n":"acc"},{"n":"fold"}],"o":{"n":"acc"}}],[11,"next_back","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"i":[{"n":"self"},{"n":"acc"},{"n":"fold"}],"o":{"n":"acc"}}],[11,"next_back","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",26,null],[11,"fold","","",26,{"i":[{"n":"self"},{"n":"acc"},{"n":"fold"}],"o":{"n":"acc"}}],[11,"next_back","","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",27,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"format"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",30,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",31,{"i":[{"n":"self"}]}],[11,"next","","",31,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",32,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",33,{"i":[{"n":"self"}]}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"intersperse"}}],[11,"next","","",34,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",34,null],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"kmerge"}}],[11,"next","","",35,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",35,null],[11,"next","","",36,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",36,null],[11,"next","","",37,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",37,null],[11,"clone","itertools","",2,{"i":[{"n":"self"}],"o":{"n":"minmaxresult"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"minmaxresult"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"minmaxresult"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","itertools::structs","",38,{"i":[{"n":"self"}],"o":{"n":"multipeek"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"reset_peek","","Reset the peeking “cursor”",38,{"i":[{"n":"self"}]}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",38,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"peeking_next","","",38,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"next","","",38,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",38,null],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"padusing"}}],[11,"next","","",39,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"peeking_next","","",11,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"peeking_next","","",40,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"next","","",41,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",41,null],[11,"next","","",42,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",42,null],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"putbackn"}}],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",40,null],[11,"next","","",40,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",40,null],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"rciter"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",43,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",44,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",44,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"unfold"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"iterate"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",45,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",45,null],[11,"next","","",46,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",46,null],[11,"next","","",47,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",47,null],[11,"next","","",48,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",48,{"i":[{"n":"self"}],"o":{"n":"tuplebuffer"}}],[11,"next","","",49,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"uniqueby"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",50,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",50,null],[11,"count","","",50,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",51,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",51,null],[11,"count","","",51,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"unique"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","itertools","",3,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"position"}],"o":{"n":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"next","itertools::structs","",52,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",52,null],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"zipeq"}}],[11,"next","","",53,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"ziplongest"}}],[11,"next","","",54,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"zip"}}],[11,"from","","",55,null],[11,"next","","",55,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",55,null],[11,"from","","",55,null],[11,"next","","",55,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",55,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",56,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both have run out.",57,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until at least one of them has run out.",57,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",57,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",57,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",57,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"batching"}}],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"groupby"}}],[11,"chunks","","Return an iterable that can chunk the iterator.",57,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"intochunks"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",57,{"i":[{"n":"self"}],"o":{"n":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",57,{"i":[{"n":"self"}],"o":{"n":"tuples"}}],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",57,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",57,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",57,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",57,{"i":[{"n":"self"},{"n":"j"},{"n":"f"}],"o":{"n":"mergeby"}}],[11,"merge_join_by","","Create an iterator that merges items from both this and the specified iterator in ascending order.",57,{"i":[{"n":"self"},{"n":"j"},{"n":"f"}],"o":{"n":"mergejoinby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",57,{"i":[{"n":"self"}],"o":{"n":"kmerge"}}],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"kmergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",57,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"product"}}],[11,"multi_cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of all subiterators returned by meta-iterator `self`.",57,{"i":[{"n":"self"}],"o":{"n":"multiproduct"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",57,{"i":[{"n":"self"}],"o":{"n":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",57,{"i":[{"n":"self"}],"o":{"n":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"uniqueby"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and takes items while the closure `accept` returns `true`.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",57,{"i":[{"n":"self"}],"o":{"n":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",57,{"i":[{"n":"self"}],"o":{"n":"tuplecombinations"}}],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",57,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",57,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",57,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",57,{"i":[{"n":"self"}],"o":{"n":"withposition"}}],[11,"positions","","Return an iterator adaptor that yields the indices of all elements satisfying a predicate, counted from the start of the iterator.",57,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"positions"}}],[11,"update","","Return an iterator adaptor that applies a mutating function to each element before yielding it.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"update"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",57,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"collect_tuple","","Collects all items from the iterator into a tuple of a specific size (up to 4).",57,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",57,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"option"}}],[11,"all_equal","","Check whether all elements compare equal.",57,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",57,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",57,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",57,{"i":[{"n":"self"},{"n":"f"}]}],[11,"concat","","Combine all an iterator's elements into one element by using `Extend`.",57,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",57,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",57,{"i":[{"n":"self"},{"n":"j"}],"o":{"n":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",57,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",57,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",57,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",57,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",57,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",57,{"i":[{"n":"self"},{"n":"b"},{"n":"f"}],"o":{"n":"foldwhile"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",57,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"vec"}}],[11,"sorted_by_key","","Collect all iterator elements into a sorted vector.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",57,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",57,{"i":[{"n":"self"}],"o":{"n":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",57,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"minmaxresult"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"foldwhile"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_inner","","Return the value in the continue or done.",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"is_done","","Return true if `self` is `Done`, false if it is `Continue`.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"i":[{"n":"self"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"i":[{"n":"self"},{"n":"ctx"},{"n":"f"},{"n":"g"}],"o":{"n":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"deref_mut","","",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"bool"}}],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"result"}],"o":{"n":"either"}}],[11,"extend","","",0,null],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"i":[{"n":"self"},{"n":"acc"},{"n":"g"}],"o":{"n":"acc"}}],[11,"count","","",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"last","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"nth","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"collect","","",0,{"i":[{"n":"self"}],"o":{"n":"b"}}],[11,"all","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"bool"}}],[11,"deref","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"as_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"target"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"either"}],"o":{"n":"ordering"}}]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiProduct"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Flatten"],[3,"MapResults"],[3,"Positions"],[3,"Update"],[3,"ConsTuples"],[3,"Combinations"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"MergeJoinBy"],[3,"MultiPeek"],[3,"PadUsing"],[3,"PutBackN"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"UniqueBy"],[3,"Unique"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"i":[{"n":"w"},{"n":"v"}],"o":{"g":["usize"],"n":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,{"i":[{"n":"self"},{"n":"w"}],"o":{"g":["usize"],"n":"result"}}]],"paths":[[8,"Integer"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["language_tags"] = {"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED","","Contains all grandfathered tags.",null,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",0,{"o":{"n":"languagetag"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"languagetag"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"i":[{"n":"self"},{"n":"languagetag"}],"o":{"n":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"i":[{"n":"self"}],"o":{"n":"languagetag"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"languagetag"}],"o":{"n":"bool"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"langtag","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"i":[{"n":"t"}]}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"__lazy_static_create","","",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["lazycell"] = {"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`, but with frozen contents.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with frozen contents.",null,null],[3,"AtomicLazyCell","","A lazily filled `Cell`, with frozen contents.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",0,{"o":{"n":"lazycell"}}],[11,"new","","Creates a new, empty, `LazyCell`.",0,{"o":{"n":"lazycell"}}],[11,"fill","","Put a value into this cell.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"borrow_mut","","Borrows the contents of this lazy cell mutably for the duration of the cell itself.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"borrow_with","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"try_borrow_with","","Same as `borrow_with`, but allows the initializing function to fail.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get","","Returns a copy of the contents of the lazy cell.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",1,{"o":{"n":"atomiclazycell"}}],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,{"o":{"n":"atomiclazycell"}}],[11,"fill","","Put a value into this cell.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get","","Returns a copy of the contents of the lazy cell.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",70,null],[12,"aio_lio_opcode","","",70,null],[12,"aio_reqprio","","",70,null],[12,"aio_buf","","",70,null],[12,"aio_nbytes","","",70,null],[12,"aio_sigevent","","",70,null],[12,"aio_offset","","",70,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",71,null],[12,"e_exit","","",71,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",72,null],[12,"tv_usec","","",72,null],[3,"utmpx","","",null,null],[12,"ut_type","","",73,null],[12,"ut_pid","","",73,null],[12,"ut_line","","",73,null],[12,"ut_id","","",73,null],[12,"ut_user","","",73,null],[12,"ut_host","","",73,null],[12,"ut_exit","","",73,null],[12,"ut_session","","",73,null],[12,"ut_tv","","",73,null],[12,"ut_addr_v6","","",73,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",74,null],[12,"sa_mask","","",74,null],[12,"sa_flags","","",74,null],[12,"sa_restorer","","",74,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",75,null],[12,"ss_flags","","",75,null],[12,"ss_size","","",75,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",76,null],[12,"si_errno","","",76,null],[12,"si_code","","",76,null],[12,"_pad","","",76,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",77,null],[12,"gl_pathv","","",77,null],[12,"gl_offs","","",77,null],[12,"gl_flags","","",77,null],[3,"statfs","","",null,null],[12,"f_type","","",78,null],[12,"f_bsize","","",78,null],[12,"f_blocks","","",78,null],[12,"f_bfree","","",78,null],[12,"f_bavail","","",78,null],[12,"f_files","","",78,null],[12,"f_ffree","","",78,null],[12,"f_fsid","","",78,null],[12,"f_namelen","","",78,null],[12,"f_frsize","","",78,null],[3,"msghdr","","",null,null],[12,"msg_name","","",79,null],[12,"msg_namelen","","",79,null],[12,"msg_iov","","",79,null],[12,"msg_iovlen","","",79,null],[12,"msg_control","","",79,null],[12,"msg_controllen","","",79,null],[12,"msg_flags","","",79,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",80,null],[12,"cmsg_level","","",80,null],[12,"cmsg_type","","",80,null],[3,"termios","","",null,null],[12,"c_iflag","","",81,null],[12,"c_oflag","","",81,null],[12,"c_cflag","","",81,null],[12,"c_lflag","","",81,null],[12,"c_line","","",81,null],[12,"c_cc","","",81,null],[12,"c_ispeed","","",81,null],[12,"c_ospeed","","",81,null],[3,"flock","","",null,null],[12,"l_type","","",82,null],[12,"l_whence","","",82,null],[12,"l_start","","",82,null],[12,"l_len","","",82,null],[12,"l_pid","","",82,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",83,null],[12,"loads","","",83,null],[12,"totalram","","",83,null],[12,"freeram","","",83,null],[12,"sharedram","","",83,null],[12,"bufferram","","",83,null],[12,"totalswap","","",83,null],[12,"freeswap","","",83,null],[12,"procs","","",83,null],[12,"pad","","",83,null],[12,"totalhigh","","",83,null],[12,"freehigh","","",83,null],[12,"mem_unit","","",83,null],[12,"_f","","",83,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",84,null],[12,"msg_stime","","",84,null],[12,"msg_rtime","","",84,null],[12,"msg_ctime","","",84,null],[12,"msg_qnum","","",84,null],[12,"msg_qbytes","","",84,null],[12,"msg_lspid","","",84,null],[12,"msg_lrpid","","",84,null],[3,"stat","","",null,null],[12,"st_dev","","",85,null],[12,"st_ino","","",85,null],[12,"st_nlink","","",85,null],[12,"st_mode","","",85,null],[12,"st_uid","","",85,null],[12,"st_gid","","",85,null],[12,"st_rdev","","",85,null],[12,"st_size","","",85,null],[12,"st_blksize","","",85,null],[12,"st_blocks","","",85,null],[12,"st_atime","","",85,null],[12,"st_atime_nsec","","",85,null],[12,"st_mtime","","",85,null],[12,"st_mtime_nsec","","",85,null],[12,"st_ctime","","",85,null],[12,"st_ctime_nsec","","",85,null],[3,"stat64","","",null,null],[12,"st_dev","","",86,null],[12,"st_ino","","",86,null],[12,"st_nlink","","",86,null],[12,"st_mode","","",86,null],[12,"st_uid","","",86,null],[12,"st_gid","","",86,null],[12,"st_rdev","","",86,null],[12,"st_size","","",86,null],[12,"st_blksize","","",86,null],[12,"st_blocks","","",86,null],[12,"st_atime","","",86,null],[12,"st_atime_nsec","","",86,null],[12,"st_mtime","","",86,null],[12,"st_mtime_nsec","","",86,null],[12,"st_ctime","","",86,null],[12,"st_ctime_nsec","","",86,null],[3,"statfs64","","",null,null],[12,"f_type","","",87,null],[12,"f_bsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_fsid","","",87,null],[12,"f_namelen","","",87,null],[12,"f_frsize","","",87,null],[12,"f_flags","","",87,null],[12,"f_spare","","",87,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",88,null],[12,"f_frsize","","",88,null],[12,"f_blocks","","",88,null],[12,"f_bfree","","",88,null],[12,"f_bavail","","",88,null],[12,"f_files","","",88,null],[12,"f_ffree","","",88,null],[12,"f_favail","","",88,null],[12,"f_fsid","","",88,null],[12,"f_flag","","",88,null],[12,"f_namemax","","",88,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",89,null],[12,"exponent","","",89,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",90,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",91,null],[12,"swd","","",91,null],[12,"ftw","","",91,null],[12,"fop","","",91,null],[12,"rip","","",91,null],[12,"rdp","","",91,null],[12,"mxcsr","","",91,null],[12,"mxcr_mask","","",91,null],[12,"_st","","",91,null],[12,"_xmm","","",91,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",92,null],[12,"swd","","",92,null],[12,"ftw","","",92,null],[12,"fop","","",92,null],[12,"rip","","",92,null],[12,"rdp","","",92,null],[12,"mxcsr","","",92,null],[12,"mxcr_mask","","",92,null],[12,"st_space","","",92,null],[12,"xmm_space","","",92,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",93,null],[12,"r14","","",93,null],[12,"r13","","",93,null],[12,"r12","","",93,null],[12,"rbp","","",93,null],[12,"rbx","","",93,null],[12,"r11","","",93,null],[12,"r10","","",93,null],[12,"r9","","",93,null],[12,"r8","","",93,null],[12,"rax","","",93,null],[12,"rcx","","",93,null],[12,"rdx","","",93,null],[12,"rsi","","",93,null],[12,"rdi","","",93,null],[12,"orig_rax","","",93,null],[12,"rip","","",93,null],[12,"cs","","",93,null],[12,"eflags","","",93,null],[12,"rsp","","",93,null],[12,"ss","","",93,null],[12,"fs_base","","",93,null],[12,"gs_base","","",93,null],[12,"ds","","",93,null],[12,"es","","",93,null],[12,"fs","","",93,null],[12,"gs","","",93,null],[3,"user","","",null,null],[12,"regs","","",94,null],[12,"u_fpvalid","","",94,null],[12,"i387","","",94,null],[12,"u_tsize","","",94,null],[12,"u_dsize","","",94,null],[12,"u_ssize","","",94,null],[12,"start_code","","",94,null],[12,"start_stack","","",94,null],[12,"signal","","",94,null],[12,"u_ar0","","",94,null],[12,"u_fpstate","","",94,null],[12,"magic","","",94,null],[12,"u_comm","","",94,null],[12,"u_debugreg","","",94,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",95,null],[12,"fpregs","","",95,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",96,null],[12,"uc_link","","",96,null],[12,"uc_stack","","",96,null],[12,"uc_mcontext","","",96,null],[12,"uc_sigmask","","",96,null],[3,"ipc_perm","","",null,null],[12,"__key","","",97,null],[12,"uid","","",97,null],[12,"gid","","",97,null],[12,"cuid","","",97,null],[12,"cgid","","",97,null],[12,"mode","","",97,null],[12,"__seq","","",97,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",98,null],[12,"shm_segsz","","",98,null],[12,"shm_atime","","",98,null],[12,"shm_dtime","","",98,null],[12,"shm_ctime","","",98,null],[12,"shm_cpid","","",98,null],[12,"shm_lpid","","",98,null],[12,"shm_nattch","","",98,null],[3,"termios2","","",null,null],[12,"c_iflag","","",99,null],[12,"c_oflag","","",99,null],[12,"c_cflag","","",99,null],[12,"c_lflag","","",99,null],[12,"c_line","","",99,null],[12,"c_cc","","",99,null],[12,"c_ispeed","","",99,null],[12,"c_ospeed","","",99,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WSTOPSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFCONTINUED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WIFSIGNALED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WTERMSIG","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WIFEXITED","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"WEXITSTATUS","","",null,{"i":[{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"WCOREDUMP","","",null,{"i":[{"n":"c_int"}],"o":{"n":"bool"}}],[5,"QCMD","","",null,{"i":[{"n":"c_int"},{"n":"c_int"}],"o":{"n":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"i":[{"n":"usize"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"CPU_EQUAL","","",null,{"i":[{"n":"cpu_set_t"},{"n":"cpu_set_t"}],"o":{"n":"bool"}}],[5,"major","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"minor","","",null,{"i":[{"n":"dev_t"}],"o":{"n":"c_uint"}}],[5,"makedev","","",null,{"i":[{"n":"c_uint"},{"n":"c_uint"}],"o":{"n":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"stat"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"stat64"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"statfs64"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"statvfs64"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"pthread_attr_t"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"_libc_fpxreg"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"_libc_xmmreg"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"_libc_fpstate"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"user_fpregs_struct"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"user_regs_struct"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"user"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"mcontext_t"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"ucontext_t"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"ipc_perm"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"shmid_ds"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"termios2"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"sigset_t"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"sysinfo"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"msqid_ds"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"aiocb"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"__exit_status"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"__timeval"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"utmpx"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"sigaction"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"stack_t"}}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"siginfo_t"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"glob64_t"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"statfs"}}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"msghdr"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"cmsghdr"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"termios"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"flock"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"sem_t"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"dirent"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"dirent64"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"rlimit64"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"glob_t"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"ifaddrs"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"pthread_mutex_t"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlock_t"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"pthread_mutexattr_t"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"pthread_rwlockattr_t"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"pthread_cond_t"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"pthread_condattr_t"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"passwd"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"spwd"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"statvfs"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"dqblk"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"signalfd_siginfo"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"itimerspec"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"fsid_t"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"mq_attr"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"cpu_set_t"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"if_nameindex"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"msginfo"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"mmsghdr"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"sembuf"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"input_event"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"input_id"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"input_absinfo"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"input_keymap_entry"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"input_mask"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"ff_replay"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"ff_trigger"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"ff_envelope"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"ff_constant_effect"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"ff_ramp_effect"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"ff_condition_effect"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"ff_periodic_effect"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"ff_rumble_effect"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"ff_effect"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"dl_phdr_info"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"elf32_phdr"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"elf64_phdr"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"ucred"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"mntent"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"sockaddr"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in6"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"sockaddr_un"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"sockaddr_storage"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"addrinfo"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"sockaddr_nl"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"sockaddr_ll"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"fd_set"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"sched_param"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"dl_info"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"epoll_event"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"utsname"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"lconv"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"sigevent"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"utimbuf"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"timeval"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"rlimit"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"rusage"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"in_addr"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"in6_addr"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"ip_mreq"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"ipv6_mreq"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"hostent"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"iovec"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"pollfd"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"winsize"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"linger"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"sigval"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"itimerval"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"tms"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"servent"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"o":{"n":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"i":[{"n":"m"}],"o":{"g":["setloggererror"],"n":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"i":[{"n":"m"}],"o":{"g":["setloggererror"],"n":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"o":{"g":["box","shutdownloggererror"],"n":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"o":{"g":["shutdownloggererror"],"n":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"i":[{"n":"self"},{"n":"logmetadata"}],"o":{"n":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"i":[{"n":"self"},{"n":"logrecord"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"loglevel"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"n":"ordering"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["loglevel"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"o":{"n":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"i":[{"n":"self"}],"o":{"n":"loglevelfilter"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"loglevelfilter"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"loglevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"loglevelfilter"}],"o":{"n":"ordering"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"g":["loglevelfilter"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"o":{"n":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"i":[{"n":"self"}],"o":{"g":["loglevel"],"n":"option"}}],[11,"args","","The message body.",3,{"i":[{"n":"self"}],"o":{"n":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"i":[{"n":"self"}],"o":{"n":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"i":[{"n":"self"}],"o":{"n":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"i":[{"n":"self"}],"o":{"n":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"level","","The verbosity level of the message.",4,{"i":[{"n":"self"}],"o":{"n":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"loglocation"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"module_path","","The module path of the message.",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"file","","The source file containing the message.",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"line","","The line containing the message.",5,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"i":[{"n":"self"}],"o":{"n":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"i":[{"n":"self"},{"n":"loglevelfilter"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",7,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",null,null],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",null,null],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",null,null]],"paths":[]};
searchIndex["mdbook"] = {"doc":"mdBook","items":[[4,"BookItem","mdbook","Enum representing any type of item which can be added to a book.",null,null],[13,"Chapter","","A nested chapter.",0,null],[13,"Separator","","A section separator.",0,null],[0,"preprocess","","Book preprocessing.",null,null],[3,"LinkPreprocessor","mdbook::preprocess","A preprocessor for expanding the `{{# playpen}}` and `{{# include}}`  helpers in a chapter.",null,null],[3,"PreprocessorContext","","Extra information for a `Preprocessor` to give them more context when  processing a book.",null,null],[12,"root","","The location of the book directory on disk.",1,null],[12,"config","","The book configuration (`book.toml`).",1,null],[11,"new","","Create a new `LinkPreprocessor`.",2,{"o":{"n":"self"}}],[11,"name","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"run","","",2,{"i":[{"n":"self"},{"n":"preprocessorcontext"},{"n":"book"}],"o":{"n":"result"}}],[8,"Preprocessor","","An operation which is run immediately after loading a book into memory and  before it gets rendered.",null,null],[10,"name","","Get the `Preprocessor`'s name.",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[10,"run","","Run this `Preprocessor`, allowing it to update the book before it is given to a renderer.",3,{"i":[{"n":"self"},{"n":"preprocessorcontext"},{"n":"book"}],"o":{"n":"result"}}],[0,"book","mdbook","The internal representation of a book and infrastructure for loading it from disk and building it.",null,null],[3,"Book","mdbook::book","A dumb tree structure representing a book.",null,null],[3,"BookItems","","A depth-first iterator over the items in a book.",null,null],[3,"Chapter","","The representation of a \"chapter\", usually mapping to a single file on disk however it may contain multiple sub-chapters.",null,null],[12,"name","","The chapter's name.",4,null],[12,"content","","The chapter's contents.",4,null],[12,"number","","The chapter's section number, if it has one.",4,null],[12,"sub_items","","Nested items.",4,null],[12,"path","","The chapter's location, relative to the `SUMMARY.md` file.",4,null],[3,"Link","","A struct representing an entry in the `SUMMARY.md`, possibly with nested entries.",null,null],[12,"name","","The name of the chapter.",5,null],[12,"location","","The location of the chapter's source file, taking the book's `src` directory as the root.",5,null],[12,"number","","The section number, if this chapter is in the numbered section.",5,null],[12,"nested_items","","Any nested items this chapter may contain.",5,null],[3,"SectionNumber","","A section number like \"1.2.3\", basically just a newtype'd `Vec<u32>` with a pretty `Display` impl.",null,null],[12,"0","","",6,null],[3,"Summary","","The parsed `SUMMARY.md`, specifying how the book should be laid out.",null,null],[12,"title","","An optional title for the `SUMMARY.md`, currently just ignored.",7,null],[12,"prefix_chapters","","Chapters before the main text (e.g. an introduction).",7,null],[12,"numbered_chapters","","The main chapters in the document.",7,null],[12,"suffix_chapters","","Items which come after the main document (e.g. a conclusion).",7,null],[3,"BookBuilder","","A helper for setting up a new book and its directory structure.",null,null],[3,"MDBook","","The object used to manage and build a book.",null,null],[12,"root","","The book's root directory.",8,null],[12,"config","","The configuration used to tweak now a book is built.",8,null],[12,"book","","A representation of the book's contents in memory.",8,null],[4,"BookItem","","Enum representing any type of item which can be added to a book.",null,null],[13,"Chapter","","A nested chapter.",0,null],[13,"Separator","","A section separator.",0,null],[4,"SummaryItem","","An item in `SUMMARY.md` which could be either a separator or a `Link`.",null,null],[13,"Link","","A link to a chapter.",9,null],[13,"Separator","","A separator (`---`).",9,null],[5,"load_book","","Load a book into memory from its `src/` directory.",null,{"i":[{"n":"p"},{"n":"buildconfig"}],"o":{"g":["book"],"n":"result"}}],[5,"parse_summary","","Parse the text from a `SUMMARY.md` file into a sort of \"recipe\" to be used when loading a book from disk.",null,{"i":[{"n":"str"}],"o":{"g":["summary"],"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"summary"}}],[11,"default","","",7,{"o":{"n":"summary"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"summary"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"summary"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"link"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"link"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"link"}],"o":{"n":"bool"}}],[11,"new","","Create a new link with no nested items.",5,{"i":[{"n":"s"},{"n":"p"}],"o":{"n":"link"}}],[11,"default","","",5,{"o":{"n":"self"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"summaryitem"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"summaryitem"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"summaryitem"}],"o":{"n":"bool"}}],[11,"from","","",9,{"i":[{"n":"link"}],"o":{"n":"summaryitem"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"sectionnumber"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"sectionnumber"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"sectionnumber"}}],[11,"default","","",6,{"o":{"n":"sectionnumber"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"from_iter","","",6,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"book"}}],[11,"default","","",10,{"o":{"n":"book"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"book"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"book"}],"o":{"n":"bool"}}],[11,"new","","Create an empty book.",10,{"o":{"n":"self"}}],[11,"iter","","Get a depth-first iterator over the items in the book.",10,{"i":[{"n":"self"}],"o":{"n":"bookitems"}}],[11,"for_each_mut","","Recursively apply a closure to each item in the book, allowing you to mutate them.",10,{"i":[{"n":"self"},{"n":"f"}]}],[11,"fmt","mdbook","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"bookitem"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"bookitem"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"bookitem"}],"o":{"n":"bool"}}],[11,"fmt","mdbook::book","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"chapter"}}],[11,"default","","",4,{"o":{"n":"chapter"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"chapter"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"chapter"}],"o":{"n":"bool"}}],[11,"new","","Create a new chapter with the provided content.",4,{"i":[{"n":"str"},{"n":"string"},{"n":"p"}],"o":{"n":"chapter"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"bookbuilder"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"bookbuilder"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"bookbuilder"}],"o":{"n":"bool"}}],[11,"new","","Create a new `BookBuilder` which will generate a book in the provided root directory.",12,{"i":[{"n":"p"}],"o":{"n":"bookbuilder"}}],[11,"with_config","","Set the `Config` to be used.",12,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"bookbuilder"}}],[11,"config","","Get the config used by the `BookBuilder`.",12,{"i":[{"n":"self"}],"o":{"n":"config"}}],[11,"copy_theme","","Should the theme be copied into the generated book (so users can tweak it)?",12,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bookbuilder"}}],[11,"create_gitignore","","Should we create a `.gitignore` file?",12,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bookbuilder"}}],[11,"build","","Generate the actual book. This will:",12,{"i":[{"n":"self"}],"o":{"g":["mdbook"],"n":"result"}}],[11,"load","","Load a book from its root directory on disk.",8,{"i":[{"n":"p"}],"o":{"g":["mdbook"],"n":"result"}}],[11,"load_with_config","","Load a book from its root directory using a custom config.",8,{"i":[{"n":"p"},{"n":"config"}],"o":{"g":["mdbook"],"n":"result"}}],[11,"iter","","Returns a flat depth-first iterator over the elements of the book, it returns an BookItem enum: `(section: String, bookitem: &BookItem)`",8,{"i":[{"n":"self"}],"o":{"n":"bookitems"}}],[11,"init","","`init()` gives you a `BookBuilder` which you can use to setup a new book and its accompanying directory structure.",8,{"i":[{"n":"p"}],"o":{"n":"bookbuilder"}}],[11,"build","","Tells the renderer to build our book and put it in the build directory.",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"with_renderer","","You can change the default renderer to another one by using this method. The only requirement is for your renderer to implement the `Renderer` trait",8,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"self"}}],[11,"with_preprecessor","","Register a `Preprocessor` to be used when rendering the book.",8,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"self"}}],[11,"test","","Run `rustdoc` tests on the book, linking against the provided libraries.",8,{"i":[{"n":"self"},{"g":["str"],"n":"vec"}],"o":{"n":"result"}}],[11,"build_dir_for","","The logic for determining where a backend should put its build artefacts.",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"pathbuf"}}],[11,"source_dir","","Get the directory containing this book's source files.",8,{"i":[{"n":"self"}],"o":{"n":"pathbuf"}}],[0,"config","mdbook","Mdbook's configuration system.",null,null],[3,"Config","mdbook::config","The overall configuration object for MDBook, essentially an in-memory representation of `book.toml`.",null,null],[12,"book","","Metadata about the book.",13,null],[12,"build","","Information about the build environment.",13,null],[3,"BookConfig","","Configuration options which are specific to the book and required for loading it from disk.",null,null],[12,"title","","The book's title.",14,null],[12,"authors","","The book's authors.",14,null],[12,"description","","An optional description for the book.",14,null],[12,"src","","Location of the book source relative to the book's root directory.",14,null],[12,"multilingual","","Does this book support more than one language?",14,null],[3,"BuildConfig","","Configuration for the build procedure.",null,null],[12,"build_dir","","Where to put built artefacts relative to the book's root directory.",15,null],[12,"create_missing","","Should non-existent markdown files specified in `SETTINGS.md` be created if they don't exist?",15,null],[12,"preprocess","","Which preprocessors should be applied",15,null],[3,"HtmlConfig","","Configuration for the HTML renderer.",null,null],[12,"theme","","The theme directory, if specified.",16,null],[12,"curly_quotes","","Use \"smart quotes\" instead of the usual `\"` character.",16,null],[12,"mathjax_support","","Should mathjax be enabled?",16,null],[12,"google_analytics","","An optional google analytics code.",16,null],[12,"additional_css","","Additional CSS stylesheets to include in the rendered page's `<head>`.",16,null],[12,"additional_js","","Additional JS scripts to include at the bottom of the rendered page's  `<body>`.",16,null],[12,"playpen","","Playpen settings.",16,null],[12,"no_section_label","","Should section labels be rendered?",16,null],[3,"Playpen","","Configuration for tweaking how the the HTML renderer handles the playpen.",null,null],[12,"editor","","The path to the editor to use. Defaults to the [Ace Editor].",17,null],[12,"editable","","Should playpen snippets be editable? Defaults to `false`.",17,null],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"config"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"bool"}}],[11,"from_str","","Load a `Config` from some string.",13,{"i":[{"n":"str"}],"o":{"g":["config"],"n":"result"}}],[11,"from_disk","","Load the configuration file from disk.",13,{"i":[{"n":"p"}],"o":{"g":["config"],"n":"result"}}],[11,"update_from_env","","Updates the `Config` from the available environment variables.",13,{"i":[{"n":"self"}]}],[11,"get","","Fetch an arbitrary item from the `Config` as a `toml::Value`.",13,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["value"],"n":"option"}}],[11,"get_mut","","Fetch a value from the `Config` so you can mutate it.",13,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["value"],"n":"option"}}],[11,"get_deserialized","","Convenience function to fetch a value from the config and deserialize it into some arbitrary type.",13,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"set","","Set a config key, clobbering any existing values along the way.",13,{"i":[{"n":"self"},{"n":"i"},{"n":"s"}],"o":{"n":"result"}}],[11,"default","","",13,{"o":{"n":"config"}}],[11,"deserialize","","",13,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"serialize","","",13,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"bookconfig"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"bookconfig"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"bookconfig"}],"o":{"n":"bool"}}],[11,"default","","",14,{"o":{"n":"bookconfig"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"buildconfig"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"buildconfig"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"buildconfig"}],"o":{"n":"bool"}}],[11,"default","","",15,{"o":{"n":"buildconfig"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"htmlconfig"}}],[11,"default","","",16,{"o":{"n":"htmlconfig"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"htmlconfig"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"htmlconfig"}],"o":{"n":"bool"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"playpen"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"playpen"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"playpen"}],"o":{"n":"bool"}}],[11,"default","","",17,{"o":{"n":"playpen"}}],[0,"renderer","mdbook","`mdbook`'s low level rendering interface.",null,null],[3,"HtmlHandlebars","mdbook::renderer","",null,null],[3,"RenderContext","","The context provided to all renderers.",null,null],[12,"version","","Which version of `mdbook` did this come from (as written in `mdbook`'s `Cargo.toml`). Useful if you know the renderer is only compatible with certain versions of `mdbook`.",18,null],[12,"root","","The book's root directory.",18,null],[12,"book","","A loaded representation of the book itself.",18,null],[12,"config","","The loaded configuration file.",18,null],[12,"destination","","Where the renderer must put any build artefacts generated. To allow renderers to cache intermediate results, this directory is not guaranteed to be empty or even exist.",18,null],[3,"CmdRenderer","","A generic renderer which will shell out to an arbitrary executable.",null,null],[11,"default","","",19,{"o":{"n":"htmlhandlebars"}}],[11,"new","","",19,{"o":{"n":"self"}}],[11,"name","","",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"render","","",19,{"i":[{"n":"self"},{"n":"rendercontext"}],"o":{"n":"result"}}],[8,"Renderer","","An arbitrary `mdbook` backend.",null,null],[10,"name","","The `Renderer`'s name.",20,{"i":[{"n":"self"}],"o":{"n":"str"}}],[10,"render","","Invoke the `Renderer`, passing in all the necessary information for describing a book.",20,{"i":[{"n":"self"},{"n":"rendercontext"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"rendercontext"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"rendercontext"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"rendercontext"}],"o":{"n":"bool"}}],[11,"source_dir","","Get the source directory's (absolute) path on disk.",18,{"i":[{"n":"self"}],"o":{"n":"pathbuf"}}],[11,"from_json","","Load a `RenderContext` from its JSON representation.",18,{"i":[{"n":"r"}],"o":{"g":["rendercontext"],"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"cmdrenderer"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"cmdrenderer"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"cmdrenderer"}],"o":{"n":"bool"}}],[11,"new","","Create a new `CmdRenderer` which will invoke the provided `cmd` string.",21,{"i":[{"n":"string"},{"n":"string"}],"o":{"n":"cmdrenderer"}}],[11,"name","","",21,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"render","","",21,{"i":[{"n":"self"},{"n":"rendercontext"}],"o":{"n":"result"}}],[0,"theme","mdbook","",null,null],[3,"Theme","mdbook::theme","The `Theme` struct should be used instead of the static variables because the `new()` method will look if the user has a theme directory in his source folder and use the users theme instead of the default.",null,null],[12,"index","","",22,null],[12,"header","","",22,null],[12,"css","","",22,null],[12,"favicon","","",22,null],[12,"js","","",22,null],[12,"highlight_css","","",22,null],[12,"tomorrow_night_css","","",22,null],[12,"ayu_highlight_css","","",22,null],[12,"highlight_js","","",22,null],[12,"clipboard_js","","",22,null],[0,"playpen_editor","","",null,null],[3,"PlaypenEditor","mdbook::theme::playpen_editor","Integration of a JavaScript editor for playpens. Uses the Ace editor: https://ace.c9.io/. The Ace editor itself, the mode, and the theme files are the generated minified no conflict versions.",null,null],[12,"js","","",23,null],[12,"ace_js","","",23,null],[12,"mode_rust_js","","",23,null],[12,"theme_dawn_js","","",23,null],[12,"theme_tomorrow_night_js","","",23,null],[7,"JS","","",null,null],[7,"ACE_JS","","",null,null],[7,"MODE_RUST_JS","","",null,null],[7,"THEME_DAWN_JS","","",null,null],[7,"THEME_TOMORROW_NIGHT_JS","","",null,null],[11,"new","","",23,{"i":[{"n":"path"}],"o":{"n":"self"}}],[7,"INDEX","mdbook::theme","",null,null],[7,"HEADER","","",null,null],[7,"CSS","","",null,null],[7,"FAVICON","","",null,null],[7,"JS","","",null,null],[7,"HIGHLIGHT_JS","","",null,null],[7,"TOMORROW_NIGHT_CSS","","",null,null],[7,"HIGHLIGHT_CSS","","",null,null],[7,"AYU_HIGHLIGHT_CSS","","",null,null],[7,"CLIPBOARD_JS","","",null,null],[7,"FONT_AWESOME","","",null,null],[7,"FONT_AWESOME_EOT","","",null,null],[7,"FONT_AWESOME_SVG","","",null,null],[7,"FONT_AWESOME_TTF","","",null,null],[7,"FONT_AWESOME_WOFF","","",null,null],[7,"FONT_AWESOME_WOFF2","","",null,null],[7,"FONT_AWESOME_OTF","","",null,null],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"theme"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"theme"}],"o":{"n":"bool"}}],[11,"new","","",22,{"i":[{"n":"p"}],"o":{"n":"self"}}],[11,"default","","",22,{"o":{"n":"theme"}}],[0,"utils","mdbook","",null,null],[5,"take_lines","mdbook::utils","Take a range of lines from a string.",null,{"i":[{"n":"str"},{"n":"r"}],"o":{"n":"string"}}],[5,"render_markdown","","Wrapper around the pulldown-cmark parser for rendering markdown to HTML.",null,{"i":[{"n":"str"},{"n":"bool"}],"o":{"n":"string"}}],[5,"log_backtrace","","Prints a \"backtrace\" of some `Error`.",null,{"i":[{"n":"error"}]}],[0,"fs","","",null,null],[5,"file_to_string","mdbook::utils::fs","Takes a path to a file and try to read the file into a String",null,{"i":[{"n":"p"}],"o":{"g":["string"],"n":"result"}}],[5,"path_to_root","","Takes a path and returns a path containing just enough `../` to point to the root of the given path.",null,{"i":[{"n":"p"}],"o":{"n":"string"}}],[5,"create_file","","This function creates a file and returns it. But before creating the file it checks every directory in the path to see if it exists, and if it does not it will be created.",null,{"i":[{"n":"path"}],"o":{"g":["file"],"n":"result"}}],[5,"remove_dir_content","","Removes all the content of a directory but not the directory itself",null,{"i":[{"n":"path"}],"o":{"n":"result"}}],[5,"copy_files_except_ext","","Copies all files of a directory to another one except the files with the extensions given in the `ext_blacklist` array",null,null],[8,"RangeArgument","mdbook::utils","",null,null],[10,"start","","",24,{"i":[{"n":"self"}],"o":{"n":"option"}}],[10,"end","","",24,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"errors","mdbook","The error types used through out this crate.",null,null],[3,"Error","mdbook::errors","The Error type.",null,null],[12,"0","","The kind of the error.",25,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",26,null],[13,"TomlQuery","","A TomlQuery error",26,null],[13,"Io","","A wrapper around `std::io::Error`",26,null],[13,"HandlebarsRender","","Handlebars rendering failed",26,null],[13,"HandlebarsTemplate","","Unable to parse the template",26,null],[13,"Utf8","","Invalid UTF-8",26,null],[13,"Subprocess","","A subprocess exited with an unsuccessful return code.",26,null],[13,"ParseError","","An error was encountered while parsing the `SUMMARY.md` file.",26,null],[13,"ReservedFilenameError","","The user tried to use a reserved filename.",26,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",27,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",25,{"i":[{"n":"errorkind"},{"n":"state"}],"o":{"n":"error"}}],[11,"from_kind","","",25,null],[11,"with_chain","","",25,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"self"}}],[11,"kind","","",25,null],[11,"iter","","",25,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"chain_err","","",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"backtrace","","",25,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"extract_backtrace","","",25,{"i":[{"n":"error"}],"o":{"g":["arc"],"n":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",25,{"i":[{"n":"errorkind"}],"o":{"n":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",25,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",25,{"i":[{"g":["error"],"n":"box"},{"n":"k"}],"o":{"n":"error"}}],[11,"kind","","Returns the kind of the error.",25,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"iter","","Iterates over the error chain.",25,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",25,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"error"}}],[11,"description","","",25,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",25,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",25,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",25,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",25,{"i":[{"n":"rendererror"}],"o":{"n":"self"}}],[11,"from","","",25,{"i":[{"g":["templateerror"],"n":"box"}],"o":{"n":"self"}}],[11,"from","","",25,{"i":[{"n":"fromutf8error"}],"o":{"n":"self"}}],[11,"from","","",25,{"i":[{"n":"errorkind"}],"o":{"n":"self"}}],[11,"from","","",25,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",25,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"deref","","",25,null],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","A string describing the error kind.",26,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",26,{"i":[{"n":"errorkind"}],"o":{"n":"self"}}],[11,"from","","",26,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",26,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",26,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"from","","",25,{"i":[{"n":"templateerror"}],"o":{"n":"error"}}]],"paths":[[4,"BookItem"],[3,"PreprocessorContext"],[3,"LinkPreprocessor"],[8,"Preprocessor"],[3,"Chapter"],[3,"Link"],[3,"SectionNumber"],[3,"Summary"],[3,"MDBook"],[4,"SummaryItem"],[3,"Book"],[3,"BookItems"],[3,"BookBuilder"],[3,"Config"],[3,"BookConfig"],[3,"BuildConfig"],[3,"HtmlConfig"],[3,"Playpen"],[3,"RenderContext"],[3,"HtmlHandlebars"],[8,"Renderer"],[3,"CmdRenderer"],[3,"Theme"],[3,"PlaypenEditor"],[8,"RangeArgument"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"]]};
searchIndex["mdbook_epub"] = {"doc":"A `mdbook` backend for generating a book in the `EPUB` format.","items":[[3,"Generator","mdbook_epub","The actual EPUB book renderer.",null,null],[3,"Config","","The configuration struct used to tweak how an EPUB document is generated.",null,null],[12,"additional_css","","A list of additional stylesheets to include in the document.",0,null],[12,"use_default_css","","Should we use the default stylesheet (default: true)?",0,null],[5,"generate","","Generate an `EPUB` version of the provided book.",null,{"i":[{"n":"rendercontext"}],"o":{"g":["error"],"n":"result"}}],[5,"output_filename","","Calculate the output filename using the `mdbook` config.",null,{"i":[{"n":"path"},{"n":"mdconfig"}],"o":{"n":"pathbuf"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",1,{"i":[{"n":"rendercontext"}],"o":{"g":["generator","error"],"n":"result"}}],[11,"generate","","",1,{"i":[{"n":"self"},{"n":"w"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"config"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"bool"}}],[11,"from_render_context","","Get the `output.epub` table from the provided `book.toml` config, falling back to the default if",0,{"i":[{"n":"rendercontext"}],"o":{"g":["config","error"],"n":"result"}}],[11,"default","","",0,{"o":{"n":"config"}}],[17,"DEFAULT_CSS","","The default stylesheet used to make the rendered document pretty.",null,null],[17,"MDBOOK_VERSION","","The exact version of `mdbook` this crate is compiled against.",null,null]],"paths":[[3,"Config"],[3,"Generator"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",1,null],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",2,null]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["mime"] = {"doc":"Mime","items":[[3,"Mime","mime","Mime, or Media Type. Encapsulates common registers types.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[12,"2","","",0,null],[4,"TopLevel","","",null,null],[13,"Star","","",1,null],[13,"Text","","",1,null],[13,"Image","","",1,null],[13,"Audio","","",1,null],[13,"Video","","",1,null],[13,"Application","","",1,null],[13,"Multipart","","",1,null],[13,"Message","","",1,null],[13,"Model","","",1,null],[13,"Ext","","",1,null],[4,"SubLevel","","",null,null],[13,"Star","","",2,null],[13,"Plain","","",2,null],[13,"Html","","",2,null],[13,"Xml","","",2,null],[13,"Javascript","","",2,null],[13,"Css","","",2,null],[13,"EventStream","","",2,null],[13,"Json","","",2,null],[13,"WwwFormUrlEncoded","","",2,null],[13,"Msgpack","","",2,null],[13,"OctetStream","","",2,null],[13,"FormData","","",2,null],[13,"Png","","",2,null],[13,"Gif","","",2,null],[13,"Bmp","","",2,null],[13,"Jpeg","","",2,null],[13,"Mpeg","","",2,null],[13,"Mp4","","",2,null],[13,"Ogg","","",2,null],[13,"Ext","","",2,null],[4,"Attr","","",null,null],[13,"Charset","","",3,null],[13,"Boundary","","",3,null],[13,"Q","","",3,null],[13,"Ext","","",3,null],[4,"Value","","",null,null],[13,"Utf8","","",4,null],[13,"Ext","","",4,null],[6,"Param","","",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"mime"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"toplevel"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"as_str","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"toplevel"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"g":["toplevel"],"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"sublevel"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",2,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"le","","",2,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"gt","","",2,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"ge","","",2,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"as_str","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"sublevel"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",2,{"i":[{"n":"str"}],"o":{"g":["sublevel"],"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"attr"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"attr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"as_str","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"attr"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",3,{"i":[{"n":"str"}],"o":{"g":["attr"],"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"value"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"as_str","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"deref","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"g":["value"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_param","","",0,{"i":[{"n":"self"},{"n":"a"}],"o":{"g":["value"],"n":"option"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["mime"],"n":"result"}}],[14,"mime","","Easily create a Mime without having to import so many enums.",null,null]],"paths":[[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"]]};
searchIndex["mime_guess"] = {"doc":"Guessing of MIME types by file extension.","items":[[3,"Mime","mime_guess","Mime, or Media Type. Encapsulates common registers types.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[12,"2","","",0,null],[5,"guess_mime_type","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",null,{"i":[{"n":"p"}],"o":{"n":"mime"}}],[5,"guess_mime_type_opt","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",null,{"i":[{"n":"p"}],"o":{"g":["mime"],"n":"option"}}],[5,"get_mime_type","","Get the MIME type associated with a file extension.",null,{"i":[{"n":"str"}],"o":{"n":"mime"}}],[5,"get_mime_type_opt","","Get the MIME type associated with a file extension.",null,{"i":[{"n":"str"}],"o":{"g":["mime"],"n":"option"}}],[5,"get_mime_type_str","","Get the MIME type string associated with a file extension. Case-insensitive.",null,{"i":[{"n":"str"}],"o":{"g":["str"],"n":"option"}}],[5,"get_mime_extensions","","Get a list of known extensions for a given `Mime`. ",null,{"i":[{"n":"mime"}],"o":{"n":"option"}}],[5,"get_mime_extensions_str","","Get a list of known extensions for a MIME type string. ",null,{"i":[{"n":"str"}],"o":{"n":"option"}}],[5,"get_extensions","","Get the extensions for a given top-level and sub-level of a MIME type (`{toplevel}/{sublevel}`).",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"option"}}],[5,"octet_stream","","Get the MIME type for `application/octet-stream` (generic binary stream)",null,{"o":{"n":"mime"}}],[11,"get_param","","",0,{"i":[{"n":"self"},{"n":"a"}],"o":{"g":["value"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"mime"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"bool"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["mime"],"n":"result"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"mime"}],"o":{"n":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}]],"paths":[[3,"Mime"]]};
searchIndex["miniz_oxide"] = {"doc":"A pure rust replacement for the miniz DEFLATE/zlib encoder/decoder. The plan for this crate is to be used as a back-end for the flate2 crate and eventually remove the need to depend on a C library.","items":[[4,"MZFlush","miniz_oxide","A list of flush types.",null,null],[13,"None","","",0,null],[13,"Partial","","",0,null],[13,"Sync","","",0,null],[13,"Full","","",0,null],[13,"Finish","","",0,null],[13,"Block","","",0,null],[4,"MZStatus","","A list of miniz successful status codes.",null,null],[13,"Ok","","",1,null],[13,"StreamEnd","","",1,null],[13,"NeedDict","","",1,null],[4,"MZError","","A list of miniz failed status codes.",null,null],[13,"ErrNo","","",2,null],[13,"Stream","","",2,null],[13,"Data","","",2,null],[13,"Mem","","",2,null],[13,"Buf","","",2,null],[13,"Version","","",2,null],[13,"Param","","",2,null],[5,"mz_adler32_oxide","","",null,null],[0,"inflate","","This module contains functionality for decompression.",null,null],[4,"TINFLStatus","miniz_oxide::inflate","Return status codes.",null,null],[13,"FailedCannotMakeProgress","","More input data was expected, but the caller indicated that there was more data, so the input stream is likely truncated.",3,null],[13,"BadParam","","One or more of the input parameters were invalid.",3,null],[13,"Adler32Mismatch","","The decompression went fine, but the adler32 checksum did not match the one provided in the header.",3,null],[13,"Failed","","Failed to decompress due to invalid data.",3,null],[13,"Done","","Finished decomression without issues.",3,null],[13,"NeedsMoreInput","","The decompressor needs more input data to continue decompressing.",3,null],[13,"HasMoreOutput","","There is still pending data that didn't fit in the output buffer.",3,null],[5,"decompress_to_vec","","Decompress the deflate-encoded data in `input` to a vector.",null,null],[5,"decompress_to_vec_zlib","","Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.",null,null],[0,"core","","Streaming decompression functionality.",null,null],[3,"DecompressorOxide","miniz_oxide::inflate::core","Main decompression struct.",null,null],[5,"decompress","","Main decompression function. Keeps decompressing data from `in_buf` until the in_buf is emtpy, out_cur is full, the end of the deflate stream is hit, or there is an error in the deflate stream.",null,null],[0,"inflate_flags","","",null,null],[17,"TINFL_FLAG_PARSE_ZLIB_HEADER","miniz_oxide::inflate::core::inflate_flags","Should we try to parse a zlib header?",null,null],[17,"TINFL_FLAG_HAS_MORE_INPUT","","There is more input that hasn't been given to the decompressor yet.",null,null],[17,"TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","","The output buffer should not wrap around.",null,null],[17,"TINFL_FLAG_COMPUTE_ADLER32","","Should we calculate the adler32 checksum of the output data?",null,null],[17,"TINFL_LZ_DICT_SIZE","miniz_oxide::inflate::core","",null,null],[11,"new","","Create a new tinfl_decompressor with all fields set to 0.",4,{"o":{"n":"decompressoroxide"}}],[11,"default","","Create a new tinfl_decompressor with all fields set to 0.",4,{"o":{"n":"decompressoroxide"}}],[11,"init","","Set the current state to `Start`.",4,{"i":[{"n":"self"}]}],[11,"with_init_state_only","","Create a new decompressor with only the state field initialized.",4,{"o":{"n":"decompressoroxide"}}],[11,"adler32","","Returns the adler32 checksum of the currently decompressed data.",4,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"fmt","miniz_oxide::inflate","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"tinflstatus"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"tinflstatus"}],"o":{"n":"bool"}}],[11,"hash","","",3,null],[11,"from_i32","","",3,{"i":[{"n":"i32"}],"o":{"g":["tinflstatus"],"n":"option"}}],[0,"deflate","miniz_oxide","This module contains functionality for compression.",null,null],[4,"CompressionLevel","miniz_oxide::deflate","How much processing the compressor should do to compress the data. `NoCompression` and `Bestspeed` have special meanings, the other levels determine the number of checks for matches in the hash chains and whether to use lazy or greedy parsing.",null,null],[13,"NoCompression","","Don't do any compression, only output uncompressed blocks.",5,null],[13,"BestSpeed","","Fast compression. Uses a special compression routine that is optimized for speed.",5,null],[13,"BestCompression","","Slow/high compression. Do a lot of checks to try to find good matches.",5,null],[13,"UberCompression","","Even more checks, can be very slow.",5,null],[13,"DefaultLevel","","Default compromise between speed and compression.",5,null],[13,"DefaultCompression","","Use the default compression level.",5,null],[5,"compress_to_vec","","Compress the input data to a vector, using the specified compression level (0-10).",null,null],[5,"compress_to_vec_zlib","","Compress the input data to a vector, using the specified compression level (0-10), and with a zlib wrapper.",null,null],[0,"core","","Streaming compression functionality.",null,null],[3,"CompressorOxide","miniz_oxide::deflate::core","Main compression struct.",null,null],[3,"CallbackFunc","","Callback function and user used in `compress_to_output`.",null,null],[12,"put_buf_func","","",6,null],[12,"put_buf_user","","",6,null],[4,"CompressionStrategy","","Used to generate deflate flags with `create_comp_flags_from_zip_params`.",null,null],[13,"Default","","Don't use any of the special strategies.",7,null],[13,"Filtered","","Only use matches that are at least 5 bytes long.",7,null],[13,"HuffmanOnly","","Don't look for matches, only huffman encode the literals.",7,null],[13,"RLE","","Only look for matches with a distance of 1, i.e do run-length encoding only.",7,null],[13,"Fixed","","Only use static/fixed blocks. (Blocks using the default huffman codes specified in the deflate specification.)",7,null],[4,"TDEFLFlush","","A list of deflate flush types.",null,null],[13,"None","","",8,null],[13,"Sync","","",8,null],[13,"Full","","",8,null],[13,"Finish","","",8,null],[4,"TDEFLStatus","","Return status codes.",null,null],[13,"BadParam","","",9,null],[13,"PutBufFailed","","",9,null],[13,"Okay","","",9,null],[13,"Done","","",9,null],[5,"compress","","Main compression function. Puts output into buffer.",null,null],[5,"compress_to_output","","Main compression function. Callbacks output.",null,null],[5,"create_comp_flags_from_zip_params","","Create a set of compression flags using parameters used by zlib and other compressors.",null,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"u32"}}],[0,"deflate_flags","","",null,null],[17,"TDEFL_WRITE_ZLIB_HEADER","miniz_oxide::deflate::core::deflate_flags","Whether to use a zlib wrapper.",null,null],[17,"TDEFL_COMPUTE_ADLER32","","Should we compute the adler32 checksum.",null,null],[17,"TDEFL_GREEDY_PARSING_FLAG","","Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more bytes to check for better matches.)",null,null],[17,"TDEFL_NONDETERMINISTIC_PARSING_FLAG","","TODO",null,null],[17,"TDEFL_RLE_MATCHES","","Only look for matches with a distance of 0.",null,null],[17,"TDEFL_FILTER_MATCHES","","Only use matches that are at least 6 bytes long.",null,null],[17,"TDEFL_FORCE_ALL_STATIC_BLOCKS","","Force the compressor to only output static blocks. (Blocks using the default huffman codes specified in the deflate specification.)",null,null],[17,"TDEFL_FORCE_ALL_RAW_BLOCKS","","Force the compressor to only output raw/uncompressed blocks.",null,null],[6,"PutBufFuncPtrNotNull","miniz_oxide::deflate::core","Compression callback function type.",null,null],[6,"PutBufFuncPtr","","`Option` alias for compression callback function type.",null,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"compressionstrategy"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"compressionstrategy"}],"o":{"n":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"tdeflflush"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"tdeflflush"}],"o":{"n":"bool"}}],[11,"hash","","",8,null],[11,"from","","",8,{"i":[{"n":"mzflush"}],"o":{"n":"self"}}],[11,"new","","",8,{"i":[{"n":"c_int"}],"o":{"g":["mzerror"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"tdeflstatus"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"tdeflstatus"}],"o":{"n":"bool"}}],[11,"hash","","",9,null],[11,"new","","",10,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"adler32","","",10,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"prev_return_status","","",10,{"i":[{"n":"self"}],"o":{"n":"tdeflstatus"}}],[11,"flags","","",10,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"callbackfunc"}}],[11,"fmt","miniz_oxide::deflate","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"compressionlevel"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"compressionlevel"}],"o":{"n":"bool"}}],[11,"hash","","",5,null],[6,"MZResult","miniz_oxide","`Result` alias for all miniz status codes both successful and failed.",null,null],[17,"MZ_ADLER32_INIT","","",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"mzflush"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"mzflush"}],"o":{"n":"bool"}}],[11,"hash","","",0,null],[11,"new","","Create a Flush instance from an integer value.",0,{"i":[{"n":"c_int"}],"o":{"g":["mzerror"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"mzstatus"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"mzstatus"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"mzerror"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"mzerror"}],"o":{"n":"bool"}}],[11,"hash","","",2,null]],"paths":[[4,"MZFlush"],[4,"MZStatus"],[4,"MZError"],[4,"TINFLStatus"],[3,"DecompressorOxide"],[4,"CompressionLevel"],[3,"CallbackFunc"],[4,"CompressionStrategy"],[4,"TDEFLFlush"],[4,"TDEFLStatus"],[3,"CompressorOxide"]]};
searchIndex["miniz_oxide_c_api"] = {"doc":"","items":[[5,"mz_adler32_oxide","miniz_oxide_c_api","",null,null],[3,"tinfl_decompressor","","Main decompression struct.",null,null],[3,"tdefl_compressor","","Main compression struct. Not the same as `CompressorOxide`",null,null],[12,"inner","","",0,null],[12,"callback","","",0,null],[5,"tinfl_decompress","","",null,null],[5,"tinfl_decompress_mem_to_heap","","Decompress data from `p_src_buf` to a continuously growing heap-allocated buffer.",null,null],[5,"tinfl_decompress_mem_to_mem","","",null,null],[5,"tdefl_compress","","",null,null],[5,"tdefl_compress_buffer","","",null,null],[5,"tdefl_compress_mem_to_heap","","",null,null],[5,"tdefl_compress_mem_to_mem","","",null,null],[5,"tdefl_compress_mem_to_output","","",null,null],[5,"tdefl_create_comp_flags_from_zip_params","","",null,{"i":[{"n":"c_int"},{"n":"c_int"},{"n":"c_int"}],"o":{"n":"c_uint"}}],[5,"tdefl_get_prev_return_status","","",null,{"i":[{"g":["tdefl_compressor"],"n":"option"}],"o":{"n":"tdeflstatus"}}],[5,"tdefl_init","","",null,null],[5,"tdefl_get_adler32","","",null,{"i":[{"g":["tdefl_compressor"],"n":"option"}],"o":{"n":"c_uint"}}],[5,"mz_crc32_oxide","","",null,null],[5,"miniz_def_alloc_func","","",null,null],[5,"miniz_def_free_func","","",null,null],[5,"miniz_def_realloc_func","","",null,null],[5,"mz_adler32","","",null,null],[5,"mz_crc32","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_deflateInit","","",null,null],[5,"mz_compress","","",null,null],[5,"mz_compress2","","",null,null],[5,"mz_deflateBound","","",null,null],[5,"mz_inflateInit","","",null,null],[5,"mz_uncompress","","",null,null],[5,"mz_compressBound","","",null,{"i":[{"n":"c_ulong"}],"o":{"n":"c_ulong"}}],[0,"lib_oxide","","This module mainly contains functionality replicating the miniz higher level API.",null,null],[3,"mz_stream","miniz_oxide_c_api::lib_oxide","Inner stream state containing pointers to the used buffers and internal state.",null,null],[12,"next_in","","Pointer to the current start of the input buffer.",1,null],[12,"avail_in","","Length of the input buffer.",1,null],[12,"total_in","","The total number of input bytes consumed so far.",1,null],[12,"next_out","","Pointer to the current start of the output buffer.",1,null],[12,"avail_out","","Space in the output buffer.",1,null],[12,"total_out","","The total number of bytes output so far.",1,null],[12,"msg","","",1,null],[12,"state","","Unused",1,null],[12,"zalloc","","Allocation function to use for allocating the internal compressor/decompressor. Uses `mz_default_alloc_func` if set to `None`.",1,null],[12,"zfree","","Free function to use for allocating the internal compressor/decompressor. Uses `mz_default_free_func` if `None`.",1,null],[12,"opaque","","Extra data to provide the allocation/deallocation functions. (Not used for the default ones)",1,null],[12,"data_type","","",1,null],[12,"adler","","Adler32 checksum of the data that has been compressed or uncompressed.",1,null],[12,"reserved","","Reserved",1,null],[3,"BoxedState","","Wrapper for a heap-allocated compressor/decompressor that frees the stucture on drop.",null,null],[12,"inner","","",2,null],[12,"alloc","","",2,null],[12,"free","","",2,null],[12,"opaque","","",2,null],[3,"StreamOxide","","",null,null],[12,"next_in","","",3,null],[12,"total_in","","",3,null],[12,"next_out","","",3,null],[12,"total_out","","",3,null],[12,"state","","",3,null],[12,"adler","","",3,null],[3,"inflate_state","","",null,null],[12,"m_decomp","","",4,null],[12,"m_dict_ofs","","",4,null],[12,"m_dict_avail","","",4,null],[12,"m_first_call","","",4,null],[12,"m_has_flushed","","",4,null],[12,"m_window_bits","","",4,null],[12,"m_dict","","",4,null],[12,"m_last_status","","",4,null],[4,"mz_internal_state","","Unused opaque pointer.",null,null],[5,"def_alloc_func","","Default allocation function using `malloc`.",null,null],[5,"def_free_func","","Default free function using `free`.",null,null],[5,"mz_compress2_oxide","","",null,{"i":[{"n":"streamoxide"},{"n":"c_int"},{"n":"c_ulong"}],"o":{"n":"mzresult"}}],[5,"mz_deflate_init_oxide","","Initialize the wrapped compressor with the requested level (0-10) and default settings.",null,{"i":[{"n":"streamoxide"},{"n":"c_int"}],"o":{"n":"mzresult"}}],[5,"mz_deflate_init2_oxide","","Initialize the compressor with the requested parameters.",null,{"i":[{"n":"streamoxide"},{"n":"c_int"},{"n":"c_int"},{"n":"c_int"},{"n":"c_int"},{"n":"c_int"}],"o":{"n":"mzresult"}}],[5,"mz_deflate_oxide","","",null,{"i":[{"n":"streamoxide"},{"n":"c_int"}],"o":{"n":"mzresult"}}],[5,"mz_deflate_end_oxide","","Free the inner compression state.",null,{"i":[{"n":"streamoxide"}],"o":{"n":"mzresult"}}],[5,"mz_deflate_reset_oxide","","Reset the compressor, so it can be used to compress a new set of data.",null,{"i":[{"n":"streamoxide"}],"o":{"n":"mzresult"}}],[5,"mz_inflate_init_oxide","","",null,{"i":[{"n":"streamoxide"}],"o":{"n":"mzresult"}}],[5,"mz_inflate_init2_oxide","","",null,{"i":[{"n":"streamoxide"},{"n":"c_int"}],"o":{"n":"mzresult"}}],[5,"mz_inflate_oxide","","",null,{"i":[{"n":"streamoxide"},{"n":"c_int"}],"o":{"n":"mzresult"}}],[5,"mz_uncompress2_oxide","","",null,{"i":[{"n":"streamoxide"},{"n":"c_ulong"}],"o":{"n":"mzresult"}}],[5,"mz_inflate_end_oxide","","",null,{"i":[{"n":"streamoxide"}],"o":{"n":"mzresult"}}],[0,"return_status","","",null,null],[17,"MZ_ERRNO","miniz_oxide_c_api::lib_oxide::return_status","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[6,"mz_alloc_func","miniz_oxide_c_api::lib_oxide","Signature of function used to allocate the compressor/decompressor structs.",null,null],[6,"mz_free_func","","Signature of function used to free the compressor/decompressor structs.",null,null],[6,"MZResult","","",null,null],[8,"StateType","","Trait used for states that can be carried by BoxedState.",null,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",1,{"o":{"n":"mz_stream"}}],[11,"drop","","",2,{"i":[{"n":"self"}]}],[11,"as_mut","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","",2,{"i":[{"n":"mz_stream"}],"o":{"n":"self"}}],[11,"forget","","",2,null],[11,"free_state","","",2,{"i":[{"n":"self"}]}],[11,"new","","",3,{"i":[{"n":"mz_stream"}],"o":{"n":"self"}}],[11,"into_mz_stream","","",3,{"i":[{"n":"self"}],"o":{"n":"mz_stream"}}],[11,"adler32","miniz_oxide_c_api","",0,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"prev_return_status","","",0,{"i":[{"n":"self"}],"o":{"n":"tdeflstatus"}}],[11,"flags","","",0,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null],[17,"MZ_FILTERED","","",null,null],[17,"MZ_HUFFMAN_ONLY","","",null,null],[17,"MZ_RLE","","",null,null],[17,"MZ_FIXED","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_ADLER32_INIT","","",null,null],[17,"MZ_CRC32_INIT","","",null,null],[14,"unmangle","","Unmangle the wrapped functions if no_c_export is not defined. For benchmarks, and other comparisons where we want to have both the miniz and miniz_oxide functions available, functions shouldn not be marked `no_mangle` since that will cause conflicts.",null,null],[11,"new","","Create a new tinfl_decompressor with all fields set to 0.",5,{"o":{"n":"decompressoroxide"}}],[11,"default","","Create a new tinfl_decompressor with all fields set to 0.",5,{"o":{"n":"decompressoroxide"}}],[11,"init","","Set the current state to `Start`.",5,null],[11,"with_init_state_only","","Create a new decompressor with only the state field initialized.",5,{"o":{"n":"decompressoroxide"}}],[11,"adler32","","Returns the adler32 checksum of the currently decompressed data.",5,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}]],"paths":[[3,"tdefl_compressor"],[3,"mz_stream"],[3,"BoxedState"],[3,"StreamOxide"],[3,"inflate_state"],[3,"tinfl_decompressor"]]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Ipv4Addr","mio","An IPv4 address.",null,null],[3,"Ipv6Addr","","An IPv6 address.",null,null],[3,"PollOpt","","",null,null],[3,"EventSet","","",null,null],[3,"IoEvent","","",null,null],[12,"kind","","",0,null],[12,"token","","",0,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopConfig","","Configure EventLoop runtime details",null,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[3,"Poll","","",null,null],[3,"Events","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[3,"Token","","",null,null],[12,"0","","",1,null],[3,"Io","","",null,null],[3,"Selector","","",null,null],[4,"IpAddr","","An IP address, either a IPv4 or IPv6 address.",null,null],[13,"V4","","",2,null],[13,"V6","","",2,null],[4,"NotifyError","","",null,null],[13,"Io","","",3,null],[13,"Full","","",3,null],[13,"Closed","","",3,null],[0,"util","","Utilities for non-blocking IO programs",null,null],[3,"BoundedQueue","mio::util","",null,null],[11,"with_capacity","","",4,{"i":[{"n":"usize"}],"o":{"n":"queue"}}],[11,"push","","",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"pop","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"queue"}}],[6,"Slab","","",null,null],[11,"eq","mio","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"pollopt"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"ordering"}}],[11,"edge","","",5,{"o":{"n":"pollopt"}}],[11,"empty","","",5,{"o":{"n":"pollopt"}}],[11,"level","","",5,{"o":{"n":"pollopt"}}],[11,"oneshot","","",5,{"o":{"n":"pollopt"}}],[11,"all","","",5,{"o":{"n":"pollopt"}}],[11,"is_edge","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_level","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_oneshot","","",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"bits","","",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"contains","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"bool"}}],[11,"insert","","",5,{"i":[{"n":"self"},{"n":"pollopt"}]}],[11,"remove","","",5,{"i":[{"n":"self"},{"n":"pollopt"}]}],[11,"bitor","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"pollopt"}}],[11,"bitxor","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"pollopt"}}],[11,"bitand","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"pollopt"}}],[11,"sub","","",5,{"i":[{"n":"self"},{"n":"pollopt"}],"o":{"n":"pollopt"}}],[11,"not","","",5,{"i":[{"n":"self"}],"o":{"n":"pollopt"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"eventset"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"le","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"gt","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"ge","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"ordering"}}],[11,"none","","",6,{"o":{"n":"eventset"}}],[11,"readable","","",6,{"o":{"n":"eventset"}}],[11,"writable","","",6,{"o":{"n":"eventset"}}],[11,"error","","",6,{"o":{"n":"eventset"}}],[11,"hup","","",6,{"o":{"n":"eventset"}}],[11,"all","","",6,{"o":{"n":"eventset"}}],[11,"is_readable","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_writable","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_error","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_hup","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"insert","","",6,{"i":[{"n":"self"},{"n":"eventset"}]}],[11,"remove","","",6,{"i":[{"n":"self"},{"n":"eventset"}]}],[11,"bits","","",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"contains","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"bool"}}],[11,"bitor","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"eventset"}}],[11,"bitxor","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"eventset"}}],[11,"bitand","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"eventset"}}],[11,"sub","","",6,{"i":[{"n":"self"},{"n":"eventset"}],"o":{"n":"eventset"}}],[11,"not","","",6,{"i":[{"n":"self"}],"o":{"n":"eventset"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"ioevent"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"ioevent"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"ioevent"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new IoEvent.",0,{"i":[{"n":"eventset"},{"n":"token"}],"o":{"n":"ioevent"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"eventloopconfig"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new configuration for the event loop with all default options specified.",7,{"o":{"n":"eventloopconfig"}}],[11,"notify_capacity","","Sets the maximum number of messages that can be buffered on the event loop's notification channel before a send will fail.",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"messages_per_tick","","Sets the maximum number of messages that can be processed on any tick of the event loop.",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"timer_tick_ms","","",7,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"self"}}],[11,"timer_wheel_size","","",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"timer_capacity","","",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"default","","",7,{"o":{"n":"eventloopconfig"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Initializes a new event loop using default configuration settings. The event loop will not be running yet.",8,{"o":{"g":["eventloop"],"n":"result"}}],[11,"configured","","",8,{"i":[{"n":"eventloopconfig"}],"o":{"g":["eventloop"],"n":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a thread-safe way, waking up the event loop if needed.",8,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the duration has been reached, Handler::timeout will be invoked passing in the supplied token.",8,null],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it will not be triggered in the future.",8,{"i":[{"n":"self"},{"n":"timeout"}],"o":{"n":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the current iteration.",8,{"i":[{"n":"self"}]}],[11,"is_running","","Indicates whether the event loop is currently running. If it's not it has either stopped or is scheduled to stop on the next tick.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",8,{"i":[{"n":"self"},{"n":"e"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",8,{"i":[{"n":"self"},{"n":"e"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever any of the registered handles are ready.",8,{"i":[{"n":"self"},{"n":"h"}],"o":{"n":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",8,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the handler if any of the registered handles become ready during that time.",8,{"i":[{"n":"self"},{"n":"h"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[11,"drop","","",8,{"i":[{"n":"self"}]}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"send","","",9,{"i":[{"n":"self"},{"n":"m"}],"o":{"g":["notifyerror"],"n":"result"}}],[11,"from_str","","",2,{"i":[{"n":"str"}],"o":{"g":["ipaddr","addrparseerror"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",3,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"new","","",10,{"o":{"g":["poll"],"n":"result"}}],[11,"register","","",10,{"i":[{"n":"self"},{"n":"e"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",10,{"i":[{"n":"self"},{"n":"e"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",10,{"i":[{"n":"self"},{"n":"e"}],"o":{"n":"result"}}],[11,"poll","","",10,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"g":["usize"],"n":"result"}}],[11,"event","","",10,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"ioevent"}}],[11,"events","","",10,{"i":[{"n":"self"}],"o":{"n":"events"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"g":["ioevent"],"n":"option"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",12,{"o":{"g":["selector"],"n":"result"}}],[11,"id","","",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"select","","Wait for events from the OS",12,{"i":[{"n":"self"},{"n":"events"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[11,"register","","Register event interests for the given IO handle with the OS",12,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","Register event interests for the given IO handle with the OS",12,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","Deregister event interests for the given IO handle with the OS",12,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"n":"result"}}],[11,"drop","","",12,{"i":[{"n":"self"}]}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_raw_fd","","",13,{"i":[{"n":"rawfd"}],"o":{"n":"io"}}],[11,"from","","",13,{"i":[{"n":"rawfd"}],"o":{"n":"io"}}],[11,"from_raw_fd","","",13,{"i":[{"n":"rawfd"}],"o":{"n":"io"}}],[11,"as_raw_fd","","",13,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"register","","",13,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",13,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",13,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"drop","","",13,{"i":[{"n":"self"}]}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"timeout"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"token"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"ordering"}}],[11,"hash","","",1,null],[11,"as_usize","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from_usize","","",1,{"i":[{"n":"usize"}],"o":{"n":"token"}}],[11,"as_usize","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[0,"tcp","","",null,null],[4,"Shutdown","mio::tcp","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","The reading portion of the [`TcpStream`] should be shut down.",16,null],[13,"Write","","The writing portion of the [`TcpStream`] should be shut down.",16,null],[13,"Both","","Both the reading and the writing portions of the [`TcpStream`] should be shut down.",16,null],[3,"TcpStream","","",null,null],[3,"TcpListener","","",null,null],[0,"udp","mio","",null,null],[3,"UdpSocket","mio::udp","",null,null],[0,"unix","mio","",null,null],[3,"PipeReader","mio::unix","",null,null],[3,"PipeWriter","","",null,null],[3,"UnixListener","","",null,null],[3,"UnixSocket","","",null,null],[3,"UnixStream","","",null,null],[3,"EventedFd","","",null,null],[12,"0","","",17,null],[5,"pipe","","",null,{"o":{"n":"result"}}],[0,"prelude","mio","",null,null],[3,"EventLoop","mio::prelude","Single threaded IO event loop.",null,null],[8,"TryRead","","",null,null],[11,"try_read_buf","","",18,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[10,"try_read","","",18,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[10,"try_write","","",19,null],[6,"TimerResult","mio","",null,null],[8,"Handler","","",null,null],[16,"Timeout","","",20,null],[16,"Message","","",20,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated on. `events` indicates the specific operations that are ready to be performed.",20,{"i":[{"n":"self"},{"n":"eventloop"},{"n":"token"},{"n":"eventset"}]}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",20,null],[11,"timeout","","Invoked when a timeout has completed.",20,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",20,{"i":[{"n":"self"},{"n":"eventloop"}]}],[11,"tick","","Invoked at the end of an event loop tick.",20,{"i":[{"n":"self"},{"n":"eventloop"}]}],[8,"TryRead","","",null,null],[11,"try_read_buf","mio::prelude","",18,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[10,"try_read","mio","",18,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","mio::prelude","",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[10,"try_write","mio","",19,null],[8,"Evented","","A value that may be registered with an `EventLoop`",null,null],[8,"TryAccept","","",null,null],[16,"Output","","",21,null],[10,"accept","","",21,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",22,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"ipv4addr"}}],[11,"localhost","","Creates a new IPv4 address with the address pointing to localhost: 127.0.0.1.",22,{"o":{"n":"ipv4addr"}}],[11,"unspecified","","Creates a new IPv4 address representing an unspecified address: 0.0.0.0",22,{"o":{"n":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",22,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (0.0.0.0).",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (127.0.0.0/8).",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_private","","Returns [`true`] if this is a private address.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_link_local","","Returns [`true`] if the address is link-local (169.254.0.0/16).",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable. See [iana-ipv4-special-registry][ipv4-sr].",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (224.0.0.0/4).",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_broadcast","","Returns [`true`] if this is a broadcast address (255.255.255.255).",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_documentation","","Returns [`true`] if this address is in a range designated for documentation.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible [IPv6 address].",22,{"i":[{"n":"self"}],"o":{"n":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped [IPv6 address].",22,{"i":[{"n":"self"}],"o":{"n":"ipv6addr"}}],[11,"from_str","","",22,{"i":[{"n":"str"}],"o":{"g":["ipv4addr","addrparseerror"],"n":"result"}}],[11,"from_str","","",23,{"i":[{"n":"str"}],"o":{"g":["ipv6addr","addrparseerror"],"n":"result"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"bool"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"ipv6addr"}],"o":{"n":"bool"}}],[11,"eq","mio::tcp","",16,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"bool"}}],[11,"eq","mio","",22,{"i":[{"n":"self"},{"n":"ipv4addr"}],"o":{"n":"bool"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"bool"}}],[11,"hash","","",22,null],[11,"hash","","",23,null],[11,"cmp","","",23,{"i":[{"n":"self"},{"n":"ipv6addr"}],"o":{"n":"ordering"}}],[11,"cmp","","",22,{"i":[{"n":"self"},{"n":"ipv4addr"}],"o":{"n":"ordering"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"ipv4addr"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"ipv6addr"}}],[11,"clone","mio::tcp","",16,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"fmt","mio","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","","",23,null],[11,"from","","Convert a host byte order `u32` into an `Ipv4Addr`.",22,{"i":[{"n":"u32"}],"o":{"n":"ipv4addr"}}],[11,"from","","",23,null],[11,"from","","",23,{"i":[{"n":"u128"}],"o":{"n":"ipv6addr"}}],[11,"from","","Examples",22,null],[11,"partial_cmp","","",23,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"ipv4addr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",23,{"i":[{"n":"self"},{"n":"ipv6addr"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","mio::tcp","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","mio","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",23,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ipv6addr"}}],[11,"localhost","","Creates a new IPv6 address representing localhost: `::1`.",23,{"o":{"n":"ipv6addr"}}],[11,"unspecified","","Creates a new IPv6 address representing the unspecified address: `::`",23,{"o":{"n":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",23,null],[11,"is_unspecified","","Returns [`true`] for the special 'unspecified' address (::).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_loopback","","Returns [`true`] if this is a loopback address (::1).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_global","","Returns [`true`] if the address appears to be globally routable.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unique_local","","Returns [`true`] if this is a unique local address (fc00::/7).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unicast_link_local","","Returns [`true`] if the address is unicast and link-local (fe80::/10).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unicast_site_local","","Returns [`true`] if this is a deprecated unicast site-local address (fec0::/10).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_documentation","","Returns [`true`] if this is an address reserved for documentation (2001:db8::/32).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_unicast_global","","Returns [`true`] if the address is a globally routable unicast address.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",23,{"i":[{"n":"self"}],"o":{"g":["ipv6multicastscope"],"n":"option"}}],[11,"is_multicast","","Returns [`true`] if this is a multicast address (ff00::/8).",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_ipv4","","Converts this address to an [IPv4 address]. Returns [`None`] if this address is neither IPv4-compatible or IPv4-mapped.",23,{"i":[{"n":"self"}],"o":{"g":["ipv4addr"],"n":"option"}}],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",23,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated on. `events` indicates the specific operations that are ready to be performed.",20,{"i":[{"n":"self"},{"n":"eventloop"},{"n":"token"},{"n":"eventset"}]}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",20,null],[11,"timeout","","Invoked when a timeout has completed.",20,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",20,{"i":[{"n":"self"},{"n":"eventloop"}]}],[11,"tick","","Invoked at the end of an event loop tick.",20,{"i":[{"n":"self"},{"n":"eventloop"}]}],[11,"try_read_buf","mio::prelude","",18,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[11,"try_write_buf","","",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[11,"fmt","mio::tcp","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified address.",24,{"i":[{"n":"socketaddr"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",24,{"i":[{"n":"tcpstream"},{"n":"socketaddr"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"peer_addr","","",24,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"local_addr","","",24,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"try_clone","","",24,{"i":[{"n":"self"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"shutdown","","",24,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"result"}}],[11,"set_nodelay","","",24,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"set_keepalive","","",24,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[11,"take_socket_error","","",24,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read","","",24,null],[11,"write","","",24,null],[11,"flush","","",24,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"register","","",24,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",24,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",24,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",25,{"i":[{"n":"socketaddr"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",25,{"i":[{"n":"tcplistener"},{"n":"socketaddr"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",25,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"local_addr","","",25,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"try_clone","","",25,{"i":[{"n":"self"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"take_socket_error","","",25,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"register","","",25,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",25,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",25,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"accept","","",25,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"as_raw_fd","","",24,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",24,{"i":[{"n":"rawfd"}],"o":{"n":"tcpstream"}}],[11,"as_raw_fd","","",25,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",25,{"i":[{"n":"rawfd"}],"o":{"n":"tcplistener"}}],[11,"fmt","mio::udp","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",26,{"o":{"g":["udpsocket"],"n":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",26,{"o":{"g":["udpsocket"],"n":"result"}}],[11,"bound","","",26,{"i":[{"n":"socketaddr"}],"o":{"g":["udpsocket"],"n":"result"}}],[11,"bind","","",26,{"i":[{"n":"self"},{"n":"socketaddr"}],"o":{"n":"result"}}],[11,"local_addr","","",26,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"try_clone","","",26,{"i":[{"n":"self"}],"o":{"g":["udpsocket"],"n":"result"}}],[11,"send_to","","",26,null],[11,"recv_from","","",26,null],[11,"set_broadcast","","",26,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"set_multicast_loop","","",26,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"join_multicast","","",26,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"result"}}],[11,"leave_multicast","","",26,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"result"}}],[11,"set_multicast_time_to_live","","",26,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"register","","",26,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",26,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",26,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"as_raw_fd","","",26,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",26,{"i":[{"n":"rawfd"}],"o":{"n":"udpsocket"}}],[11,"fmt","mio::unix","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",27,{"o":{"g":["unixsocket"],"n":"result"}}],[11,"connect","","Connect the socket to the specified address",27,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"result"}}],[11,"bind","","Bind the socket to the specified address",27,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"result"}}],[11,"listen","","Listen for incoming requests",27,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["unixlistener"],"n":"result"}}],[11,"try_clone","","",27,{"i":[{"n":"self"}],"o":{"g":["unixsocket"],"n":"result"}}],[11,"register","","",27,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",27,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",27,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"connect","","",28,{"i":[{"n":"p"}],"o":{"g":["unixstream"],"n":"result"}}],[11,"try_clone","","",28,{"i":[{"n":"self"}],"o":{"g":["unixstream"],"n":"result"}}],[11,"read_recv_fd","","",28,null],[11,"try_read_recv_fd","","",28,null],[11,"try_read_buf_recv_fd","","",28,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["option"],"n":"result"}}],[11,"write_send_fd","","",28,null],[11,"try_write_send_fd","","",28,null],[11,"try_write_buf_send_fd","","",28,{"i":[{"n":"self"},{"n":"b"},{"n":"rawfd"}],"o":{"g":["option"],"n":"result"}}],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"register","","",28,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",28,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",28,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"bind","","",29,{"i":[{"n":"p"}],"o":{"g":["unixlistener"],"n":"result"}}],[11,"accept","","",29,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"try_clone","","",29,{"i":[{"n":"self"}],"o":{"g":["unixlistener"],"n":"result"}}],[11,"register","","",29,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",29,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",29,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"accept","","",29,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"read","","",30,null],[11,"register","","",30,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",30,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",30,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"from","","",30,{"i":[{"n":"io"}],"o":{"n":"pipereader"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write","","",31,null],[11,"flush","","",31,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"register","","",31,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",31,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",31,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}],[11,"from","","",31,{"i":[{"n":"io"}],"o":{"n":"pipewriter"}}],[11,"as_raw_fd","","",27,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",27,{"i":[{"n":"rawfd"}],"o":{"n":"unixsocket"}}],[11,"as_raw_fd","","",28,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",28,{"i":[{"n":"rawfd"}],"o":{"n":"unixstream"}}],[11,"as_raw_fd","","",29,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",29,{"i":[{"n":"rawfd"}],"o":{"n":"unixlistener"}}],[11,"as_raw_fd","","",30,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",30,{"i":[{"n":"rawfd"}],"o":{"n":"pipereader"}}],[11,"as_raw_fd","","",31,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"from_raw_fd","","",31,{"i":[{"n":"rawfd"}],"o":{"n":"pipewriter"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"register","","",17,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"reregister","","",17,{"i":[{"n":"self"},{"n":"selector"},{"n":"token"},{"n":"eventset"},{"n":"pollopt"}],"o":{"n":"result"}}],[11,"deregister","","",17,{"i":[{"n":"self"},{"n":"selector"}],"o":{"n":"result"}}]],"paths":[[3,"IoEvent"],[3,"Token"],[4,"IpAddr"],[4,"NotifyError"],[3,"BoundedQueue"],[3,"PollOpt"],[3,"EventSet"],[3,"EventLoopConfig"],[3,"EventLoop"],[3,"Sender"],[3,"Poll"],[3,"Events"],[3,"Selector"],[3,"Io"],[3,"Timeout"],[3,"TimerError"],[4,"Shutdown"],[3,"EventedFd"],[8,"TryRead"],[8,"TryWrite"],[8,"Handler"],[8,"TryAccept"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"]]};
searchIndex["miow"] = {"doc":"","items":[],"paths":[]};
searchIndex["modifier"] = {"doc":"Overloadable modification through both owned and mutable references to a type with minimal code duplication.","items":[[8,"Modifier","modifier","Allows use of the implemented type as an argument to Set::set.",null,null],[10,"modify","","Modify `F` with self.",0,{"i":[{"n":"self"},{"n":"f"}]}],[8,"Set","","A trait providing the set and set_mut methods for all types.",null,null],[11,"set","","Modify self using the provided modifier.",1,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"self"}}],[11,"set_mut","","Modify self through a mutable reference with the provided modifier.",1,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"self"}}]],"paths":[[8,"Modifier"],[8,"Set"]]};
searchIndex["mount"] = {"doc":"`Mount` provides mounting middleware for the Iron framework.","items":[[3,"Mount","mount","`Mount` is a simple mounting middleware.",null,null],[3,"OriginalUrl","","Exposes the original, unmodified path to be stored in `Request::extensions`.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"originalurl"}}],[11,"new","","Creates a new instance of `Mount`.",1,{"o":{"n":"mount"}}],[11,"mount","","Mounts a given `Handler` onto a route.",1,{"i":[{"n":"self"},{"n":"str"},{"n":"h"}],"o":{"n":"mount"}}],[11,"handle","","",1,{"i":[{"n":"self"},{"n":"request"}],"o":{"g":["response"],"n":"ironresult"}}]],"paths":[[3,"OriginalUrl"],[3,"Mount"]]};
searchIndex["msdos_time"] = {"doc":"This crate converts a `Tm` struct to an `MsDosDateTime` and vice-versa","items":[[3,"MsDosDateTime","msdos_time","Struct representing the date and time part of an MsDos datetime",null,null],[12,"datepart","","Part representing the date",0,null],[12,"timepart","","Part representing the time",0,null],[8,"TmMsDosExt","","Trait to convert a time representation to and from a MsDosDateTime",null,null],[10,"to_msdos","","Convert a value to MsDosDateTime",1,{"i":[{"n":"self"}],"o":{"g":["msdosdatetime","error"],"n":"result"}}],[10,"from_msdos","","Construct a value from an MsDosDateTime",1,{"i":[{"n":"msdosdatetime"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"msdosdatetime"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Constructor of an MsDos datetime, from the raw representation",0,{"i":[{"n":"u16"},{"n":"u16"}],"o":{"n":"msdosdatetime"}}]],"paths":[[3,"MsDosDateTime"],[8,"TmMsDosExt"]]};
searchIndex["mustache"] = {"doc":"","items":[[3,"Template","mustache","`Template` represents a compiled mustache file.",null,null],[3,"Context","","Represents the shared metadata needed to compile and render a mustache template.",null,null],[12,"template_path","","",0,null],[12,"template_extension","","",0,null],[4,"Error","","Error type for any error within this library.",null,null],[13,"InvalidStr","","",1,null],[13,"NoFilename","","",1,null],[13,"Io","","",1,null],[13,"Parser","","",1,null],[13,"Encoder","","",1,null],[4,"Data","","",null,null],[13,"OptVal","","",2,null],[13,"StrVal","","",2,null],[13,"Bool","","",2,null],[13,"VecVal","","",2,null],[13,"Map","","",2,null],[13,"Fun","","",2,null],[5,"compile_iter","","Compiles a template from an `Iterator<char>`.",null,{"i":[{"n":"t"}],"o":{"g":["template"],"n":"result"}}],[5,"compile_path","","Compiles a template from a path. returns None if the file cannot be read OR the file is not UTF-8 encoded",null,{"i":[{"n":"u"}],"o":{"g":["template"],"n":"result"}}],[5,"compile_str","","Compiles a template from a string.",null,{"i":[{"n":"str"}],"o":{"g":["template"],"n":"result"}}],[0,"builder","","",null,null],[3,"MapBuilder","mustache::builder","`MapBuilder` is a helper type that construct `Data` types.",null,null],[3,"VecBuilder","","",null,null],[11,"default","","",3,{"o":{"n":"mapbuilder"}}],[11,"new","","Create a `MapBuilder`",3,{"o":{"n":"mapbuilder"}}],[11,"insert","","Add an `Encodable` to the `MapBuilder`.",3,{"i":[{"n":"self"},{"n":"k"},{"n":"t"}],"o":{"g":["mapbuilder","error"],"n":"result"}}],[11,"insert_str","","Add a `String` to the `MapBuilder`.",3,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"mapbuilder"}}],[11,"insert_bool","","Add a `bool` to the `MapBuilder`.",3,{"i":[{"n":"self"},{"n":"k"},{"n":"bool"}],"o":{"n":"mapbuilder"}}],[11,"insert_vec","","Add a `Vec` to the `MapBuilder`.",3,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"mapbuilder"}}],[11,"insert_map","","Add a `Map` to the `MapBuilder`.",3,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"mapbuilder"}}],[11,"insert_fn","","Add a function to the `MapBuilder`.",3,{"i":[{"n":"self"},{"n":"k"},{"n":"f"}],"o":{"n":"mapbuilder"}}],[11,"build","","Return the built `Data`.",3,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"default","","",4,{"o":{"n":"vecbuilder"}}],[11,"new","","Create a `VecBuilder`",4,{"o":{"n":"vecbuilder"}}],[11,"push","","Add an `Encodable` to the `VecBuilder`.",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["vecbuilder","error"],"n":"result"}}],[11,"push_str","","Add a `String` to the `VecBuilder`.",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"vecbuilder"}}],[11,"push_bool","","Add a `bool` to the `VecBuilder`.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"vecbuilder"}}],[11,"push_vec","","Add a `Vec` to the `MapBuilder`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"vecbuilder"}}],[11,"push_map","","Add a `Map` to the `VecBuilder`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"vecbuilder"}}],[11,"push_fn","","Add a function to the `VecBuilder`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"vecbuilder"}}],[11,"build","","",4,{"i":[{"n":"self"}],"o":{"n":"data"}}],[0,"encoder","mustache","",null,null],[3,"Encoder","mustache::encoder","",null,null],[4,"Error","","Error type to represent encoding failure.",null,null],[13,"NestedOptions","","",5,null],[13,"UnsupportedType","","",5,null],[13,"MissingElements","","",5,null],[13,"KeyIsNotString","","",5,null],[13,"NoDataToEncode","","",5,null],[13,"MultipleRootsFound","","",5,null],[5,"encode","","",null,{"i":[{"n":"t"}],"o":{"g":["data","error"],"n":"result"}}],[6,"EncoderResult","","",null,null],[11,"default","","",6,{"o":{"n":"encoder"}}],[11,"new","","",6,{"o":{"n":"encoder"}}],[11,"stack","","",6,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"emit_nil","","",6,{"i":[{"n":"self"}],"o":{"n":"encoderresult"}}],[11,"emit_isize","","",6,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"encoderresult"}}],[11,"emit_usize","","",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"encoderresult"}}],[11,"emit_u64","","",6,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"encoderresult"}}],[11,"emit_u32","","",6,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"encoderresult"}}],[11,"emit_u16","","",6,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"encoderresult"}}],[11,"emit_u8","","",6,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"encoderresult"}}],[11,"emit_i64","","",6,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"encoderresult"}}],[11,"emit_i32","","",6,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"encoderresult"}}],[11,"emit_i16","","",6,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"encoderresult"}}],[11,"emit_i8","","",6,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"encoderresult"}}],[11,"emit_bool","","",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"encoderresult"}}],[11,"emit_f64","","",6,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"encoderresult"}}],[11,"emit_f32","","",6,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"encoderresult"}}],[11,"emit_char","","",6,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"encoderresult"}}],[11,"emit_str","","",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"encoderresult"}}],[11,"emit_enum","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_enum_variant","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_enum_variant_arg","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_enum_struct_variant","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_enum_struct_variant_field","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_struct_field","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_tuple","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_tuple_arg","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_tuple_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_tuple_struct_arg","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_option","","",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_option_none","","",6,{"i":[{"n":"self"}],"o":{"n":"encoderresult"}}],[11,"emit_option_some","","",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_seq","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_seq_elt","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_map","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_map_elt_key","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[11,"emit_map_elt_val","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderresult"}}],[0,"parser","mustache","",null,null],[4,"Error","mustache::parser","Error type to represent parsing failure.",null,null],[13,"BadClosingTag","","",7,null],[13,"UnclosedTag","","",7,null],[13,"UnclosedSection","","",7,null],[13,"UnbalancedUnescapeTag","","",7,null],[13,"EmptyTag","","",7,null],[13,"EarlySectionClose","","",7,null],[13,"MissingSetDelimeterClosingTag","","",7,null],[13,"InvalidSetDelimeterSyntax","","",7,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"description","","",7,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","mustache","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"template"}}],[11,"render","","Renders the template with the `Encodable` data.",8,{"i":[{"n":"self"},{"n":"w"},{"n":"t"}],"o":{"n":"result"}}],[11,"render_data","","Renders the template with the `Data`.",8,{"i":[{"n":"self"},{"n":"w"},{"n":"data"}],"o":{"n":"result"}}],[11,"render_to_string","","Renders the template to a `String` with the `Encodable` data.",8,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["string","error"],"n":"stdresult"}}],[11,"render_data_to_string","","Renders the template to a `String` with the `Data`.",8,{"i":[{"n":"self"},{"n":"data"}],"o":{"g":["string","error"],"n":"stdresult"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",1,{"i":[{"n":"stdioerror"}],"o":{"n":"error"}}],[11,"from","","",1,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"from","","",1,{"i":[{"n":"error"}],"o":{"n":"error"}}],[6,"Result","","",null,null],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"data"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"context"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Configures a mustache context the specified path to the templates.",0,{"i":[{"n":"pathbuf"}],"o":{"n":"context"}}],[11,"compile","","Compiles a template from a string",0,{"i":[{"n":"self"},{"n":"it"}],"o":{"g":["template"],"n":"result"}}],[11,"compile_path","","Compiles a template from a path.",0,{"i":[{"n":"self"},{"n":"u"}],"o":{"g":["template"],"n":"result"}}]],"paths":[[3,"Context"],[4,"Error"],[4,"Data"],[3,"MapBuilder"],[3,"VecBuilder"],[4,"Error"],[3,"Encoder"],[4,"Error"],[3,"Template"]]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"o":{"g":["tcpbuilder"],"n":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"o":{"g":["tcpbuilder"],"n":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["tcpbuilder"],"n":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"i":[{"n":"self"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"i":[{"n":"self"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"o":{"g":["udpbuilder"],"n":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"o":{"g":["udpbuilder"],"n":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["udpsocket"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"from_raw_fd","","",0,{"i":[{"n":"c_int"}],"o":{"n":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_raw_fd","","",1,{"i":[{"n":"c_int"}],"o":{"n":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"reuse_port","net2","",0,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get_reuse_port","","",0,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"reuse_port","","",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get_reuse_port","","",1,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,{"i":[{"n":"self"},{"n":"ipv4addr"},{"n":"ipv4addr"}],"o":{"n":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,{"i":[{"n":"self"},{"n":"ipv6addr"},{"n":"u32"}],"o":{"n":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,{"i":[{"n":"self"},{"n":"ipv4addr"},{"n":"ipv4addr"}],"o":{"n":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,{"i":[{"n":"self"},{"n":"ipv6addr"},{"n":"u32"}],"o":{"n":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}],"o":{"n":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,null],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EAGAIN","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"ELOOP","","",0,null],[13,"ENOMSG","","",0,null],[13,"EIDRM","","",0,null],[13,"ECHRNG","","",0,null],[13,"EL2NSYNC","","",0,null],[13,"EL3HLT","","",0,null],[13,"EL3RST","","",0,null],[13,"ELNRNG","","",0,null],[13,"EUNATCH","","",0,null],[13,"ENOCSI","","",0,null],[13,"EL2HLT","","",0,null],[13,"EBADE","","",0,null],[13,"EBADR","","",0,null],[13,"EXFULL","","",0,null],[13,"ENOANO","","",0,null],[13,"EBADRQC","","",0,null],[13,"EBADSLT","","",0,null],[13,"EBFONT","","",0,null],[13,"ENOSTR","","",0,null],[13,"ENODATA","","",0,null],[13,"ETIME","","",0,null],[13,"ENOSR","","",0,null],[13,"ENONET","","",0,null],[13,"ENOPKG","","",0,null],[13,"EREMOTE","","",0,null],[13,"ENOLINK","","",0,null],[13,"EADV","","",0,null],[13,"ESRMNT","","",0,null],[13,"ECOMM","","",0,null],[13,"EPROTO","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"EDOTDOT","","",0,null],[13,"EBADMSG","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"ENOTUNIQ","","",0,null],[13,"EBADFD","","",0,null],[13,"EREMCHG","","",0,null],[13,"ELIBACC","","",0,null],[13,"ELIBBAD","","",0,null],[13,"ELIBSCN","","",0,null],[13,"ELIBMAX","","",0,null],[13,"ELIBEXEC","","",0,null],[13,"EILSEQ","","",0,null],[13,"ERESTART","","",0,null],[13,"ESTRPIPE","","",0,null],[13,"EUSERS","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"EALREADY","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"ESTALE","","",0,null],[13,"EUCLEAN","","",0,null],[13,"ENOTNAM","","",0,null],[13,"ENAVAIL","","",0,null],[13,"EISNAM","","",0,null],[13,"EREMOTEIO","","",0,null],[13,"EDQUOT","","",0,null],[13,"ENOMEDIUM","","",0,null],[13,"EMEDIUMTYPE","","",0,null],[13,"ECANCELED","","",0,null],[13,"ENOKEY","","",0,null],[13,"EKEYEXPIRED","","",0,null],[13,"EKEYREVOKED","","",0,null],[13,"EKEYREJECTED","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"ERFKILL","","",0,null],[13,"EHWPOISON","","",0,null],[4,"Error","","",null,null],[13,"Sys","","",1,null],[13,"InvalidPath","","",1,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EAGAIN","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"ELOOP","","",0,null],[13,"ENOMSG","","",0,null],[13,"EIDRM","","",0,null],[13,"ECHRNG","","",0,null],[13,"EL2NSYNC","","",0,null],[13,"EL3HLT","","",0,null],[13,"EL3RST","","",0,null],[13,"ELNRNG","","",0,null],[13,"EUNATCH","","",0,null],[13,"ENOCSI","","",0,null],[13,"EL2HLT","","",0,null],[13,"EBADE","","",0,null],[13,"EBADR","","",0,null],[13,"EXFULL","","",0,null],[13,"ENOANO","","",0,null],[13,"EBADRQC","","",0,null],[13,"EBADSLT","","",0,null],[13,"EBFONT","","",0,null],[13,"ENOSTR","","",0,null],[13,"ENODATA","","",0,null],[13,"ETIME","","",0,null],[13,"ENOSR","","",0,null],[13,"ENONET","","",0,null],[13,"ENOPKG","","",0,null],[13,"EREMOTE","","",0,null],[13,"ENOLINK","","",0,null],[13,"EADV","","",0,null],[13,"ESRMNT","","",0,null],[13,"ECOMM","","",0,null],[13,"EPROTO","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"EDOTDOT","","",0,null],[13,"EBADMSG","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"ENOTUNIQ","","",0,null],[13,"EBADFD","","",0,null],[13,"EREMCHG","","",0,null],[13,"ELIBACC","","",0,null],[13,"ELIBBAD","","",0,null],[13,"ELIBSCN","","",0,null],[13,"ELIBMAX","","",0,null],[13,"ELIBEXEC","","",0,null],[13,"EILSEQ","","",0,null],[13,"ERESTART","","",0,null],[13,"ESTRPIPE","","",0,null],[13,"EUSERS","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"EALREADY","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"ESTALE","","",0,null],[13,"EUCLEAN","","",0,null],[13,"ENOTNAM","","",0,null],[13,"ENAVAIL","","",0,null],[13,"EISNAM","","",0,null],[13,"EREMOTEIO","","",0,null],[13,"EDQUOT","","",0,null],[13,"ENOMEDIUM","","",0,null],[13,"EMEDIUMTYPE","","",0,null],[13,"ECANCELED","","",0,null],[13,"ENOKEY","","",0,null],[13,"EKEYEXPIRED","","",0,null],[13,"EKEYREVOKED","","",0,null],[13,"EKEYREJECTED","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"ERFKILL","","",0,null],[13,"EHWPOISON","","",0,null],[5,"from_i32","","",null,{"i":[{"n":"i32"}],"o":{"n":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"o":{"n":"i32"}}],[11,"fmt","nix","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"errno"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"errno"}],"o":{"n":"bool"}}],[17,"EWOULDBLOCK","nix::errno","",null,null],[17,"EDEADLOCK","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed information about the error can be found in `errno`",null,null],[10,"sentinel","","",2,{"o":{"n":"self"}}],[11,"last","nix","",0,{"o":{"n":"self"}}],[11,"desc","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_i32","","",0,{"i":[{"n":"i32"}],"o":{"n":"errno"}}],[11,"clear","","",0,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This should not be used when `-1` is not the errno sentinel value.",0,{"i":[{"n":"s"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"features","","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"o":{"n":"bool"}}],[0,"fcntl","nix","",null,null],[3,"SpliceFFlags","nix::fcntl","",null,null],[3,"OFlag","","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",3,null],[12,"l_whence","","",3,null],[12,"l_start","","",3,null],[12,"l_len","","",3,null],[12,"l_pid","","",3,null],[12,"l_sysid","","",3,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",4,null],[13,"F_DUPFD_CLOEXEC","","",4,null],[13,"F_GETFD","","",4,null],[13,"F_SETFD","","",4,null],[13,"F_GETFL","","",4,null],[13,"F_SETFL","","",4,null],[13,"F_SETLK","","",4,null],[13,"F_SETLKW","","",4,null],[13,"F_GETLK","","",4,null],[13,"F_OFD_SETLK","","",4,null],[13,"F_OFD_SETLKW","","",4,null],[13,"F_OFD_GETLK","","",4,null],[13,"F_ADD_SEALS","","",4,null],[13,"F_GET_SEALS","","",4,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",5,null],[13,"LockExclusive","","",5,null],[13,"Unlock","","",5,null],[13,"LockSharedNonblock","","",5,null],[13,"LockExclusiveNonblock","","",5,null],[13,"UnlockNonblock","","",5,null],[5,"open","","",null,{"i":[{"n":"p"},{"n":"oflag"},{"n":"mode"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"fcntl","","",null,{"i":[{"n":"rawfd"},{"n":"fcntlarg"}],"o":{"g":["c_int"],"n":"result"}}],[5,"flock","","",null,{"i":[{"n":"rawfd"},{"n":"flockarg"}],"o":{"n":"result"}}],[5,"splice","","",null,{"i":[{"n":"rawfd"},{"g":["loff_t"],"n":"option"},{"n":"rawfd"},{"g":["loff_t"],"n":"option"},{"n":"usize"},{"n":"splicefflags"}],"o":{"g":["usize"],"n":"result"}}],[5,"tee","","",null,{"i":[{"n":"rawfd"},{"n":"rawfd"},{"n":"usize"},{"n":"splicefflags"}],"o":{"g":["usize"],"n":"result"}}],[5,"vmsplice","","",null,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"flock"}}],[11,"default","","",3,{"o":{"n":"flock"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"splicefflags"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"le","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"gt","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"ge","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"ordering"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",6,{"o":{"n":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",6,{"o":{"n":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",6,{"i":[{"n":"c_uint"}],"o":{"g":["splicefflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",6,{"i":[{"n":"c_uint"}],"o":{"n":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",6,{"i":[{"n":"self"},{"n":"splicefflags"}]}],[11,"remove","","Removes the specified flags in-place.",6,{"i":[{"n":"self"},{"n":"splicefflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",6,{"i":[{"n":"self"},{"n":"splicefflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"splicefflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"splicefflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"splicefflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",6,{"i":[{"n":"self"},{"n":"splicefflags"}],"o":{"n":"splicefflags"}}],[11,"not","","Returns the complement of this set of flags.",6,{"i":[{"n":"self"}],"o":{"n":"splicefflags"}}],[11,"from_iter","","",6,{"i":[{"n":"t"}],"o":{"n":"splicefflags"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"oflag"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"ordering"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",7,{"o":{"n":"oflag"}}],[11,"all","","Returns the set containing all flags.",7,{"o":{"n":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,{"i":[{"n":"c_int"}],"o":{"g":["oflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,{"i":[{"n":"c_int"}],"o":{"n":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"i":[{"n":"self"},{"n":"oflag"}]}],[11,"remove","","Removes the specified flags in-place.",7,{"i":[{"n":"self"},{"n":"oflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",7,{"i":[{"n":"self"},{"n":"oflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"i":[{"n":"self"},{"n":"oflag"}],"o":{"n":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",7,{"i":[{"n":"self"}],"o":{"n":"oflag"}}],[11,"from_iter","","",7,{"i":[{"n":"t"}],"o":{"n":"oflag"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"fdflag"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"ordering"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",8,{"o":{"n":"fdflag"}}],[11,"all","","Returns the set containing all flags.",8,{"o":{"n":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",8,{"i":[{"n":"c_int"}],"o":{"g":["fdflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",8,{"i":[{"n":"c_int"}],"o":{"n":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",8,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"remove","","Removes the specified flags in-place.",8,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",8,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",8,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",8,{"i":[{"n":"self"}],"o":{"n":"fdflag"}}],[11,"from_iter","","",8,{"i":[{"n":"t"}],"o":{"n":"fdflag"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"sealflag"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"ordering"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",9,{"o":{"n":"sealflag"}}],[11,"all","","Returns the set containing all flags.",9,{"o":{"n":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",9,{"i":[{"n":"c_int"}],"o":{"g":["sealflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",9,{"i":[{"n":"c_int"}],"o":{"n":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"i":[{"n":"self"},{"n":"sealflag"}]}],[11,"remove","","Removes the specified flags in-place.",9,{"i":[{"n":"self"},{"n":"sealflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",9,{"i":[{"n":"self"},{"n":"sealflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"sealflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"sealflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"sealflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"i":[{"n":"self"},{"n":"sealflag"}],"o":{"n":"sealflag"}}],[11,"not","","Returns the complement of this set of flags.",9,{"i":[{"n":"self"}],"o":{"n":"sealflag"}}],[11,"from_iter","","",9,{"i":[{"n":"t"}],"o":{"n":"sealflag"}}],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"mount","","",null,{"i":[{"n":"option"},{"n":"p2"},{"n":"option"},{"n":"msflags"},{"n":"option"}],"o":{"n":"result"}}],[5,"umount","","",null,{"i":[{"n":"p"}],"o":{"n":"result"}}],[5,"umount2","","",null,{"i":[{"n":"p"},{"n":"mntflags"}],"o":{"n":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"msflags"}}],[11,"partial_cmp","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"le","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"gt","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"ge","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"cmp","","",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"ordering"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",10,{"o":{"n":"msflags"}}],[11,"all","","Returns the set containing all flags.",10,{"o":{"n":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"i":[{"n":"self"}],"o":{"n":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",10,{"i":[{"n":"c_ulong"}],"o":{"g":["msflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",10,{"i":[{"n":"c_ulong"}],"o":{"n":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"remove","","Removes the specified flags in-place.",10,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",10,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",10,{"i":[{"n":"self"}],"o":{"n":"msflags"}}],[11,"from_iter","","",10,{"i":[{"n":"t"}],"o":{"n":"msflags"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"mntflags"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"le","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"gt","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"ge","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"ordering"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",11,{"o":{"n":"mntflags"}}],[11,"all","","Returns the set containing all flags.",11,{"o":{"n":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",11,{"i":[{"n":"c_int"}],"o":{"g":["mntflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",11,{"i":[{"n":"c_int"}],"o":{"n":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"i":[{"n":"self"},{"n":"mntflags"}]}],[11,"remove","","Removes the specified flags in-place.",11,{"i":[{"n":"self"},{"n":"mntflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",11,{"i":[{"n":"self"},{"n":"mntflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"mntflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"mntflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"mntflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"i":[{"n":"self"},{"n":"mntflags"}],"o":{"n":"mntflags"}}],[11,"not","","Returns the complement of this set of flags.",11,{"i":[{"n":"self"}],"o":{"n":"mntflags"}}],[11,"from_iter","","",11,{"i":[{"n":"t"}],"o":{"n":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[12,"mq_flags","","",12,null],[12,"mq_maxmsg","","",12,null],[12,"mq_msgsize","","",12,null],[12,"mq_curmsgs","","",12,null],[5,"mq_open","","",null,{"i":[{"n":"cstring"},{"n":"mq_oflag"},{"n":"mode"},{"g":["mqattr"],"n":"option"}],"o":{"g":["mqd"],"n":"result"}}],[5,"mq_unlink","","",null,{"i":[{"n":"cstring"}],"o":{"n":"result"}}],[5,"mq_close","","",null,{"i":[{"n":"mqd"}],"o":{"n":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,{"i":[{"n":"mqd"}],"o":{"g":["mqattr"],"n":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only O_NONBLOCK can be set, everything else will be ignored Returns the old attributes It is recommend to use the mq_set_nonblock() and mq_remove_nonblock() convenience functions as they are easier to use",null,{"i":[{"n":"mqd"},{"n":"mqattr"}],"o":{"g":["mqattr"],"n":"result"}}],[5,"mq_set_nonblock","","Convenience function. Sets the O_NONBLOCK attribute for a given message queue descriptor Returns the old attributes",null,{"i":[{"n":"mqd"}],"o":{"g":["mqattr"],"n":"result"}}],[5,"mq_remove_nonblock","","Convenience function. Removes O_NONBLOCK attribute for a given message queue descriptor Returns the old attributes",null,{"i":[{"n":"mqd"}],"o":{"g":["mqattr"],"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"mq_oflag"}}],[11,"partial_cmp","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"le","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"gt","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"ge","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",13,{"o":{"n":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",13,{"o":{"n":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,{"i":[{"n":"c_int"}],"o":{"g":["mq_oflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,{"i":[{"n":"c_int"}],"o":{"n":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}]}],[11,"remove","","Removes the specified flags in-place.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"mq_oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"mq_oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"mq_oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"i":[{"n":"self"},{"n":"mq_oflag"}],"o":{"n":"mq_oflag"}}],[11,"not","","Returns the complement of this set of flags.",13,{"i":[{"n":"self"}],"o":{"n":"mq_oflag"}}],[11,"from_iter","","",13,{"i":[{"n":"t"}],"o":{"n":"mq_oflag"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"fdflag"}}],[11,"partial_cmp","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"le","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"gt","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"ge","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"cmp","","",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"ordering"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",14,{"o":{"n":"fdflag"}}],[11,"all","","Returns the set containing all flags.",14,{"o":{"n":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",14,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",14,{"i":[{"n":"c_int"}],"o":{"g":["fdflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",14,{"i":[{"n":"c_int"}],"o":{"n":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",14,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",14,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"remove","","Removes the specified flags in-place.",14,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",14,{"i":[{"n":"self"},{"n":"fdflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",14,{"i":[{"n":"self"},{"n":"fdflag"}],"o":{"n":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",14,{"i":[{"n":"self"}],"o":{"n":"fdflag"}}],[11,"from_iter","","",14,{"i":[{"n":"t"}],"o":{"n":"fdflag"}}],[6,"MQd","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"mqattr"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"mqattr"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"mqattr"}],"o":{"n":"bool"}}],[11,"new","","",12,{"i":[{"n":"c_long"},{"n":"c_long"},{"n":"c_long"},{"n":"c_long"}],"o":{"n":"mqattr"}}],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[12,"fd","","",15,null],[12,"events","","",15,null],[12,"revents","","",15,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"eventflags"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"le","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"gt","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"ge","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"cmp","","",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"ordering"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",16,{"o":{"n":"eventflags"}}],[11,"all","","Returns the set containing all flags.",16,{"o":{"n":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,{"i":[{"n":"self"}],"o":{"n":"c_short"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",16,{"i":[{"n":"c_short"}],"o":{"g":["eventflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",16,{"i":[{"n":"c_short"}],"o":{"n":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",16,{"i":[{"n":"self"},{"n":"eventflags"}]}],[11,"remove","","Removes the specified flags in-place.",16,{"i":[{"n":"self"},{"n":"eventflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",16,{"i":[{"n":"self"},{"n":"eventflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"eventflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"eventflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"eventflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",16,{"i":[{"n":"self"},{"n":"eventflags"}],"o":{"n":"eventflags"}}],[11,"not","","Returns the complement of this set of flags.",16,{"i":[{"n":"self"}],"o":{"n":"eventflags"}}],[11,"from_iter","","",16,{"i":[{"n":"t"}],"o":{"n":"eventflags"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"pollfd"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"nfds_t","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"i":[{"n":"p"}],"o":{"g":["c_uint"],"n":"result"}}],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[3,"CpuSet","","",null,null],[5,"sched_setaffinity","","",null,{"i":[{"n":"isize"},{"n":"cpuset"}],"o":{"n":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"i":[{"n":"cloneflags"}],"o":{"n":"result"}}],[5,"setns","","",null,{"i":[{"n":"rawfd"},{"n":"cloneflags"}],"o":{"n":"result"}}],[6,"CloneCb","","",null,null],[6,"CpuMask","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"cloneflags"}}],[11,"partial_cmp","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"le","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"gt","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"ge","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"cmp","","",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"ordering"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",17,{"o":{"n":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",17,{"o":{"n":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",17,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",17,{"i":[{"n":"c_int"}],"o":{"g":["cloneflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",17,{"i":[{"n":"c_int"}],"o":{"n":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",17,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",17,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",17,{"i":[{"n":"self"},{"n":"cloneflags"}]}],[11,"remove","","Removes the specified flags in-place.",17,{"i":[{"n":"self"},{"n":"cloneflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",17,{"i":[{"n":"self"},{"n":"cloneflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"cloneflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"cloneflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"cloneflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",17,{"i":[{"n":"self"},{"n":"cloneflags"}],"o":{"n":"cloneflags"}}],[11,"not","","Returns the complement of this set of flags.",17,{"i":[{"n":"self"}],"o":{"n":"cloneflags"}}],[11,"from_iter","","",17,{"i":[{"n":"t"}],"o":{"n":"cloneflags"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"cpuset"}}],[11,"new","","",18,{"o":{"n":"cpuset"}}],[11,"set","","",18,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"unset","","",18,{"i":[{"n":"self"},{"n":"usize"}]}],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",19,null],[12,"data","","",19,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",20,null],[13,"EpollCtlDel","","",20,null],[13,"EpollCtlMod","","",20,null],[5,"epoll_create","","",null,{"o":{"g":["rawfd"],"n":"result"}}],[5,"epoll_ctl","","",null,{"i":[{"n":"rawfd"},{"n":"epollop"},{"n":"rawfd"},{"n":"epollevent"}],"o":{"n":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"epolleventkind"}}],[11,"partial_cmp","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"le","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"gt","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"ge","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"cmp","","",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"ordering"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",21,{"o":{"n":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",21,{"o":{"n":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",21,{"i":[{"n":"u32"}],"o":{"g":["epolleventkind"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",21,{"i":[{"n":"u32"}],"o":{"n":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",21,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}]}],[11,"remove","","Removes the specified flags in-place.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}]}],[11,"toggle","","Toggles the specified flags in-place.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}]}],[11,"bitor","","Returns the union of the two sets of flags.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"epolleventkind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"epolleventkind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"epolleventkind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",21,{"i":[{"n":"self"},{"n":"epolleventkind"}],"o":{"n":"epolleventkind"}}],[11,"not","","Returns the complement of this set of flags.",21,{"i":[{"n":"self"}],"o":{"n":"epolleventkind"}}],[11,"from_iter","","",21,{"i":[{"n":"t"}],"o":{"n":"epolleventkind"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"epollop"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"epollevent"}}],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"i":[{"n":"cstr"},{"n":"memfdcreateflag"}],"o":{"g":["rawfd"],"n":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"memfdcreateflag"}}],[11,"partial_cmp","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"le","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"gt","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"ge","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"cmp","","",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"ordering"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",22,{"o":{"n":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",22,{"o":{"n":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",22,{"i":[{"n":"self"}],"o":{"n":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",22,{"i":[{"n":"c_uint"}],"o":{"g":["memfdcreateflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",22,{"i":[{"n":"c_uint"}],"o":{"n":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}]}],[11,"remove","","Removes the specified flags in-place.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"memfdcreateflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"memfdcreateflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"memfdcreateflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",22,{"i":[{"n":"self"},{"n":"memfdcreateflag"}],"o":{"n":"memfdcreateflag"}}],[11,"not","","Returns the complement of this set of flags.",22,{"i":[{"n":"self"}],"o":{"n":"memfdcreateflag"}}],[11,"from_iter","","",22,{"i":[{"n":"t"}],"o":{"n":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[5,"ioc_dir","nix::sys::ioctl","Extracts the \"direction\" (read/write/none) from an encoded ioctl command.",null,{"i":[{"n":"u32"}],"o":{"n":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"i":[{"n":"u32"}],"o":{"n":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"i":[{"n":"u32"}],"o":{"n":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"i":[{"n":"u32"}],"o":{"n":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"sendfile","nix::sys","",null,null],[5,"sendfile","nix::sys::sendfile","",null,{"i":[{"n":"rawfd"},{"n":"rawfd"},{"g":["off_t"],"n":"option"},{"n":"usize"}],"o":{"g":["usize"],"n":"result"}}],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[3,"SaFlag","","",null,null],[3,"SigFlag","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",23,null],[13,"SigIgn","","",23,null],[13,"Handler","","",23,null],[13,"SigAction","","",23,null],[5,"sigaction","","",null,{"i":[{"n":"signum"},{"n":"sigaction"}],"o":{"g":["sigaction"],"n":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"i":[{"n":"sigflag"},{"g":["sigset"],"n":"option"},{"g":["sigset"],"n":"option"}],"o":{"n":"result"}}],[5,"kill","","",null,{"i":[{"n":"pid_t"},{"n":"signum"}],"o":{"n":"result"}}],[5,"raise","","",null,{"i":[{"n":"signum"}],"o":{"n":"result"}}],[6,"SigNum","","",null,null],[17,"SIGEMT","","",null,null],[17,"NSIG","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"saflag"}}],[11,"partial_cmp","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"le","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"gt","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"ge","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"cmp","","",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"ordering"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",24,{"o":{"n":"saflag"}}],[11,"all","","Returns the set containing all flags.",24,{"o":{"n":"saflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",24,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",24,{"i":[{"n":"c_int"}],"o":{"g":["saflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",24,{"i":[{"n":"c_int"}],"o":{"n":"saflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",24,{"i":[{"n":"self"},{"n":"saflag"}]}],[11,"remove","","Removes the specified flags in-place.",24,{"i":[{"n":"self"},{"n":"saflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",24,{"i":[{"n":"self"},{"n":"saflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"saflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"saflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"saflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",24,{"i":[{"n":"self"},{"n":"saflag"}],"o":{"n":"saflag"}}],[11,"not","","Returns the complement of this set of flags.",24,{"i":[{"n":"self"}],"o":{"n":"saflag"}}],[11,"from_iter","","",24,{"i":[{"n":"t"}],"o":{"n":"saflag"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"sigflag"}}],[11,"partial_cmp","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"le","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"gt","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"ge","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"cmp","","",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"ordering"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",25,{"o":{"n":"sigflag"}}],[11,"all","","Returns the set containing all flags.",25,{"o":{"n":"sigflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",25,{"i":[{"n":"c_int"}],"o":{"g":["sigflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",25,{"i":[{"n":"c_int"}],"o":{"n":"sigflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"i":[{"n":"self"},{"n":"sigflag"}]}],[11,"remove","","Removes the specified flags in-place.",25,{"i":[{"n":"self"},{"n":"sigflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",25,{"i":[{"n":"self"},{"n":"sigflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"sigflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"sigflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"sigflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"n":"sigflag"}}],[11,"not","","Returns the complement of this set of flags.",25,{"i":[{"n":"self"}],"o":{"n":"sigflag"}}],[11,"from_iter","","",25,{"i":[{"n":"t"}],"o":{"n":"sigflag"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"sigset"}}],[11,"all","","",26,{"o":{"n":"sigset"}}],[11,"empty","","",26,{"o":{"n":"sigset"}}],[11,"add","","",26,{"i":[{"n":"self"},{"n":"signum"}],"o":{"n":"result"}}],[11,"remove","","",26,{"i":[{"n":"self"},{"n":"signum"}],"o":{"n":"result"}}],[11,"contains","","",26,{"i":[{"n":"self"},{"n":"signum"}],"o":{"g":["bool"],"n":"result"}}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",26,{"o":{"g":["sigset"],"n":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",26,{"i":[{"n":"self"},{"n":"sigflag"}],"o":{"g":["sigset"],"n":"result"}}],[11,"wait","","Suspends execution of the calling thread until one of the signals in the signal mask becomes pending, and returns the accepted signal.",26,{"i":[{"n":"self"}],"o":{"g":["signum"],"n":"result"}}],[11,"as_ref","","",26,{"i":[{"n":"self"}],"o":{"n":"sigset_t"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"sighandler"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"sighandler"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"sighandler"}],"o":{"n":"bool"}}],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the type of the `handler` argument.",27,{"i":[{"n":"sighandler"},{"n":"saflag"},{"n":"sigset"}],"o":{"n":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",28,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",29,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",30,null],[12,"sa_data","","",30,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",31,null],[12,"sin_port","","",31,null],[12,"sin_addr","","",31,null],[12,"sin_zero","","",31,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",32,null],[12,"sin6_port","","",32,null],[12,"sin6_flowinfo","","",32,null],[12,"sin6_addr","","",32,null],[12,"sin6_scope_id","","",32,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",33,null],[12,"sun_path","","",33,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",34,null],[3,"UnixAddr","","A wrapper around sockaddr_un. We track the length of sun_path, because it may not be null-terminated (unconnected and abstract sockets). Note that the actual sockaddr length is greater by size_of::<sa_family_t>().",null,null],[12,"0","","",35,null],[12,"1","","",35,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",36,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",37,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",38,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",39,null],[12,"imr_interface","","",39,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",40,null],[12,"ipv6mr_interface","","",40,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The size and alignment match that of a cmsghdr followed by a T, but the fields are not accessible, as the actual types will change on a call to recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",41,null],[12,"address","","",41,null],[12,"flags","","",41,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",42,null],[12,"l_linger","","",42,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",43,null],[13,"Inet","","",43,null],[13,"Inet6","","",43,null],[13,"Netlink","","",43,null],[13,"Packet","","",43,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",44,null],[13,"Unix","","",44,null],[13,"Netlink","","",44,null],[4,"InetAddr","","",null,null],[13,"V4","","",45,null],[13,"V6","","",45,null],[4,"IpAddr","","",null,null],[13,"V4","","",46,null],[13,"V6","","",46,null],[4,"SockType","","",null,null],[13,"Stream","","",47,null],[13,"Datagram","","",47,null],[13,"SeqPacket","","",47,null],[13,"Raw","","",47,null],[13,"Rdm","","",47,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may be added to this enum; do not exhaustively pattern-match it. Further reading",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file descriptors passed between processes. See the description in the \"Ancillary messages\" section of the unix(7) man page.",48,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an argument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",49,null],[13,"Tcp","","",49,null],[13,"Ip","","",49,null],[13,"Ipv6","","",49,null],[13,"Udp","","",49,null],[13,"Netlink","","",49,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",50,null],[13,"Write","","Further  transmissions will be disallowed.",50,null],[13,"Both","","Further receptions and transmissions will be disallowed.",50,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied by ancillary data. Optionally direct the message at the given address, as with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and optionally receive ancillary data into the provided buffer. If no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"i":[{"n":"addressfamily"},{"n":"socktype"},{"n":"sockflag"},{"n":"c_int"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"i":[{"n":"addressfamily"},{"n":"socktype"},{"n":"c_int"},{"n":"sockflag"}],"o":{"n":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"i":[{"n":"rawfd"},{"n":"usize"}],"o":{"n":"result"}}],[5,"bind","","Bind a name to a socket",null,{"i":[{"n":"rawfd"},{"n":"sockaddr"}],"o":{"n":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"i":[{"n":"rawfd"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"i":[{"n":"rawfd"},{"n":"sockflag"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"i":[{"n":"rawfd"},{"n":"sockaddr"}],"o":{"n":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of bytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns the number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"i":[{"n":"rawfd"},{"n":"o"}],"o":{"n":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,null],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"i":[{"n":"rawfd"}],"o":{"g":["sockaddr"],"n":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"i":[{"n":"rawfd"}],"o":{"g":["sockaddr"],"n":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"i":[{"n":"sockaddr_storage"},{"n":"usize"}],"o":{"g":["sockaddr"],"n":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"i":[{"n":"rawfd"},{"n":"shutdown"}],"o":{"n":"result"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"netlinkaddr"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"hash","","",38,{"i":[{"n":"self"},{"n":"h"}]}],[11,"new","","",38,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"netlinkaddr"}}],[11,"pid","","",38,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"groups","","",38,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"addressfamily"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"addressfamily"}],"o":{"n":"bool"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",43,null],[11,"from_std","","",45,{"i":[{"n":"socketaddr"}],"o":{"n":"inetaddr"}}],[11,"new","","",45,{"i":[{"n":"ipaddr"},{"n":"u16"}],"o":{"n":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",45,{"i":[{"n":"self"}],"o":{"n":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",45,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"to_std","","",45,{"i":[{"n":"self"}],"o":{"n":"socketaddr"}}],[11,"to_str","","",45,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"inetaddr"}],"o":{"n":"bool"}}],[11,"hash","","",45,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"inetaddr"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",46,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",46,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ipaddr"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",36,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"ipv4addr"}}],[11,"from_std","","",36,{"i":[{"n":"ipv4addr"}],"o":{"n":"ipv4addr"}}],[11,"any","","",36,{"o":{"n":"ipv4addr"}}],[11,"octets","","",36,null],[11,"to_std","","",36,{"i":[{"n":"self"}],"o":{"n":"ipv4addr"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"ipv4addr"}],"o":{"n":"bool"}}],[11,"hash","","",36,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"ipv4addr"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"ipv6addr"}}],[11,"new","","",37,{"i":[{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"},{"n":"u16"}],"o":{"n":"ipv6addr"}}],[11,"from_std","","",37,{"i":[{"n":"ipv6addr"}],"o":{"n":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",37,null],[11,"to_std","","",37,{"i":[{"n":"self"}],"o":{"n":"ipv6addr"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",35,{"i":[{"n":"p"}],"o":{"g":["unixaddr"],"n":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the \"abstract namespace\". This is a Linux-specific extension, primarily used to allow chrooted processes to communicate with specific daemons.",35,null],[11,"path","","If this address represents a filesystem path, return that path.",35,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"unixaddr"}],"o":{"n":"bool"}}],[11,"hash","","",35,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"unixaddr"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_inet","","",44,{"i":[{"n":"inetaddr"}],"o":{"n":"sockaddr"}}],[11,"new_unix","","",44,{"i":[{"n":"p"}],"o":{"g":["sockaddr"],"n":"result"}}],[11,"new_netlink","","",44,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"sockaddr"}}],[11,"family","","",44,{"i":[{"n":"self"}],"o":{"n":"addressfamily"}}],[11,"to_str","","",44,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"as_ffi_pair","","",44,null],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"sockaddr"}],"o":{"n":"bool"}}],[11,"hash","","",44,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"sockaddr"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"msgflags"}}],[11,"partial_cmp","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"le","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"gt","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"ge","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"cmp","","",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"ordering"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",51,{"o":{"n":"msgflags"}}],[11,"all","","Returns the set containing all flags.",51,{"o":{"n":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",51,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",51,{"i":[{"n":"c_int"}],"o":{"g":["msgflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",51,{"i":[{"n":"c_int"}],"o":{"n":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",51,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",51,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",51,{"i":[{"n":"self"},{"n":"msgflags"}]}],[11,"remove","","Removes the specified flags in-place.",51,{"i":[{"n":"self"},{"n":"msgflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",51,{"i":[{"n":"self"},{"n":"msgflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"msgflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"msgflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"msgflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",51,{"i":[{"n":"self"},{"n":"msgflags"}],"o":{"n":"msgflags"}}],[11,"not","","Returns the complement of this set of flags.",51,{"i":[{"n":"self"}],"o":{"n":"msgflags"}}],[11,"from_iter","","",51,{"i":[{"n":"t"}],"o":{"n":"msgflags"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"ip_mreq"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",39,{"i":[{"n":"ipv4addr"},{"g":["ipv4addr"],"n":"option"}],"o":{"n":"ip_mreq"}}],[11,"new","","",40,{"i":[{"n":"ipv6addr"}],"o":{"n":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"reuseaddr"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",52,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",52,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"reuseport"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",53,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",53,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"tcpnodelay"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",54,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",54,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"linger"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",55,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"linger"}],"o":{"n":"result"}}],[11,"get","","",55,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["linger"],"n":"result"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"ipaddmembership"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",56,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"ip_mreq"}],"o":{"n":"result"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"ipdropmembership"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",57,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"ip_mreq"}],"o":{"n":"result"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"ipv6addmembership"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",58,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"ipv6_mreq"}],"o":{"n":"result"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"ipv6dropmembership"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",59,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"ipv6_mreq"}],"o":{"n":"result"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"ipmulticastttl"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",60,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"u8"}],"o":{"n":"result"}}],[11,"get","","",60,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["u8"],"n":"result"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"ipmulticastloop"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",61,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",61,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"receivetimeout"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",62,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"timeval"}],"o":{"n":"result"}}],[11,"get","","",62,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["timeval"],"n":"result"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"sendtimeout"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",63,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"timeval"}],"o":{"n":"result"}}],[11,"get","","",63,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["timeval"],"n":"result"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"broadcast"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",64,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",64,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"oobinline"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",65,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",65,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"socketerror"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","",66,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["i32"],"n":"result"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"keepalive"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",67,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"bool"}],"o":{"n":"result"}}],[11,"get","","",67,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"peercredentials"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","",68,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["ucred"],"n":"result"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"tcpkeepidle"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",69,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"u32"}],"o":{"n":"result"}}],[11,"get","","",69,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["u32"],"n":"result"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"rcvbuf"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",70,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"usize"}],"o":{"n":"result"}}],[11,"get","","",70,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["usize"],"n":"result"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"sndbuf"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",71,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"usize"}],"o":{"n":"result"}}],[11,"get","","",71,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["usize"],"n":"result"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"rcvbufforce"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",72,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"usize"}],"o":{"n":"result"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"sndbufforce"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"set","","",73,{"i":[{"n":"self"},{"n":"rawfd"},{"n":"usize"}],"o":{"n":"result"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"socktype"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","",74,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["socktype"],"n":"result"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"acceptconn"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","",75,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `getsockopt`",null,null],[16,"Val","","",76,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `setsockopt`",null,null],[16,"Val","","",77,null],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"socktype"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"socktype"}],"o":{"n":"bool"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"ne","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"sockflag"}}],[11,"partial_cmp","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"le","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"gt","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"ge","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"cmp","","",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"ordering"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",78,{"o":{"n":"sockflag"}}],[11,"all","","Returns the set containing all flags.",78,{"o":{"n":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",78,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",78,{"i":[{"n":"c_int"}],"o":{"g":["sockflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",78,{"i":[{"n":"c_int"}],"o":{"n":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",78,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",78,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",78,{"i":[{"n":"self"},{"n":"sockflag"}]}],[11,"remove","","Removes the specified flags in-place.",78,{"i":[{"n":"self"},{"n":"sockflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",78,{"i":[{"n":"self"},{"n":"sockflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",78,{"i":[{"n":"self"},{"n":"sockflag"}],"o":{"n":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",78,{"i":[{"n":"self"}],"o":{"n":"sockflag"}}],[11,"from_iter","","",78,{"i":[{"n":"t"}],"o":{"n":"sockflag"}}],[11,"new","","Create a CmsgSpace. The structure is used only for space, so the fields are uninitialized.",79,{"o":{"n":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this msghdr.",41,{"i":[{"n":"self"}],"o":{"n":"cmsgiterator"}}],[11,"next","","",80,{"i":[{"n":"self"}],"o":{"g":["controlmessage"],"n":"option"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"linger"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"ucred"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"ucred"}],"o":{"n":"bool"}}],[11,"ne","","",81,{"i":[{"n":"self"},{"n":"ucred"}],"o":{"n":"bool"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"bool"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",82,null],[12,"st_ino","","",82,null],[12,"st_nlink","","",82,null],[12,"st_mode","","",82,null],[12,"st_uid","","",82,null],[12,"st_gid","","",82,null],[12,"st_rdev","","",82,null],[12,"st_size","","",82,null],[12,"st_blksize","","",82,null],[12,"st_blocks","","",82,null],[12,"st_atime","","",82,null],[12,"st_atime_nsec","","",82,null],[12,"st_mtime","","",82,null],[12,"st_mtime_nsec","","",82,null],[12,"st_ctime","","",82,null],[12,"st_ctime_nsec","","",82,null],[5,"FileStat","","",null,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"i":[{"n":"p"},{"n":"sflag"},{"n":"mode"},{"n":"dev_t"}],"o":{"n":"result"}}],[5,"mkdev","","",null,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"dev_t"}}],[5,"umask","","",null,{"i":[{"n":"mode"}],"o":{"n":"mode"}}],[5,"stat","","",null,{"i":[{"n":"p"}],"o":{"g":["filestat"],"n":"result"}}],[5,"lstat","","",null,{"i":[{"n":"p"}],"o":{"g":["filestat"],"n":"result"}}],[5,"fstat","","",null,{"i":[{"n":"rawfd"}],"o":{"g":["filestat"],"n":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"ne","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"sflag"}}],[11,"partial_cmp","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"le","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"gt","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"ge","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"cmp","","",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"ordering"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",83,{"o":{"n":"sflag"}}],[11,"all","","Returns the set containing all flags.",83,{"o":{"n":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,{"i":[{"n":"self"}],"o":{"n":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",83,{"i":[{"n":"mode_t"}],"o":{"g":["sflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",83,{"i":[{"n":"mode_t"}],"o":{"n":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",83,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",83,{"i":[{"n":"self"},{"n":"sflag"}]}],[11,"remove","","Removes the specified flags in-place.",83,{"i":[{"n":"self"},{"n":"sflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",83,{"i":[{"n":"self"},{"n":"sflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",83,{"i":[{"n":"self"},{"n":"sflag"}],"o":{"n":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",83,{"i":[{"n":"self"}],"o":{"n":"sflag"}}],[11,"from_iter","","",83,{"i":[{"n":"t"}],"o":{"n":"sflag"}}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"mode"}}],[11,"partial_cmp","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"le","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"gt","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"ge","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"cmp","","",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"ordering"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",84,{"o":{"n":"mode"}}],[11,"all","","Returns the set containing all flags.",84,{"o":{"n":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,{"i":[{"n":"self"}],"o":{"n":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",84,{"i":[{"n":"mode_t"}],"o":{"g":["mode"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",84,{"i":[{"n":"mode_t"}],"o":{"n":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",84,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",84,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"remove","","Removes the specified flags in-place.",84,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"toggle","","Toggles the specified flags in-place.",84,{"i":[{"n":"self"},{"n":"mode"}]}],[11,"bitor","","Returns the union of the two sets of flags.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",84,{"i":[{"n":"self"},{"n":"mode"}],"o":{"n":"mode"}}],[11,"not","","Returns the complement of this set of flags.",84,{"i":[{"n":"self"}],"o":{"n":"mode"}}],[11,"from_iter","","",84,{"i":[{"n":"t"}],"o":{"n":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",85,null],[12,"c_oflag","","",85,null],[12,"c_cflag","","",85,null],[12,"c_lflag","","",85,null],[12,"c_line","","",85,null],[12,"c_cc","","",85,null],[12,"c_ispeed","","",85,null],[12,"c_ospeed","","",85,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",86,null],[13,"TCSADRAIN","","",86,null],[13,"TCSAFLUSH","","",86,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",87,null],[13,"TCOFLUSH","","",87,null],[13,"TCIOFLUSH","","",87,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",88,null],[13,"TCOON","","",88,null],[13,"TCIOFF","","",88,null],[13,"TCION","","",88,null],[5,"cfgetispeed","","",null,{"i":[{"n":"termios"}],"o":{"n":"speed_t"}}],[5,"cfgetospeed","","",null,{"i":[{"n":"termios"}],"o":{"n":"speed_t"}}],[5,"cfsetispeed","","",null,{"i":[{"n":"termios"},{"n":"speed_t"}],"o":{"n":"result"}}],[5,"cfsetospeed","","",null,{"i":[{"n":"termios"},{"n":"speed_t"}],"o":{"n":"result"}}],[5,"tcgetattr","","",null,{"i":[{"n":"rawfd"}],"o":{"g":["termios"],"n":"result"}}],[5,"tcsetattr","","",null,{"i":[{"n":"rawfd"},{"n":"setarg"},{"n":"termios"}],"o":{"n":"result"}}],[5,"tcdrain","","",null,{"i":[{"n":"rawfd"}],"o":{"n":"result"}}],[5,"tcflow","","",null,{"i":[{"n":"rawfd"},{"n":"flowarg"}],"o":{"n":"result"}}],[5,"tcflush","","",null,{"i":[{"n":"rawfd"},{"n":"flusharg"}],"o":{"n":"result"}}],[5,"tcsendbreak","","",null,{"i":[{"n":"rawfd"},{"n":"c_int"}],"o":{"n":"result"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"termios"}}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"ne","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"inputflags"}}],[11,"partial_cmp","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"le","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"gt","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"ge","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"cmp","","",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"ordering"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",89,{"o":{"n":"inputflags"}}],[11,"all","","Returns the set containing all flags.",89,{"o":{"n":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,{"i":[{"n":"self"}],"o":{"n":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",89,{"i":[{"n":"tcflag_t"}],"o":{"g":["inputflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",89,{"i":[{"n":"tcflag_t"}],"o":{"n":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",89,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",89,{"i":[{"n":"self"},{"n":"inputflags"}]}],[11,"remove","","Removes the specified flags in-place.",89,{"i":[{"n":"self"},{"n":"inputflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",89,{"i":[{"n":"self"},{"n":"inputflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",89,{"i":[{"n":"self"},{"n":"inputflags"}],"o":{"n":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",89,{"i":[{"n":"self"}],"o":{"n":"inputflags"}}],[11,"from_iter","","",89,{"i":[{"n":"t"}],"o":{"n":"inputflags"}}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"ne","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"outputflags"}}],[11,"partial_cmp","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"le","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"gt","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"ge","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"cmp","","",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"ordering"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",90,{"o":{"n":"outputflags"}}],[11,"all","","Returns the set containing all flags.",90,{"o":{"n":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"i":[{"n":"self"}],"o":{"n":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",90,{"i":[{"n":"tcflag_t"}],"o":{"g":["outputflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",90,{"i":[{"n":"tcflag_t"}],"o":{"n":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"i":[{"n":"self"},{"n":"outputflags"}]}],[11,"remove","","Removes the specified flags in-place.",90,{"i":[{"n":"self"},{"n":"outputflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",90,{"i":[{"n":"self"},{"n":"outputflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"i":[{"n":"self"},{"n":"outputflags"}],"o":{"n":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",90,{"i":[{"n":"self"}],"o":{"n":"outputflags"}}],[11,"from_iter","","",90,{"i":[{"n":"t"}],"o":{"n":"outputflags"}}],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"ne","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"controlflags"}}],[11,"partial_cmp","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"le","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"gt","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"ge","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"cmp","","",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"ordering"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",91,{"o":{"n":"controlflags"}}],[11,"all","","Returns the set containing all flags.",91,{"o":{"n":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",91,{"i":[{"n":"self"}],"o":{"n":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",91,{"i":[{"n":"tcflag_t"}],"o":{"g":["controlflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",91,{"i":[{"n":"tcflag_t"}],"o":{"n":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",91,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",91,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",91,{"i":[{"n":"self"},{"n":"controlflags"}]}],[11,"remove","","Removes the specified flags in-place.",91,{"i":[{"n":"self"},{"n":"controlflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",91,{"i":[{"n":"self"},{"n":"controlflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",91,{"i":[{"n":"self"},{"n":"controlflags"}],"o":{"n":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",91,{"i":[{"n":"self"}],"o":{"n":"controlflags"}}],[11,"from_iter","","",91,{"i":[{"n":"t"}],"o":{"n":"controlflags"}}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"ne","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"localflags"}}],[11,"partial_cmp","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"le","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"gt","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"ge","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"cmp","","",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"ordering"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",92,{"o":{"n":"localflags"}}],[11,"all","","Returns the set containing all flags.",92,{"o":{"n":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",92,{"i":[{"n":"self"}],"o":{"n":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",92,{"i":[{"n":"tcflag_t"}],"o":{"g":["localflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",92,{"i":[{"n":"tcflag_t"}],"o":{"n":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",92,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",92,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",92,{"i":[{"n":"self"},{"n":"localflags"}]}],[11,"remove","","Removes the specified flags in-place.",92,{"i":[{"n":"self"},{"n":"localflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",92,{"i":[{"n":"self"},{"n":"localflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",92,{"i":[{"n":"self"},{"n":"localflags"}],"o":{"n":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",92,{"i":[{"n":"self"}],"o":{"n":"localflags"}}],[11,"from_iter","","",92,{"i":[{"n":"t"}],"o":{"n":"localflags"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"setarg"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"flusharg"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"flowarg"}}],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"o":{"n":"utsname"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"utsname"}}],[11,"sysname","","",93,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"nodename","","",93,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"release","","",93,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"version","","",93,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"machine","","",93,{"i":[{"n":"self"}],"o":{"n":"str"}}],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",94,null],[13,"Signaled","","",94,null],[13,"Stopped","","",94,null],[13,"Continued","","",94,null],[13,"StillAlive","","",94,null],[5,"waitpid","","",null,{"i":[{"n":"pid_t"},{"g":["waitpidflag"],"n":"option"}],"o":{"g":["waitstatus"],"n":"result"}}],[5,"wait","","",null,{"o":{"g":["waitstatus"],"n":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"ne","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"waitpidflag"}}],[11,"partial_cmp","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"le","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"gt","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"ge","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"cmp","","",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"ordering"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",95,{"o":{"n":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",95,{"o":{"n":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",95,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",95,{"i":[{"n":"c_int"}],"o":{"g":["waitpidflag"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",95,{"i":[{"n":"c_int"}],"o":{"n":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",95,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}]}],[11,"remove","","Removes the specified flags in-place.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}]}],[11,"toggle","","Toggles the specified flags in-place.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}]}],[11,"bitor","","Returns the union of the two sets of flags.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",95,{"i":[{"n":"self"},{"n":"waitpidflag"}],"o":{"n":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",95,{"i":[{"n":"self"}],"o":{"n":"waitpidflag"}}],[11,"from_iter","","",95,{"i":[{"n":"t"}],"o":{"n":"waitpidflag"}}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"waitstatus"}],"o":{"n":"bool"}}],[11,"ne","","",94,{"i":[{"n":"self"},{"n":"waitstatus"}],"o":{"n":"bool"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"waitstatus"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically a higher-level abstraction will hide the unsafe interactions with the mmap'd region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"i":[{"n":"p"},{"n":"oflag"},{"n":"mode"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"shm_unlink","","",null,{"i":[{"n":"p"}],"o":{"n":"result"}}],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"ne","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"partial_cmp","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"le","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"gt","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"ge","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"cmp","","",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"ordering"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",96,{"o":{"n":"mapflags"}}],[11,"all","","Returns the set containing all flags.",96,{"o":{"n":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",96,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",96,{"i":[{"n":"c_int"}],"o":{"g":["mapflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",96,{"i":[{"n":"c_int"}],"o":{"n":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",96,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",96,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"remove","","Removes the specified flags in-place.",96,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",96,{"i":[{"n":"self"},{"n":"mapflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",96,{"i":[{"n":"self"},{"n":"mapflags"}],"o":{"n":"mapflags"}}],[11,"not","","Returns the complement of this set of flags.",96,{"i":[{"n":"self"}],"o":{"n":"mapflags"}}],[11,"from_iter","","",96,{"i":[{"n":"t"}],"o":{"n":"mapflags"}}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"ne","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"msflags"}}],[11,"partial_cmp","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"le","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"gt","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"ge","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"cmp","","",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"ordering"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",97,{"o":{"n":"msflags"}}],[11,"all","","Returns the set containing all flags.",97,{"o":{"n":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",97,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",97,{"i":[{"n":"c_int"}],"o":{"g":["msflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",97,{"i":[{"n":"c_int"}],"o":{"n":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",97,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",97,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"remove","","Removes the specified flags in-place.",97,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",97,{"i":[{"n":"self"},{"n":"msflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",97,{"i":[{"n":"self"},{"n":"msflags"}],"o":{"n":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",97,{"i":[{"n":"self"}],"o":{"n":"msflags"}}],[11,"from_iter","","",97,{"i":[{"n":"t"}],"o":{"n":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"ne","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"protflags"}}],[11,"partial_cmp","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"le","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"gt","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"ge","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"cmp","","",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"ordering"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",98,{"o":{"n":"protflags"}}],[11,"all","","Returns the set containing all flags.",98,{"o":{"n":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",98,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",98,{"i":[{"n":"c_int"}],"o":{"g":["protflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",98,{"i":[{"n":"c_int"}],"o":{"n":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",98,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",98,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",98,{"i":[{"n":"self"},{"n":"protflags"}]}],[11,"remove","","Removes the specified flags in-place.",98,{"i":[{"n":"self"},{"n":"protflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",98,{"i":[{"n":"self"},{"n":"protflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"protflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"protflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"protflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",98,{"i":[{"n":"self"},{"n":"protflags"}],"o":{"n":"protflags"}}],[11,"not","","Returns the complement of this set of flags.",98,{"i":[{"n":"self"}],"o":{"n":"protflags"}}],[11,"from_iter","","",98,{"i":[{"n":"t"}],"o":{"n":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",99,null],[11,"from_slice","","",99,null],[11,"from_mut_slice","","",99,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",100,null],[12,"tv_usec","","",100,null],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"timeval"}}],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"ne","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"le","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"gt","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"ge","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"bool"}}],[11,"cmp","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"ordering"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"zero","","",100,{"o":{"n":"timeval"}}],[11,"hours","","",100,{"i":[{"n":"i64"}],"o":{"n":"timeval"}}],[11,"minutes","","",100,{"i":[{"n":"i64"}],"o":{"n":"timeval"}}],[11,"seconds","","",100,{"i":[{"n":"i64"}],"o":{"n":"timeval"}}],[11,"milliseconds","","",100,{"i":[{"n":"i64"}],"o":{"n":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",100,{"i":[{"n":"i64"}],"o":{"n":"timeval"}}],[11,"num_hours","","",100,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_minutes","","",100,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_seconds","","",100,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_milliseconds","","",100,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_microseconds","","",100,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"neg","","",100,{"i":[{"n":"self"}],"o":{"n":"timeval"}}],[11,"add","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"timeval"}}],[11,"sub","","",100,{"i":[{"n":"self"},{"n":"timeval"}],"o":{"n":"timeval"}}],[11,"mul","","",100,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"timeval"}}],[11,"div","","",100,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"timeval"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[5,"ptrace_setoptions","","Set options, as with ptrace(PTRACE_SETOPTIONS,...).",null,{"i":[{"n":"pid_t"},{"n":"ptraceoptions"}],"o":{"n":"result"}}],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[6,"PtraceEvent","","",null,null],[6,"PtraceOptions","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"i":[{"n":"c_int"},{"g":["fdset"],"n":"option"},{"g":["fdset"],"n":"option"},{"g":["fdset"],"n":"option"},{"g":["timeval"],"n":"option"}],"o":{"g":["c_int"],"n":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"fdset"}}],[11,"new","","",101,{"o":{"n":"fdset"}}],[11,"insert","","",101,{"i":[{"n":"self"},{"n":"rawfd"}]}],[11,"remove","","",101,{"i":[{"n":"self"},{"n":"rawfd"}]}],[11,"contains","","",101,{"i":[{"n":"self"},{"n":"rawfd"}],"o":{"n":"bool"}}],[11,"clear","","",101,{"i":[{"n":"self"}]}],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"i":[{"n":"quotatype"},{"n":"p"},{"n":"quotafmt"},{"n":"p"}],"o":{"n":"result"}}],[5,"quotactl_off","","",null,{"i":[{"n":"quotatype"},{"n":"p"}],"o":{"n":"result"}}],[5,"quotactl_sync","","",null,{"i":[{"n":"quotatype"},{"n":"option"}],"o":{"n":"result"}}],[5,"quotactl_get","","",null,{"i":[{"n":"quotatype"},{"n":"p"},{"n":"c_int"},{"n":"dqblk"}],"o":{"n":"result"}}],[5,"quotactl_set","","",null,{"i":[{"n":"quotatype"},{"n":"p"},{"n":"c_int"},{"n":"dqblk"}],"o":{"n":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[12,"0","","",102,null],[12,"1","","",102,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",103,null],[12,"bsoftlimit","","",103,null],[12,"curspace","","",103,null],[12,"ihardlimit","","",103,null],[12,"isoftlimit","","",103,null],[12,"curinodes","","",103,null],[12,"btime","","",103,null],[12,"itime","","",103,null],[12,"valid","","",103,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",102,{"i":[{"n":"self"}],"o":{"n":"c_int"}}],[11,"eq","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"ne","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"quotavalidflags"}}],[11,"partial_cmp","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"le","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"gt","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"ge","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"cmp","","",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"ordering"}}],[11,"hash","","",104,null],[11,"default","","",104,{"o":{"n":"quotavalidflags"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",104,{"o":{"n":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",104,{"o":{"n":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",104,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",104,{"i":[{"n":"u32"}],"o":{"g":["quotavalidflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",104,{"i":[{"n":"u32"}],"o":{"n":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",104,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",104,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}]}],[11,"remove","","Removes the specified flags in-place.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"quotavalidflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"quotavalidflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"quotavalidflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",104,{"i":[{"n":"self"},{"n":"quotavalidflags"}],"o":{"n":"quotavalidflags"}}],[11,"not","","Returns the complement of this set of flags.",104,{"i":[{"n":"self"}],"o":{"n":"quotavalidflags"}}],[11,"from_iter","","",104,{"i":[{"n":"t"}],"o":{"n":"quotavalidflags"}}],[11,"default","","",103,{"o":{"n":"dqblk"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"i":[{"n":"p"},{"n":"statfs"}],"o":{"n":"result"}}],[5,"fstatfs","","",null,{"i":[{"n":"t"},{"n":"statfs"}],"o":{"n":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",105,null],[12,"f_bsize","","",105,null],[12,"f_blocks","","",105,null],[12,"f_bfree","","",105,null],[12,"f_bavail","","",105,null],[12,"f_files","","",105,null],[12,"f_ffree","","",105,null],[12,"f_fsid","","",105,null],[12,"f_namelen","","",105,null],[12,"f_frsize","","",105,null],[12,"f_spare","","",105,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"statfs"}}],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"i":[{"n":"p"},{"n":"statvfs"}],"o":{"n":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"i":[{"n":"t"},{"n":"statvfs"}],"o":{"n":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to most efficient use of the filesystem",106,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this filesystem",106,null],[12,"f_blocks","","Total number of blocks on the filesystem",106,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those reserved for root",106,null],[12,"f_bavail","","Number of blocks available to non-root users",106,null],[12,"f_files","","Total number of inodes available on the filesystem",106,null],[12,"f_ffree","","Number of inodes available on the filesystem",106,null],[12,"f_favail","","Number of inodes available to non-root users",106,null],[12,"f_fsid","","File System ID",106,null],[12,"f_flag","","Mount Flags",106,null],[12,"f_namemax","","Maximum filename length",106,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"ne","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"fsflags"}}],[11,"partial_cmp","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"le","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"gt","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"ge","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"cmp","","",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"ordering"}}],[11,"hash","","",107,null],[11,"default","","",107,{"o":{"n":"fsflags"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",107,{"o":{"n":"fsflags"}}],[11,"all","","Returns the set containing all flags.",107,{"o":{"n":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",107,{"i":[{"n":"self"}],"o":{"n":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",107,{"i":[{"n":"c_ulong"}],"o":{"g":["fsflags"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",107,{"i":[{"n":"c_ulong"}],"o":{"n":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",107,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"fsflags"}]}],[11,"remove","","Removes the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"fsflags"}]}],[11,"toggle","","Toggles the specified flags in-place.",107,{"i":[{"n":"self"},{"n":"fsflags"}]}],[11,"bitor","","Returns the union of the two sets of flags.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"fsflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"fsflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"fsflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",107,{"i":[{"n":"self"},{"n":"fsflags"}],"o":{"n":"fsflags"}}],[11,"not","","Returns the complement of this set of flags.",107,{"i":[{"n":"self"}],"o":{"n":"fsflags"}}],[11,"from_iter","","",107,{"i":[{"n":"t"}],"o":{"n":"fsflags"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"statvfs"}}],[11,"for_path","","Create a new `Statvfs` object and fill it with information about the mount that contains `path`",106,{"i":[{"n":"p"}],"o":{"g":["statvfs"],"n":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",106,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"result"}}],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",106,{"i":[{"n":"t"}],"o":{"g":["statvfs"],"n":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",106,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"default","","Create a statvfs object initialized to all zeros",106,{"o":{"n":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",108,null],[13,"Child","","",108,null],[5,"pivot_root","","",null,{"i":[{"n":"p1"},{"n":"p2"}],"o":{"n":"result"}}],[5,"fork","","",null,{"o":{"g":["fork"],"n":"result"}}],[5,"getpid","","",null,{"o":{"n":"pid_t"}}],[5,"getppid","","",null,{"o":{"n":"pid_t"}}],[5,"setpgid","","",null,{"i":[{"n":"pid_t"},{"n":"pid_t"}],"o":{"n":"result"}}],[5,"dup","","",null,{"i":[{"n":"rawfd"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"dup2","","",null,{"i":[{"n":"rawfd"},{"n":"rawfd"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"dup3","","",null,{"i":[{"n":"rawfd"},{"n":"rawfd"},{"n":"oflag"}],"o":{"g":["rawfd"],"n":"result"}}],[5,"chdir","","",null,{"i":[{"n":"p"}],"o":{"n":"result"}}],[5,"chown","","",null,{"i":[{"n":"p"},{"g":["uid_t"],"n":"option"},{"g":["gid_t"],"n":"option"}],"o":{"n":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"i":[{"n":"bool"},{"n":"bool"}],"o":{"n":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"i":[{"n":"rawfd"}],"o":{"n":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"o":{"n":"result"}}],[5,"pipe2","","",null,{"i":[{"n":"oflag"}],"o":{"n":"result"}}],[5,"ftruncate","","",null,{"i":[{"n":"rawfd"},{"n":"off_t"}],"o":{"n":"result"}}],[5,"isatty","","",null,{"i":[{"n":"rawfd"}],"o":{"g":["bool"],"n":"result"}}],[5,"unlink","","",null,{"i":[{"n":"p"}],"o":{"n":"result"}}],[5,"chroot","","",null,{"i":[{"n":"p"}],"o":{"n":"result"}}],[5,"fsync","","",null,{"i":[{"n":"rawfd"}],"o":{"n":"result"}}],[5,"fdatasync","","",null,{"i":[{"n":"rawfd"}],"o":{"n":"result"}}],[5,"getuid","","",null,{"o":{"n":"uid_t"}}],[5,"geteuid","","",null,{"o":{"n":"uid_t"}}],[5,"getgid","","",null,{"o":{"n":"gid_t"}}],[5,"getegid","","",null,{"o":{"n":"gid_t"}}],[5,"setuid","","",null,{"i":[{"n":"uid_t"}],"o":{"n":"result"}}],[5,"setgid","","",null,{"i":[{"n":"gid_t"}],"o":{"n":"result"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"fork"}}],[11,"is_child","","",108,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_parent","","",108,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",109,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"with_nix_path","","",109,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from_errno","","",1,{"i":[{"n":"errno"}],"o":{"n":"error"}}],[11,"last","","",1,{"o":{"n":"error"}}],[11,"invalid_argument","","",1,{"o":{"n":"error"}}],[11,"errno","","",1,{"i":[{"n":"self"}],"o":{"n":"errno"}}],[11,"from","","",1,{"i":[{"n":"errno"}],"o":{"n":"error"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"ioc","","Encode an ioctl command.",null,null],[14,"io","","Encode an ioctl command that has no associated data.",null,null],[14,"ior","","Encode an ioctl command that reads.",null,null],[14,"iow","","Encode an ioctl command that writes.",null,null],[14,"iorw","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl","","Declare a wrapper function around an ioctl.",null,null],[11,"clone","nix::sys::socket","",34,{"i":[{"n":"self"}],"o":{"n":"sockaddr_storage"}}],[11,"clone","nix::sys::stat","",82,{"i":[{"n":"self"}],"o":{"n":"stat"}}],[11,"clone","nix::sys::socket","",29,{"i":[{"n":"self"}],"o":{"n":"in6_addr"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"sockaddr"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"sockaddr_un"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"in_addr"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"sockaddr_in6"}}]],"paths":[[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"SpliceFFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MqAttr"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"PollFd"],[3,"EventFlags"],[3,"CloneFlags"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"MemFdCreateFlag"],[4,"SigHandler"],[3,"SaFlag"],[3,"SigFlag"],[3,"SigSet"],[3,"SigAction"],[3,"in_addr"],[3,"in6_addr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"NetlinkAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"FileStat"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"Dqblk"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"]]};
searchIndex["notify"] = {"doc":"Cross-platform file system notification library","items":[[3,"RawEvent","notify","Event delivered when action occurs on a watched path in raw mode",null,null],[12,"path","","Path where the event originated.",0,null],[12,"op","","Operation detected on that path.",0,null],[12,"cookie","","Unique cookie associating related events (for `RENAME` events).",0,null],[4,"DebouncedEvent","","Event delivered when action occurs on a watched path in debounced mode",null,null],[13,"NoticeWrite","","`NoticeWrite` is emitted immediately after the first write event for the path.",1,null],[13,"NoticeRemove","","`NoticeRemove` is emitted immediately after a remove or rename event for the path.",1,null],[13,"Create","","`Create` is emitted when a file or directory has been created and no events were detected for the path within the specified time frame.",1,null],[13,"Write","","`Write` is emitted when a file has been written to and no events were detected for the path within the specified time frame.",1,null],[13,"Chmod","","`Chmod` is emitted when attributes have been changed and no events were detected for the path within the specified time frame.",1,null],[13,"Remove","","`Remove` is emitted when a file or directory has been removed and no events were detected for the path within the specified time frame.",1,null],[13,"Rename","","`Rename` is emitted when a file or directory has been moved within a watched directory and no events were detected for the new path within the specified time frame.",1,null],[13,"Rescan","","`Rescan` is emitted immediately after a problem has been detected that makes it necessary to re-scan the watched directories.",1,null],[13,"Error","","`Error` is emitted immediately after a error has been detected.",1,null],[4,"Error","","Errors generated from the `notify` crate",null,null],[13,"Generic","","Generic error",2,null],[13,"Io","","I/O errors",2,null],[13,"PathNotFound","","The provided path does not exist",2,null],[13,"WatchNotFound","","Attempted to remove a watch that does not exist",2,null],[4,"RecursiveMode","","Indicates whether only the provided directory or its sub-directories as well should be watched",null,null],[13,"Recursive","","Watch all sub-directories as well, including directories created after installing the watch",3,null],[13,"NonRecursive","","Watch only the provided directory",3,null],[5,"raw_watcher","","Convenience method for creating the `RecommendedWatcher` for the current platform in raw mode.",null,{"i":[{"g":["rawevent"],"n":"sender"}],"o":{"g":["recommendedwatcher"],"n":"result"}}],[5,"watcher","","Convenience method for creating the `RecommendedWatcher` for the current platform in default (debounced) mode.",null,{"i":[{"g":["debouncedevent"],"n":"sender"},{"n":"duration"}],"o":{"g":["recommendedwatcher"],"n":"result"}}],[0,"inotify","","Watcher implementation for the inotify Linux API",null,null],[3,"INotifyWatcher","notify::inotify","Watcher implementation based on inotify",null,null],[11,"new_raw","","",4,{"i":[{"g":["rawevent"],"n":"sender"}],"o":{"g":["inotifywatcher"],"n":"result"}}],[11,"new","","",4,{"i":[{"g":["debouncedevent"],"n":"sender"},{"n":"duration"}],"o":{"g":["inotifywatcher"],"n":"result"}}],[11,"watch","","",4,{"i":[{"n":"self"},{"n":"p"},{"n":"recursivemode"}],"o":{"n":"result"}}],[11,"unwatch","","",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"result"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[0,"null","notify","Stub Watcher implementation",null,null],[3,"NullWatcher","notify::null","Stub `Watcher` implementation",null,null],[11,"new_raw","","",5,{"i":[{"g":["rawevent"],"n":"sender"}],"o":{"g":["nullwatcher"],"n":"result"}}],[11,"new","","",5,{"i":[{"g":["debouncedevent"],"n":"sender"},{"n":"duration"}],"o":{"g":["nullwatcher"],"n":"result"}}],[11,"watch","","",5,{"i":[{"n":"self"},{"n":"p"},{"n":"recursivemode"}],"o":{"n":"result"}}],[11,"unwatch","","",5,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"result"}}],[0,"poll","notify","Generic Watcher implementation based on polling",null,null],[3,"PollWatcher","notify::poll","Polling based `Watcher` implementation",null,null],[11,"with_delay_ms","","Create a PollWatcher which polls every `delay` milliseconds",6,{"i":[{"g":["rawevent"],"n":"sender"},{"n":"u32"}],"o":{"g":["pollwatcher"],"n":"result"}}],[11,"new_raw","","",6,{"i":[{"g":["rawevent"],"n":"sender"}],"o":{"g":["pollwatcher"],"n":"result"}}],[11,"new","","",6,{"i":[{"g":["debouncedevent"],"n":"sender"},{"n":"duration"}],"o":{"g":["pollwatcher"],"n":"result"}}],[11,"watch","","",6,{"i":[{"n":"self"},{"n":"p"},{"n":"recursivemode"}],"o":{"n":"result"}}],[11,"unwatch","","",6,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"result"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[0,"op","notify","Contains the `Op` type which describes the actions for an event.",null,null],[3,"Op","notify::op","Holds a set of bit flags representing the actions for the event.",null,null],[17,"CHMOD","","Attributes changed",null,null],[17,"CREATE","","Created",null,null],[17,"REMOVE","","Removed",null,null],[17,"RENAME","","Renamed",null,null],[17,"WRITE","","Written",null,null],[17,"CLOSE_WRITE","","File opened for writing was closed",null,null],[17,"RESCAN","","Directories need to be rescanned",null,null],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"bool"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"op"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"bool"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"ordering"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",7,{"o":{"n":"op"}}],[11,"all","","Returns the set containing all flags.",7,{"o":{"n":"op"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,{"i":[{"n":"u32"}],"o":{"g":["op"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,{"i":[{"n":"u32"}],"o":{"n":"op"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"i":[{"n":"self"},{"n":"op"}]}],[11,"remove","","Removes the specified flags in-place.",7,{"i":[{"n":"self"},{"n":"op"}]}],[11,"toggle","","Toggles the specified flags in-place.",7,{"i":[{"n":"self"},{"n":"op"}]}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"op"}}],[11,"bitor_assign","","Adds the set of flags.",7,{"i":[{"n":"self"},{"n":"op"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"op"}}],[11,"bitxor_assign","","Toggles the set of flags.",7,{"i":[{"n":"self"},{"n":"op"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"op"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",7,{"i":[{"n":"self"},{"n":"op"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"op"}}],[11,"sub_assign","","Disables all flags enabled in the set.",7,{"i":[{"n":"self"},{"n":"op"}]}],[11,"not","","Returns the complement of this set of flags.",7,{"i":[{"n":"self"}],"o":{"n":"op"}}],[11,"extend","","",7,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",7,{"i":[{"n":"t"}],"o":{"n":"op"}}],[6,"Result","notify","Type alias to use this library's `Error` type in a Result",null,null],[6,"RecommendedWatcher","","The recommended `Watcher` implementation for the current platform",null,null],[8,"Watcher","","Type that can deliver file activity notifications",null,null],[10,"new_raw","","Create a new watcher in raw mode.",8,{"i":[{"g":["rawevent"],"n":"sender"}],"o":{"n":"result"}}],[10,"new","","Create a new debounced watcher with a `delay`.",8,{"i":[{"g":["debouncedevent"],"n":"sender"},{"n":"duration"}],"o":{"n":"result"}}],[10,"watch","","Begin watching a new path.",8,{"i":[{"n":"self"},{"n":"p"},{"n":"recursivemode"}],"o":{"n":"result"}}],[10,"unwatch","","Stop watching a path.",8,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"debouncedevent"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",2,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"RawEvent"],[4,"DebouncedEvent"],[4,"Error"],[4,"RecursiveMode"],[3,"INotifyWatcher"],[3,"NullWatcher"],[3,"PollWatcher"],[3,"Op"],[8,"Watcher"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",1,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",1,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"o":{"n":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",5,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",5,{"o":{"n":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",12,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",12,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",12,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",12,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",12,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",12,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",12,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",12,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",12,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",12,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",12,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"i":[{"n":"t"}],"o":{"n":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"i":[{"n":"self"}],"o":{"n":"t"}}],[5,"cast","num","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[0,"pow","","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[5,"pow","num","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"integer","","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"binomial","","Calculate the binomial coefficient.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[0,"iter","num","",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[0,"traits","num","",null,null],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"o":{"n":"self"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[5,"abs","","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",17,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",18,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[0,"wrapping","num::traits::ops","",null,null],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",19,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",20,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",21,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",5,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",5,{"o":{"n":"self"}}],[0,"float","num::traits","",null,null],[8,"Float","num::traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",12,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",12,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",12,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",12,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",12,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",12,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",12,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",12,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",12,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",12,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",12,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",22,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",22,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",22,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",22,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",22,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",22,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",22,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",22,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",22,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",22,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",22,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",22,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",22,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",22,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",22,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",22,{"o":{"n":"self"}}],[0,"real","num::traits","",null,null],[8,"Real","num::traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",23,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",23,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",23,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",23,{"o":{"n":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",23,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",23,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a real number power.",23,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",23,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts radians to degrees.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts degrees to radians.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",23,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",23,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",23,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",23,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",23,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",23,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",11,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[0,"pow","num::traits","",null,null],[5,"pow","num::traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",1,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",1,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",24,null],[13,"Invalid","","",24,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",25,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"next","num::integer","",26,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","num::iter","",27,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"rangestepinclusive"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"rangeinclusive"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"rangestep"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",28,null],[11,"next","","",27,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",30,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",29,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","num::integer","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",26,{"i":[{"n":"t"}],"o":{"n":"iterbinomial"}}]],"paths":[[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"FloatConst"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"IterBinomial"],[3,"RangeInclusive"],[3,"Range"],[3,"RangeStepInclusive"],[3,"RangeStep"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"o":{"n":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"o":{"n":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"i":[{"n":"t"}],"o":{"n":"iterbinomial"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"i":[{"n":"a"},{"n":"a"}],"o":{"n":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"i":[{"n":"a"},{"n":"a"},{"n":"a"}],"o":{"n":"rangestepinclusive"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"rangeinclusive"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"rangestep"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"rangestepinclusive"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"i":[{"n":"t"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"o":{"n":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"o":{"n":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"o":{"n":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"o":{"n":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"i":[{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",11,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",12,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",14,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",15,{"o":{"n":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",15,{"o":{"n":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",16,{"o":{"n":"self"}}],[10,"infinity","","Returns the infinite value.",16,{"o":{"n":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",16,{"o":{"n":"self"}}],[10,"neg_zero","","Returns `-0.0`.",16,{"o":{"n":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",16,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",16,{"o":{"n":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",16,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",16,{"o":{"n":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",16,{"i":[{"n":"self"}],"o":{"n":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",16,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",16,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a floating point power.",16,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",16,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_degrees","","Converts radians to degrees.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"to_radians","","Converts degrees to radians.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",16,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",16,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",16,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",16,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",16,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",16,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",16,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",17,{"o":{"n":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",17,{"o":{"n":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",17,{"o":{"n":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",17,{"o":{"n":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",17,{"o":{"n":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",17,{"o":{"n":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",17,{"o":{"n":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",17,{"o":{"n":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",17,{"o":{"n":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",17,{"o":{"n":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",17,{"o":{"n":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",17,{"o":{"n":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",17,{"o":{"n":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",17,{"o":{"n":"self"}}],[10,"PI","","Return Archimedes’ constant.",17,{"o":{"n":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",17,{"o":{"n":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",18,{"o":{"n":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",18,{"o":{"n":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",18,{"o":{"n":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",18,{"o":{"n":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"trunc","","Return the integer part of a number.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"fract","","Returns the fractional part of a number.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",18,{"i":[{"n":"self"},{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"powi","","Raise a number to an integer power.",18,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"self"}}],[10,"powf","","Raise a number to a real number power.",18,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sqrt","","Take the square root of a number.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"exp2","","Returns `2^(self)`.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",18,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_degrees","","Converts radians to degrees.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_radians","","Converts degrees to radians.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"max","","Returns the maximum of the two numbers.",18,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"min","","Returns the minimum of the two numbers.",18,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"cbrt","","Take the cubic root of a number.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",18,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",18,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",18,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"sinh","","Hyperbolic sine function.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"cosh","","Hyperbolic cosine function.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"tanh","","Hyperbolic tangent function.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",19,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",19,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",19,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",19,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",19,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",19,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",19,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",19,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",19,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",19,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",19,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",19,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"isize"}],"o":{"n":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"i8"}],"o":{"n":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"i16"}],"o":{"n":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"i32"}],"o":{"n":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"i64"}],"o":{"n":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"usize"}],"o":{"n":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"u8"}],"o":{"n":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"u16"}],"o":{"n":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"u32"}],"o":{"n":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"u64"}],"o":{"n":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"f32"}],"o":{"n":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",20,{"i":[{"n":"f64"}],"o":{"n":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",21,{"i":[{"n":"t"}],"o":{"n":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",22,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",23,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",23,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",23,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",23,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",23,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",23,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",23,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",23,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",23,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",23,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",23,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",24,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",24,{"i":[{"n":"str"},{"n":"u32"}],"o":{"n":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Real"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["open"] = {"doc":"Use this library to open a path or URL using the program configured on the system.","items":[[5,"that","open","",null,{"i":[{"n":"t"}],"o":{"g":["exitstatus"],"n":"result"}}]],"paths":[]};
searchIndex["percent_encoding"] = {"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"i":[{"n":"u8"}],"o":{"n":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"i":[{"n":"str"},{"n":"e"}],"o":{"n":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"simple_encode_set"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"query_encode_set"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"default_encode_set"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"path_segment_encode_set"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",4,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"userinfo_encode_set"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"contains","","",5,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"percentencode"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"size_hint","","",6,null],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"percentdecode"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"option"}}],[11,"size_hint","","",7,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,{"i":[{"n":"self"}],"o":{"g":["cow","utf8error"],"n":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"cow"}}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["pest"] = {"doc":"pest. Elegant, efficient grammars","items":[[3,"StringInput","pest","A `struct` useful for matching in-memory `String`s.",null,null],[3,"Token","","A `struct` representing tokens generated by a parser.",null,null],[12,"rule","","matched `Rule`",0,null],[12,"start","","starting position in `Input`",0,null],[12,"end","","ending position in `Input`",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"token"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Token`.",0,{"i":[{"n":"rule"},{"n":"usize"},{"n":"usize"}],"o":{"n":"token"}}],[11,"new","","Creates a new `StringInput` from a `&str`.",1,{"i":[{"n":"str"}],"o":{"n":"stringinput"}}],[11,"len","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"pos","","",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_pos","","",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"slice","","",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"str"}}],[11,"line_col","","",1,null],[11,"match_string","","",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"match_range","","",1,{"i":[{"n":"self"},{"n":"char"},{"n":"char"}],"o":{"n":"bool"}}],[0,"prelude","","A `mod` that contains `pest::Input`, `pest::Parser`, `pest::StringInput`, and `pest::Token`.",null,null],[3,"StringInput","pest::prelude","A `struct` useful for matching in-memory `String`s.",null,null],[3,"Token","","A `struct` representing tokens generated by a parser.",null,null],[12,"rule","","matched `Rule`",0,null],[12,"start","","starting position in `Input`",0,null],[12,"end","","ending position in `Input`",0,null],[8,"Input","","A `trait` that defines an input for a `Parser`.",null,null],[10,"len","","Returns length of an `Input`.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"is_empty","","Returns whether an `Input` is empty.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"pos","","Returns current position of an `Input`.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"set_pos","","Set current position of an `Input`.",2,{"i":[{"n":"self"},{"n":"usize"}]}],[10,"slice","","Slices an `Input`.",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"str"}}],[10,"line_col","","Returns the line and column of a position for an `Input`.",2,null],[10,"match_string","","Matches `string` to an `Input`, returns whether it matched, and advances the position with `string.len()` in case it did.",2,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[10,"match_range","","Matches if an `Input`'s current `char` is between `left` and `right`, and advances the position with one `char` in case it did.",2,{"i":[{"n":"self"},{"n":"char"},{"n":"char"}],"o":{"n":"bool"}}],[8,"Parser","","A `trait` that defines a parser.",null,null],[16,"Rule","","",3,null],[16,"Token","","",3,null],[10,"input","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"input_mut","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"end","","Returns whether a `Parser` has reached its end.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"eoi_matched","","Returns whether a `Parser` has matched end-of-input.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"reset","","Reset a `Parser`.",3,{"i":[{"n":"self"}]}],[10,"queue","","Returns the queue of all matched `Token`s.",3,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[10,"queue_mut","","Returns the mutable queue of all matched `Token`s.",3,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[10,"queue_index","","Returns the current index within the queue. Used in `process!`.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"inc_queue_index","","Increments the current index within the queue. Used in `process!`.",3,{"i":[{"n":"self"}]}],[10,"set_queue_index","","Set the current index within the queue. Used in `process!`.",3,{"i":[{"n":"self"},{"n":"usize"}]}],[10,"skip_ws","","Skips white-space.",3,{"i":[{"n":"self"}]}],[10,"skip_com","","Skips comments.",3,{"i":[{"n":"self"}]}],[10,"is_atomic","","Returns whether a `Parser` is currently inside an atomic rule.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"set_atomic","","Sets a `Parser` to atomic rule mode, barring comment & white-space skipping.",3,{"i":[{"n":"self"},{"n":"bool"}]}],[10,"track","","Keeps track of rule failures. It gets called when a `Rule` fails at `pos`.",3,null],[10,"tracked_len","","Returns the length of the tracked `Rule`s.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"expected","","Retuns a `Vec` of all expected `Rule`s at the deepest position where the parsing last stopped. It only returns leafs from the rule tree. Used for error reporting.",3,null],[8,"Input","pest","A `trait` that defines an input for a `Parser`.",null,null],[10,"len","","Returns length of an `Input`.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"is_empty","","Returns whether an `Input` is empty.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"pos","","Returns current position of an `Input`.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"set_pos","","Set current position of an `Input`.",2,{"i":[{"n":"self"},{"n":"usize"}]}],[10,"slice","","Slices an `Input`.",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"usize"}],"o":{"n":"str"}}],[10,"line_col","","Returns the line and column of a position for an `Input`.",2,null],[10,"match_string","","Matches `string` to an `Input`, returns whether it matched, and advances the position with `string.len()` in case it did.",2,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[10,"match_range","","Matches if an `Input`'s current `char` is between `left` and `right`, and advances the position with one `char` in case it did.",2,{"i":[{"n":"self"},{"n":"char"},{"n":"char"}],"o":{"n":"bool"}}],[8,"Parser","","A `trait` that defines a parser.",null,null],[16,"Rule","","",3,null],[16,"Token","","",3,null],[10,"input","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"input_mut","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"end","","Returns whether a `Parser` has reached its end.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"eoi_matched","","Returns whether a `Parser` has matched end-of-input.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"reset","","Reset a `Parser`.",3,{"i":[{"n":"self"}]}],[10,"queue","","Returns the queue of all matched `Token`s.",3,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[10,"queue_mut","","Returns the mutable queue of all matched `Token`s.",3,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[10,"queue_index","","Returns the current index within the queue. Used in `process!`.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"inc_queue_index","","Increments the current index within the queue. Used in `process!`.",3,{"i":[{"n":"self"}]}],[10,"set_queue_index","","Set the current index within the queue. Used in `process!`.",3,{"i":[{"n":"self"},{"n":"usize"}]}],[10,"skip_ws","","Skips white-space.",3,{"i":[{"n":"self"}]}],[10,"skip_com","","Skips comments.",3,{"i":[{"n":"self"}]}],[10,"is_atomic","","Returns whether a `Parser` is currently inside an atomic rule.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"set_atomic","","Sets a `Parser` to atomic rule mode, barring comment & white-space skipping.",3,{"i":[{"n":"self"},{"n":"bool"}]}],[10,"track","","Keeps track of rule failures. It gets called when a `Rule` fails at `pos`.",3,null],[10,"tracked_len","","Returns the length of the tracked `Rule`s.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"expected","","Retuns a `Vec` of all expected `Rule`s at the deepest position where the parsing last stopped. It only returns leafs from the rule tree. Used for error reporting.",3,null],[14,"grammar","","A `macro` that defines each rule as a method on a `Parser` which parses from the current position. Rules are always defined between braces, with an optional symbol marking the type of rule defined.",null,null],[14,"process","","A `macro` for pattern-matching queued `Token`s generated by a `Parser`. It generates a method `process` on `&self` that processes the whole queue of `Token`s, reducing it to one single result.",null,null],[14,"impl_rdp","","A `macro` useful for implementing the `Parser` `trait` as a recursive descent parser. It only accepts `grammar!` and `process!` calls that get implemented on `self`.",null,null]],"paths":[[3,"Token"],[3,"StringInput"],[8,"Input"],[8,"Parser"]]};
searchIndex["phf"] = {"doc":"Compile time optimized maps and sets.","items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[3,"Map","","An immutable map constructed at compile time.",null,null],[3,"Set","","An immutable set constructed at compile time.",null,null],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",null,null],[0,"map","","An immutable map constructed at compile time.",null,null],[3,"Map","phf::map","An immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",null,null],[3,"Keys","","An iterator over the keys in a `Map`.",null,null],[3,"Values","","An iterator over the values in a `Map`.",null,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"v"}}],[11,"is_empty","","Returns true if the `Map` is empty.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of entries in the `Map`.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,{"i":[{"n":"self"}],"o":{"n":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",1,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",1,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"set","phf","An immutable set constructed at compile time.",null,null],[3,"Set","phf::set","An immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `Set`.",null,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"len","","Returns the number of elements in the `Set`.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",5,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",5,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",5,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,{"i":[{"n":"self"},{"n":"set"}],"o":{"n":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,{"i":[{"n":"self"},{"n":"set"}],"o":{"n":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,{"i":[{"n":"self"},{"n":"set"}],"o":{"n":"bool"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",null,null],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",null,null],[3,"Values","","An iterator over the values in a `OrderedMap`.",null,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"v"}}],[11,"len","","Returns the number of entries in the `Map`.",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the `Map` is empty.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered map.",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["usize"],"n":"option"}}],[11,"index","","Returns references to both the key and values at an index within the list used to initialize the ordered map. See `.get_index(key)`.",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,{"i":[{"n":"self"}],"o":{"n":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",7,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",7,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",null,null],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `OrderedSet`.",null,null],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",11,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"option"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered set.",11,{"i":[{"n":"self"},{"n":"u"}],"o":{"g":["usize"],"n":"option"}}],[11,"index","","Returns a reference to the key at an index within the list used to initialize the ordered set. See `.get_index(key)`.",11,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",11,{"i":[{"n":"self"},{"n":"u"}],"o":{"n":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",11,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,{"i":[{"n":"self"},{"n":"orderedset"}],"o":{"n":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,{"i":[{"n":"self"},{"n":"orderedset"}],"o":{"n":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,{"i":[{"n":"self"},{"n":"orderedset"}],"o":{"n":"bool"}}],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"i":[{"n":"u32"},{"n":"u32"},{"n":"u32"},{"n":"u32"}],"o":{"n":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"i":[{"n":"t"},{"n":"u64"}],"o":{"n":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["plugin"] = {"doc":"Lazily-Evaluated, Order-Independent Plugins for Extensible Types.","items":[[8,"Plugin","plugin","Implementers of this trait can act as plugins for other types, via `OtherType::get<P>()`.",null,null],[16,"Error","","The error type associated with this plugin.",0,null],[10,"eval","","Create the plugin from an instance of the extended type.",0,{"i":[{"n":"e"}],"o":{"n":"result"}}],[8,"Extensible","","Defines an interface that extensible types must implement.",null,null],[10,"extensions","","Get a reference to the type's extension storage.",1,{"i":[{"n":"self"}],"o":{"n":"typemap"}}],[10,"extensions_mut","","Get a mutable reference to the type's extension storage.",1,{"i":[{"n":"self"}],"o":{"n":"typemap"}}],[8,"Pluggable","","An interface for plugins that cache values between calls.",null,null],[11,"get","","Return a copy of the plugin's produced value.",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"get_ref","","Return a reference to the plugin's produced value.",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"get_mut","","Return a mutable reference to the plugin's produced value.",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"compute","","Create and evaluate a once-off instance of a plugin.",2,{"i":[{"n":"self"}],"o":{"n":"result"}}]],"paths":[[8,"Plugin"],[8,"Extensible"],[8,"Pluggable"]]};
searchIndex["podio"] = {"doc":"Additional methods for Read and Write","items":[[4,"LittleEndian","podio","Little endian. The number `0xABCD` is stored `[0xCD, 0xAB]`",null,null],[4,"BigEndian","","Big endian. The number `0xABCD` is stored `[0xAB, 0xCD]`",null,null],[8,"Endianness","","Trait implementing conversion methods for a specific endianness",null,null],[10,"int_to_target","","Converts a value from the platform type to the specified endianness",0,{"i":[{"n":"t"}],"o":{"n":"t"}}],[10,"int_from_target","","Converts a value from the sepcified endianness to the platform type",0,{"i":[{"n":"t"}],"o":{"n":"t"}}],[8,"EndianConvert","","Generic trait for endian conversions on integers",null,null],[10,"to_be","","Convert self to a big-endian value",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"to_le","","Convert self to a little-endian value",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_be","","Convert a big-endian value to the target endianness",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[10,"from_le","","Convert a little-endian value to the target endiannes",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"WritePodExt","","Additional write methods for a io::Write",null,null],[10,"write_u64","","Write a u64",2,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[10,"write_u32","","Write a u32",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"write_u16","","Write a u16",2,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"write_u8","","Write a u8",2,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"write_i64","","Write a i64",2,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[10,"write_i32","","Write a i32",2,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"write_i16","","Write a i16",2,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"write_i8","","Write a i8",2,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"write_f32","","Write a f32",2,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"write_f64","","Write a f64",2,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[8,"ReadPodExt","","Additional read methods for a io::Read",null,null],[10,"read_u64","","Read a u64",3,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[10,"read_u32","","Read a u32",3,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"read_u16","","Read a u16",3,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[10,"read_u8","","Read a u8",3,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[10,"read_i64","","Read a i64",3,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[10,"read_i32","","Read a i32",3,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[10,"read_i16","","Read a i16",3,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[10,"read_i8","","Read a i8",3,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[10,"read_f32","","Read a f32",3,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[10,"read_f64","","Read a f64",3,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[10,"read_exact","","Read a specific number of bytes",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["vec"],"n":"result"}}],[11,"int_to_target","","",4,{"i":[{"n":"t"}],"o":{"n":"t"}}],[11,"int_from_target","","",4,{"i":[{"n":"t"}],"o":{"n":"t"}}],[11,"int_to_target","","",5,{"i":[{"n":"t"}],"o":{"n":"t"}}],[11,"int_from_target","","",5,{"i":[{"n":"t"}],"o":{"n":"t"}}]],"paths":[[8,"Endianness"],[8,"EndianConvert"],[8,"WritePodExt"],[8,"ReadPodExt"],[4,"LittleEndian"],[4,"BigEndian"]]};
searchIndex["pulldown_cmark"] = {"doc":"Pull parser for commonmark.","items":[[3,"Parser","pulldown_cmark","",null,null],[3,"Options","","",null,null],[4,"Alignment","","",null,null],[13,"None","","",0,null],[13,"Left","","",0,null],[13,"Center","","",0,null],[13,"Right","","",0,null],[4,"Event","","",null,null],[13,"Start","","",1,null],[13,"End","","",1,null],[13,"Text","","",1,null],[13,"Html","","",1,null],[13,"InlineHtml","","",1,null],[13,"FootnoteReference","","",1,null],[13,"SoftBreak","","",1,null],[13,"HardBreak","","",1,null],[4,"Tag","","",null,null],[13,"Paragraph","","",2,null],[13,"Rule","","",2,null],[13,"Header","","",2,null],[13,"BlockQuote","","",2,null],[13,"CodeBlock","","",2,null],[13,"List","","",2,null],[13,"Item","","",2,null],[13,"FootnoteDefinition","","",2,null],[13,"Table","","",2,null],[13,"TableHead","","",2,null],[13,"TableRow","","",2,null],[13,"TableCell","","",2,null],[13,"Emphasis","","",2,null],[13,"Strong","","",2,null],[13,"Code","","",2,null],[13,"Link","","",2,null],[13,"Image","","",2,null],[0,"html","","HTML renderer that takes an iterator of events as input.",null,null],[5,"push_html","pulldown_cmark::html","Iterate over an `Iterator` of `Event`s, generate HTML for each `Event`, and push it to a `String`.",null,{"i":[{"n":"string"},{"n":"i"}]}],[11,"new","pulldown_cmark","",3,{"i":[{"n":"str"}],"o":{"n":"parser"}}],[11,"new_ext","","",3,{"i":[{"n":"str"},{"n":"options"}],"o":{"n":"parser"}}],[11,"get_offset","","",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"g":["event"],"n":"option"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"tag"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"event"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"alignment"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"options"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"ordering"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"empty","","Returns an empty set of flags.",4,{"o":{"n":"options"}}],[11,"all","","Returns the set containing all flags.",4,{"o":{"n":"options"}}],[11,"bits","","Returns the raw value of the flags currently stored.",4,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",4,{"i":[{"n":"u32"}],"o":{"g":["options"],"n":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",4,{"i":[{"n":"u32"}],"o":{"n":"options"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",4,{"i":[{"n":"self"},{"n":"options"}]}],[11,"remove","","Removes the specified flags in-place.",4,{"i":[{"n":"self"},{"n":"options"}]}],[11,"toggle","","Toggles the specified flags in-place.",4,{"i":[{"n":"self"},{"n":"options"}]}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",4,{"i":[{"n":"self"},{"n":"options"},{"n":"bool"}]}],[11,"bitor","","Returns the union of the two sets of flags.",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"options"}}],[11,"bitor_assign","","Adds the set of flags.",4,{"i":[{"n":"self"},{"n":"options"}]}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"options"}}],[11,"bitxor_assign","","Toggles the set of flags.",4,{"i":[{"n":"self"},{"n":"options"}]}],[11,"bitand","","Returns the intersection between the two sets of flags.",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"options"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",4,{"i":[{"n":"self"},{"n":"options"}]}],[11,"sub","","Returns the set difference of the two sets of flags.",4,{"i":[{"n":"self"},{"n":"options"}],"o":{"n":"options"}}],[11,"sub_assign","","Disables all flags enabled in the set.",4,{"i":[{"n":"self"},{"n":"options"}]}],[11,"not","","Returns the complement of this set of flags.",4,{"i":[{"n":"self"}],"o":{"n":"options"}}],[11,"extend","","",4,{"i":[{"n":"self"},{"n":"t"}]}],[11,"from_iter","","",4,{"i":[{"n":"t"}],"o":{"n":"options"}}],[17,"OPTION_ENABLE_TABLES","","",null,null],[17,"OPTION_ENABLE_FOOTNOTES","","",null,null]],"paths":[[4,"Alignment"],[4,"Event"],[4,"Tag"],[3,"Parser"],[3,"Options"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","Result extension trait adding a `context` method",null,null],[10,"context","","The method is use to add context information to current operation",1,{"i":[{"n":"self"},{"n":"x"}],"o":{"g":["context"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"quick_error","","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"tokens"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"tokens"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"tokens"}],"o":{"n":"bool"}}],[11,"new","","Empty tokens.",2,{"o":{"n":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"i":[{"n":"self"},{"n":"t"}]}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"i":[{"n":"self"},{"n":"i"}]}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"i":[{"n":"self"},{"n":"i"},{"n":"s"}]}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"i":[{"n":"self"},{"n":"i"},{"n":"s"}]}],[11,"as_str","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_string","","",2,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"parse","","",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"default","","",2,{"o":{"n":"self"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"as_ref","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"to_tokens","","",0,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",2,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"g":["str"],"n":"cow"}],"o":{"n":"self"}}],[11,"from","","",3,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"as_ref","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"to_tokens","","",3,{"i":[{"n":"self"},{"n":"tokens"}]}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"i":[{"n":"self"},{"n":"tokens"}]}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"o":{"n":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"o":{"n":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"o":{"n":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"i":[{"n":"r"},{"n":"i"},{"n":"usize"}],"o":{"n":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"i":[{"n":"range"},{"n":"r"}],"o":{"n":"self"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"range"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"i":[{"n":"x"},{"n":"x"}],"o":{"n":"range"}}],[11,"sample","","",4,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"ind_sample","","",4,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"gamma"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"gamma"}}],[11,"sample","","",5,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",5,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"chisquared"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"i":[{"n":"f64"}],"o":{"n":"chisquared"}}],[11,"sample","","",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",6,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"fisherf"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"fisherf"}}],[11,"sample","","",7,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",7,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"studentt"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"i":[{"n":"f64"}],"o":{"n":"studentt"}}],[11,"sample","","",8,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",8,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"standardnormal"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"rand","","",9,{"i":[{"n":"r"}],"o":{"n":"standardnormal"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"normal"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"normal"}}],[11,"sample","","",10,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",10,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"lognormal"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"i":[{"n":"f64"},{"n":"f64"}],"o":{"n":"lognormal"}}],[11,"sample","","",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",11,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"exp1"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"rand","","",12,{"i":[{"n":"r"}],"o":{"n":"exp1"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"exp"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"i":[{"n":"f64"}],"o":{"n":"exp"}}],[11,"sample","","",13,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[11,"ind_sample","","",13,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"support"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"sample","","",16,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"ind_sample","","",16,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"sup"}}],[11,"new","","",16,{"o":{"n":"randsample"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"weighted"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[11,"ind_sample","","",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"o":{"n":"isaacrng"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"isaacrng"}}],[11,"next_u32","","",18,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"i":[{"n":"r"}],"o":{"n":"isaacrng"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"o":{"n":"isaac64rng"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"isaac64rng"}}],[11,"next_u32","","",19,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",19,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"i":[{"n":"r"}],"o":{"n":"isaac64rng"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"chacharng"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"o":{"n":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"i":[{"n":"self"},{"n":"u64"},{"n":"u64"}]}],[11,"next_u32","","",20,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"i":[{"n":"r"}],"o":{"n":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"i":[{"n":"self"},{"n":"r"}]}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"i":[{"n":"r"},{"n":"u64"},{"n":"rsdr"}],"o":{"n":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"i":[{"n":"self"}]}],[11,"next_u32","","",21,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",21,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"reseedwithdefault"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"reseed","","",23,{"i":[{"n":"self"},{"n":"r"}]}],[11,"default","","",23,{"o":{"n":"reseedwithdefault"}}],[11,"rand","rand","",0,{"i":[{"n":"r"}],"o":{"g":["f64"],"n":"open01"}}],[11,"rand","","",1,{"i":[{"n":"r"}],"o":{"g":["f64"],"n":"closed01"}}],[11,"rand","","",0,{"i":[{"n":"r"}],"o":{"g":["f32"],"n":"open01"}}],[11,"rand","","",1,{"i":[{"n":"r"}],"o":{"g":["f32"],"n":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"o":{"g":["osrng"],"n":"result"}}],[11,"next_u32","","",24,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",24,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",24,null],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"i":[{"n":"r"}],"o":{"n":"readrng"}}],[11,"next_u32","","",25,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",25,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"i":[{"n":"r"}],"o":{"n":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"i":[{"n":"self"}],"o":{"n":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"i":[{"n":"self"},{"n":"t"},{"n":"t"}],"o":{"n":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"i":[{"n":"self"}],"o":{"n":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"i":[{"n":"self"},{"n":"seed"}]}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"i":[{"n":"seed"}],"o":{"n":"self"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",29,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",30,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"xorshiftrng"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"o":{"n":"xorshiftrng"}}],[11,"next_u32","","",31,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"i":[{"n":"r"}],"o":{"n":"xorshiftrng"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"stdrng"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"o":{"g":["stdrng"],"n":"result"}}],[11,"next_u32","","",32,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",32,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"threadrng"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next_u32","","",33,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"next_u64","","",33,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"i":[{"n":"str"}],"o":{"n":"string"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"i":[{"n":"self"},{"n":"captures"},{"n":"vec"}]}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"clone","regex","",1,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",1,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",1,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"i":[{"n":"str"}],"o":{"n":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",4,{"i":[{"n":"self"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"i":[{"n":"str"}],"o":{"n":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",5,{"i":[{"n":"self"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexbuilder"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,{"i":[{"n":"i"}],"o":{"n":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,{"i":[{"n":"self"}],"o":{"g":["regexset","error"],"n":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexsetbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,{"i":[{"n":"i"}],"o":{"n":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,{"i":[{"n":"self"}],"o":{"g":["regexset","error"],"n":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"regexsetbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"as_bytes","","Returns the matched text.",8,null],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"regex"}}],[11,"fmt","","Shows the original regular expression.",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Shows the original regular expression.",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",9,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,null],[11,"shortest_match","","Returns the end location of a match in the text given.",9,null],[11,"as_str","","Returns the original string of this regex.",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",9,{"i":[{"n":"self"}],"o":{"n":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"g":["match"],"n":"option"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"g":["captures"],"n":"option"}}],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",14,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"size_hint","","",14,null],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",15,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["match"],"n":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",15,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["match"],"n":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",15,{"i":[{"n":"self"}],"o":{"n":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",15,null],[11,"len","","Returns the number of captured groups.",15,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"next","","",16,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"replace_append","","",2,{"i":[{"n":"self"},{"n":"captures"},{"n":"vec"}]}],[11,"no_expansion","","",2,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"clone","regex","",17,{"i":[{"n":"self"}],"o":{"n":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",17,{"i":[{"n":"i"}],"o":{"g":["regexset","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",17,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",17,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",17,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"setmatches"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"matched_any","","Whether this set contains any matches.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",18,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"into_iter","","",18,null],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_back","","",19,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"next","","",20,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_back","","",20,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","regex::bytes","",21,{"i":[{"n":"self"}],"o":{"n":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",21,{"i":[{"n":"i"}],"o":{"g":["regexset","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",21,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",21,null],[11,"len","","Returns the total number of regular expressions in this set.",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"setmatches"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"matched_any","","Whether this set contains any matches.",22,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",22,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",22,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",22,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"into_iter","","",22,null],[11,"next","","",23,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_back","","",23,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"setmatchesiter"}}],[11,"next","","",24,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_back","","",24,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","regex","",25,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"match"}],"o":{"n":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",25,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",25,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"as_str","","Returns the matched text.",25,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"regex"}}],[11,"fmt","","Shows the original regular expression.",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Shows the original regular expression.",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",26,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",26,{"i":[{"n":"str"}],"o":{"g":["regex","error"],"n":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["match"],"n":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"matches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["captures"],"n":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"capturematches"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"split"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"splitn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"r"}],"o":{"g":["str"],"n":"cow"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"r"}],"o":{"g":["str"],"n":"cow"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"r"}],"o":{"g":["str"],"n":"cow"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["usize"],"n":"option"}}],[11,"as_str","","Returns the original string of this regex.",26,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",26,{"i":[{"n":"self"}],"o":{"n":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",26,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",27,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"next","","",29,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",30,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["match"],"n":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",30,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["match"],"n":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",30,{"i":[{"n":"self"}],"o":{"n":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",30,{"i":[{"n":"self"},{"n":"str"},{"n":"string"}]}],[11,"len","","Returns the number of captured groups.",30,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"index","","",30,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"str"}}],[11,"index","","",30,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"str"}}],[11,"next","","",31,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"option"}}],[11,"next","","",32,{"i":[{"n":"self"}],"o":{"g":["captures"],"n":"option"}}],[11,"next","","",33,{"i":[{"n":"self"}],"o":{"g":["match"],"n":"option"}}],[11,"replace_append","","",0,{"i":[{"n":"self"},{"n":"captures"},{"n":"string"}]}],[11,"no_expansion","","",0,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",34,{"i":[{"n":"self"},{"n":"captures"},{"n":"string"}]}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",4,null],[13,"UnsupportedClassChar","","Indicates that unsupported notation was used in a character class.",4,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"i":[{"n":"str"}],"o":{"n":"string"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"lit"}}],[11,"cmp","","",6,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"o":{"n":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",5,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["literals"],"n":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",5,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",5,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"union","","Unions this set with another set.",5,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"i":[{"n":"self"},{"n":"literals"}],"o":{"n":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"i":[{"n":"self"},{"n":"charclass"}],"o":{"n":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"i":[{"n":"self"},{"n":"byteclass"}],"o":{"n":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",5,{"i":[{"n":"self"}]}],[11,"reverse","","Reverses all members in place.",5,{"i":[{"n":"self"}]}],[11,"clear","","Clears this set of all members.",5,{"i":[{"n":"self"}]}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"i":[{"g":["u8"],"n":"vec"}],"o":{"n":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"o":{"n":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cut","","Cuts this literal.",6,{"i":[{"n":"self"}]}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",6,{"i":[{"n":"self"},{"n":"lit"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",6,null],[11,"deref","","",6,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"deref_mut","","",6,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"expr"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"expr"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"repeater"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"repeater"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"repeater"}],"o":{"n":"bool"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"charclass"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"charclass"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"charclass"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"classrange"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"classrange"}],"o":{"n":"ordering"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"byteclass"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"byteclass"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"byteclass"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"byterange"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"bool"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"byterange"}],"o":{"n":"ordering"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"exprbuilder"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new builder for configuring expression parsing.",9,{"o":{"n":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["expr"],"n":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"i":[{"n":"str"}],"o":{"g":["expr"],"n":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"i":[{"n":"self"}],"o":{"n":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"deref","","",7,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"into_iter","","",7,{"i":[{"n":"self"}],"o":{"g":["classrange"],"n":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",7,{"i":[{"g":["classrange"],"n":"vec"}],"o":{"n":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",7,{"i":[{"n":"self"},{"n":"char"}]}],[11,"negate","","Negates the character class.",7,{"i":[{"n":"self"}],"o":{"n":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",7,{"i":[{"n":"self"}],"o":{"n":"charclass"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"char"}],"o":{"g":["ordering"],"n":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"i":[{"g":["byterange"],"n":"vec"}],"o":{"n":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",8,{"i":[{"n":"self"},{"n":"u8"}]}],[11,"negate","","Negates the byte class.",8,{"i":[{"n":"self"}],"o":{"n":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",8,{"i":[{"n":"self"}],"o":{"n":"byteclass"}}],[11,"deref","","",8,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"into_iter","","",8,{"i":[{"n":"self"}],"o":{"g":["byterange"],"n":"intoiter"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"position","","Returns an approximate character offset at which the error occurred.",10,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",10,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"description","","",10,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"i":[{"n":"str"}],"o":{"n":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"i":[{"n":"str"}],"o":{"g":["demangle","trydemangleerror"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"i":[{"n":"self"},{"n":"config"}],"o":{"n":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"i":[{"n":"self"}],"o":{"g":["vec","frombase64error"],"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"characterset"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"newline"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"config"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"frombase64error"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"i":[{"n":"self"}],"o":{"n":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"i":[{"n":"self"}],"o":{"g":["vec","fromhexerror"],"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"fromhexerror"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",6,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"i":[{"n":"errorcode"}],"o":{"n":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"i":[{"n":"str"}],"o":{"n":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"i":[{"n":"t"}],"o":{"n":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"i":[{"n":"t"}],"o":{"n":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"le","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"gt","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"ge","","",9,{"i":[{"n":"self"},{"n":"json"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"errorcode"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"errorcode"}],"o":{"n":"bool"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"parsererror"}],"o":{"n":"bool"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"decodererror"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"decodererror"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"encodererror"}],"o":{"n":"bool"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",12,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",12,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"option"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",12,{"i":[{"n":"parsererror"}],"o":{"n":"decodererror"}}],[11,"description","","",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",11,{"i":[{"n":"error"}],"o":{"n":"parsererror"}}],[11,"description","","",13,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",13,{"i":[{"n":"error"}],"o":{"n":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"i":[{"n":"write"}],"o":{"n":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"i":[{"n":"write"}],"o":{"n":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"emit_nil","","",17,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_usize","","",17,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"encoderesult"}}],[11,"emit_u64","","",17,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"encoderesult"}}],[11,"emit_u32","","",17,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"encoderesult"}}],[11,"emit_u16","","",17,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"encoderesult"}}],[11,"emit_u8","","",17,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"encoderesult"}}],[11,"emit_isize","","",17,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"encoderesult"}}],[11,"emit_i64","","",17,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"encoderesult"}}],[11,"emit_i32","","",17,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"encoderesult"}}],[11,"emit_i16","","",17,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"encoderesult"}}],[11,"emit_i8","","",17,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"encoderesult"}}],[11,"emit_bool","","",17,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"encoderesult"}}],[11,"emit_f64","","",17,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"encoderesult"}}],[11,"emit_f32","","",17,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"encoderesult"}}],[11,"emit_char","","",17,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"encoderesult"}}],[11,"emit_str","","",17,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"encoderesult"}}],[11,"emit_enum","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_struct_field","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option","","",17,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_option_none","","",17,{"i":[{"n":"self"}],"o":{"n":"encoderesult"}}],[11,"emit_option_some","","",17,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"encoderesult"}}],[11,"encode","","",9,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"i":[{"n":"read"}],"o":{"g":["buildererror"],"n":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"i":[{"n":"str"}],"o":{"g":["buildererror"],"n":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"i":[{"n":"self"}],"o":{"n":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json"],"n":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["json"],"n":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"index","","",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"json"}}],[11,"index","","",9,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"json"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"jsonevent"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"jsonevent"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"stackelement"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"stackelement"}],"o":{"n":"bool"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"stackelement"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",18,{"o":{"n":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"i":[{"n":"self"}],"o":{"g":["stackelement"],"n":"option"}}],[11,"next","","",19,{"i":[{"n":"self"}],"o":{"g":["jsonevent"],"n":"option"}}],[11,"new","","Creates the JSON parser.",19,{"i":[{"n":"t"}],"o":{"n":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"i":[{"n":"self"}],"o":{"n":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"build","","",20,{"i":[{"n":"self"}],"o":{"g":["json","buildererror"],"n":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"i":[{"n":"json"}],"o":{"n":"decoder"}}],[11,"read_nil","","",21,{"i":[{"n":"self"}],"o":{"n":"decoderesult"}}],[11,"read_usize","","",21,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"decoderesult"}}],[11,"read_u8","","",21,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"decoderesult"}}],[11,"read_u16","","",21,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"decoderesult"}}],[11,"read_u32","","",21,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"decoderesult"}}],[11,"read_u64","","",21,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"decoderesult"}}],[11,"read_isize","","",21,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"decoderesult"}}],[11,"read_i8","","",21,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"decoderesult"}}],[11,"read_i16","","",21,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"decoderesult"}}],[11,"read_i32","","",21,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"decoderesult"}}],[11,"read_i64","","",21,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"decoderesult"}}],[11,"read_f32","","",21,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"decoderesult"}}],[11,"read_f64","","",21,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"decoderesult"}}],[11,"read_bool","","",21,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"decoderesult"}}],[11,"read_char","","",21,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"decoderesult"}}],[11,"read_str","","",21,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"decoderesult"}}],[11,"read_enum","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_struct_field","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_option","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_seq","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_seq_elt","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map","","",21,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"decoderesult"}}],[11,"error","","",21,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"decodererror"}}],[11,"to_json","","",9,{"i":[{"n":"self"}],"o":{"n":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",9,{"i":[{"n":"str"}],"o":{"g":["json","parsererror"],"n":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"read_usize","","Read a usize value.",25,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"result"}}],[10,"read_isize","","Read a isize value.",25,{"i":[{"n":"self"}],"o":{"g":["isize"],"n":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"i":[{"n":"self"}],"o":{"g":["i16"],"n":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"i":[{"n":"self"}],"o":{"g":["i8"],"n":"result"}}],[10,"read_bool","","Read a bool value.",25,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"i":[{"n":"self"}],"o":{"g":["f32"],"n":"result"}}],[10,"read_char","","Read a char value.",25,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"result"}}],[10,"read_str","","Read a string value.",25,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_struct","","Read an struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_option","","Read an optional value.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"emit_char","","Emit a char value.",26,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"emit_str","","Emit a string value.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"f"}],"o":{"n":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["vec"],"n":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["safemem"] = {"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",null,null],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",null,null],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",null,null]],"paths":[]};
searchIndex["same_file"] = {"doc":"This crate provides a safe and simple cross platform way to determine whether two file paths refer to the same file or directory.","items":[[3,"Handle","same_file","A handle to a file that can be tested for equality with other handles.",null,null],[5,"is_same_file","","Returns true if the two file paths may correspond to the same file.",null,{"i":[{"n":"p"},{"n":"q"}],"o":{"g":["bool"],"n":"result"}}],[11,"as_raw_fd","","",0,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"into_raw_fd","","",0,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"handle"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"handle"}],"o":{"n":"bool"}}],[11,"from_path","","Construct a handle from a path.",0,{"i":[{"n":"p"}],"o":{"g":["handle"],"n":"result"}}],[11,"from_file","","Construct a handle from a file.",0,{"i":[{"n":"file"}],"o":{"g":["handle"],"n":"result"}}],[11,"stdin","","Construct a handle from stdin.",0,{"o":{"g":["handle"],"n":"result"}}],[11,"stdout","","Construct a handle from stdout.",0,{"o":{"g":["handle"],"n":"result"}}],[11,"stderr","","Construct a handle from stderr.",0,{"o":{"g":["handle"],"n":"result"}}],[11,"as_file","","Return a reference to the underlying file.",0,{"i":[{"n":"self"}],"o":{"n":"file"}}],[11,"as_file_mut","","Return a mutable reference to the underlying file.",0,{"i":[{"n":"self"}],"o":{"n":"file"}}],[11,"dev","","Return the underlying device number of this handle.",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"ino","","Return the underlying inode number of this handle.",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}]],"paths":[[3,"Handle"]]};
searchIndex["semver"] = {"doc":"Semantic version parsing and comparison.","items":[[3,"Version","semver","Represents a version number conforming to the semantic versioning scheme.",null,null],[12,"major","","The major version, to be incremented on incompatible changes.",0,null],[12,"minor","","The minor version, to be incremented when functionality is added in a backwards-compatible manner.",0,null],[12,"patch","","The patch version, to be incremented when backwards-compatible bug fixes are made.",0,null],[12,"pre","","The pre-release version identifier, if one exists.",0,null],[12,"build","","The build metadata, ignored when determining version precedence.",0,null],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version numbers. Matching operations can then be done with the `VersionReq` against a particular version to see if it satisfies some or all of the constraints.",null,null],[4,"Identifier","","An identifier in the pre-release or build metadata.",null,null],[13,"Numeric","","An identifier that's solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[4,"SemVerError","","An error type for this crate",null,null],[13,"ParseError","","An error ocurred while parsing.",2,null],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each enumeration is one of the possible errors that can occur.",null,null],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",3,null],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",3,null],[13,"InvalidSigil","","The sigil you have written is not correct.",3,null],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",3,null],[13,"InvalidIdentifier","","There was an error parsing an identifier.",3,null],[13,"MajorVersionRequired","","At least a major version is required.",3,null],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",3,null],[13,"DeprecatedVersionRequirement","","This form of requirement is deprecated.",3,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"identifier"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"identifier"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"identifier"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"identifier"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",1,{"i":[{"n":"self"},{"n":"identifier"}],"o":{"n":"bool"}}],[11,"le","","",1,{"i":[{"n":"self"},{"n":"identifier"}],"o":{"n":"bool"}}],[11,"gt","","",1,{"i":[{"n":"self"},{"n":"identifier"}],"o":{"n":"bool"}}],[11,"ge","","",1,{"i":[{"n":"self"},{"n":"identifier"}],"o":{"n":"bool"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"identifier"}],"o":{"n":"ordering"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",1,{"i":[{"n":"identifier"}],"o":{"n":"identifier"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"version"}],"o":{"n":"version"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"semvererror"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"semvererror"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"semvererror"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"semvererror"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",2,{"i":[{"n":"self"},{"n":"semvererror"}],"o":{"n":"bool"}}],[11,"le","","",2,{"i":[{"n":"self"},{"n":"semvererror"}],"o":{"n":"bool"}}],[11,"gt","","",2,{"i":[{"n":"self"},{"n":"semvererror"}],"o":{"n":"bool"}}],[11,"ge","","",2,{"i":[{"n":"self"},{"n":"semvererror"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Contructs the simple case without pre or build.",0,{"i":[{"n":"u64"},{"n":"u64"},{"n":"u64"}],"o":{"n":"version"}}],[11,"parse","","Parse a string into a semver object.",0,{"i":[{"n":"str"}],"o":{"g":["version","semvererror"],"n":"result"}}],[11,"increment_patch","","Increments the patch number for this Version (Must be mutable)",0,{"i":[{"n":"self"}]}],[11,"increment_minor","","Increments the minor version number for this Version (Must be mutable)",0,{"i":[{"n":"self"}]}],[11,"increment_major","","Increments the major version number for this Version (Must be mutable)",0,{"i":[{"n":"self"}]}],[11,"is_prerelease","","Checks to see if the current Version is in pre-release status",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["version","semvererror"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"version"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"ordering"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",0,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"versionreq"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"versionreq"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"versionreq"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"versionreq"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"versionreq"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"versionreq"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"versionreq"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"versionreq"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"versionreq"}],"o":{"n":"ordering"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"versionreq"}],"o":{"n":"versionreq"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"reqparseerror"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"reqparseerror"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"reqparseerror"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",3,{"i":[{"n":"string"}],"o":{"n":"reqparseerror"}}],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other words, any version will match against it.",4,{"o":{"n":"versionreq"}}],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It takes a string like `\"^1.2.3\"` and turns it into a `VersionReq` that matches that particular constraint.",4,{"i":[{"n":"str"}],"o":{"g":["versionreq","reqparseerror"],"n":"result"}}],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",4,{"i":[{"n":"version"}],"o":{"n":"versionreq"}}],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",4,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"g":["versionreq","reqparseerror"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Version"],[4,"Identifier"],[4,"SemVerError"],[4,"ReqParseError"],[3,"VersionReq"]]};
searchIndex["semver_parser"] = {"doc":"","items":[[0,"version","semver_parser","",null,null],[3,"Version","semver_parser::version","",null,null],[12,"major","","",0,null],[12,"minor","","",0,null],[12,"patch","","",0,null],[12,"pre","","",0,null],[12,"build","","",0,null],[4,"Identifier","","",null,null],[13,"Numeric","","An identifier that's solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[5,"parse","","",null,{"i":[{"n":"str"}],"o":{"g":["version","string"],"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"identifier"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"identifier"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"identifier"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"range","semver_parser","",null,null],[3,"VersionReq","semver_parser::range","",null,null],[12,"predicates","","",2,null],[3,"Predicate","","",null,null],[12,"op","","",3,null],[12,"major","","",3,null],[12,"minor","","",3,null],[12,"patch","","",3,null],[12,"pre","","",3,null],[4,"WildcardVersion","","",null,null],[13,"Major","","",4,null],[13,"Minor","","",4,null],[13,"Patch","","",4,null],[4,"Op","","",null,null],[13,"Ex","","",5,null],[13,"Gt","","",5,null],[13,"GtEq","","",5,null],[13,"Lt","","",5,null],[13,"LtEq","","",5,null],[13,"Tilde","","",5,null],[13,"Compatible","","",5,null],[13,"Wildcard","","",5,null],[5,"parse_predicate","","",null,{"i":[{"n":"str"}],"o":{"g":["predicate","string"],"n":"result"}}],[5,"parse","","",null,{"i":[{"n":"str"}],"o":{"g":["versionreq","string"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"wildcardversion"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"op"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",5,{"i":[{"n":"str"}],"o":{"g":["op","string"],"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"predicate"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"predicate"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Version"],[4,"Identifier"],[3,"VersionReq"],[3,"Predicate"],[4,"WildcardVersion"],[4,"Op"]]};
searchIndex["sequence_trie"] = {"doc":"Sequence Trie - a trie-like data-structure for storing sequences of values.","items":[[3,"SequenceTrie","sequence_trie","A `SequenceTrie` is recursively defined as a value and a map containing child Tries.",null,null],[3,"Iter","","Iterator over the keys and values of a `SequenceTrie`.",null,null],[3,"Keys","","Iterator over the keys of a `SequenceTrie`.",null,null],[3,"Values","","Iterator over the values of a `SequenceTrie`.",null,null],[3,"PrefixIter","","Iterator over the longest prefix of nodes which matches a key.",null,null],[6,"KeyValuePair","","Vector of key fragment references and values, yielded during iteration.",null,null],[8,"TrieKey","","Aggregate trait for types which can be used to key a `SequenceTrie`.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"sequencetrie"}}],[11,"new","","Creates a new `SequenceTrie` node with no value and an empty child map.",0,{"o":{"n":"sequencetrie"}}],[11,"is_empty","","Checks if this node is empty.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"insert","","Inserts a key and value into the SequenceTrie.",0,{"i":[{"n":"self"},{"n":"i"},{"n":"v"}],"o":{"n":"option"}}],[11,"insert_owned","","Version of `insert` that takes an owned sequence of key fragments.",0,{"i":[{"n":"self"},{"n":"i"},{"n":"v"}],"o":{"n":"option"}}],[11,"get","","Finds a reference to a key's value, if it has one.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"get_node","","Finds a reference to a key's node, if it has one.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["sequencetrie"],"n":"option"}}],[11,"get_mut","","Finds a mutable reference to a key's value, if it has one.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"get_node_mut","","Finds a mutable reference to a key's node, if it has one.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["sequencetrie"],"n":"option"}}],[11,"get_prefix_nodes","","Finds the longest prefix of nodes which match the given key.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["sequencetrie"],"n":"vec"}}],[11,"get_ancestor","","Finds the value of the nearest ancestor with a non-empty value, if one exists.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"get_ancestor_node","","Finds the nearest ancestor with a non-empty value, if one exists.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["sequencetrie"],"n":"option"}}],[11,"remove","","Removes the node corresponding to the given key.",0,{"i":[{"n":"self"},{"n":"i"}]}],[11,"iter","","Returns an iterator over all the key-value pairs in the collection.",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"keys","","Returns an iterator over all the keys in the trie.",0,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","Returns an iterator over all the values stored in the trie.",0,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"prefix_iter","","Returns an iterator over the longest prefix of nodes which match the given key.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"prefixiter"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["keyvaluepair"],"n":"option"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"default","","",0,{"o":{"n":"self"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",4,null]],"paths":[[3,"SequenceTrie"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"PrefixIter"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_element","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_key","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"serialize_value","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",0,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",0,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",4,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",4,null],[10,"serialize_element","","Serialize a sequence element.",4,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a sequence.",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",5,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",5,null],[10,"serialize_element","","Serialize a tuple element.",5,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple.",5,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",6,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",6,null],[10,"serialize_field","","Serialize a tuple struct field.",6,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple struct.",6,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",7,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",7,null],[10,"serialize_field","","Serialize a tuple variant field.",7,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple variant.",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",8,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",8,null],[10,"serialize_key","","Serialize a map key.",8,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_value","","Serialize a map value.",8,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",8,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a map.",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",9,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",9,null],[10,"serialize_field","","Serialize a struct field.",9,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a struct.",9,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",10,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",10,null],[10,"serialize_field","","Serialize a struct variant field.",10,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",10,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a struct variant.",10,{"i":[{"n":"self"}],"o":{"n":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",11,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",11,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",11,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",11,null],[13,"Char","","The input contained a `char` that was not expected.",11,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",11,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",11,null],[13,"Unit","","The input contained a unit `()` that was not expected.",11,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",11,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",11,null],[13,"Seq","","The input contained a sequence that was not expected.",11,null],[13,"Map","","The input contained a map that was not expected.",11,null],[13,"Enum","","The input contained an enum that was not expected.",11,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",11,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",11,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",11,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",11,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",11,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"custom","","",12,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"custom","","",12,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",12,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"unitdeserializer"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",13,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"booldeserializer"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",14,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"i8deserializer"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",15,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"i16deserializer"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"i32deserializer"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"i64deserializer"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",18,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_identifier","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"isizedeserializer"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",19,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"u8deserializer"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",20,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_identifier","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"u16deserializer"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_identifier","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"u64deserializer"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"usizedeserializer"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"f32deserializer"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",24,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"f64deserializer"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"chardeserializer"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"u32deserializer"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",27,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_identifier","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",27,null],[11,"variant_seed","","",27,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"strdeserializer"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_any","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_bool","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",28,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",28,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",28,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",28,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_identifier","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",28,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",28,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"borrowedstrdeserializer"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",29,{"i":[{"n":"str"}],"o":{"n":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",29,null],[11,"deserialize_bool","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",29,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",29,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",29,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",29,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",29,null],[11,"deserialize_identifier","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",29,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",29,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"stringdeserializer"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_any","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",30,null],[11,"deserialize_bool","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",30,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",30,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",30,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",30,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",30,null],[11,"deserialize_identifier","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",30,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",30,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"cowstrdeserializer"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deserialize_any","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",31,null],[11,"deserialize_bool","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",31,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",31,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",31,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",31,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",31,null],[11,"deserialize_identifier","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",31,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",31,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"borrowedbytesdeserializer"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",32,null],[11,"deserialize_any","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",32,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",32,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",32,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",32,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",32,null],[11,"deserialize_identifier","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",32,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",32,null],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"seqdeserializer"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",33,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",33,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"deserialize_any","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",33,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",33,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",33,null],[11,"deserialize_enum","","",33,null],[11,"deserialize_identifier","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_element_seed","","",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",33,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"seqaccessdeserializer"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",34,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"deserialize_any","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",34,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",34,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",34,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",34,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_identifier","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",34,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",35,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",35,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"deserialize_any","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",35,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",35,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",35,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",35,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",35,null],[11,"deserialize_enum","","",35,null],[11,"deserialize_identifier","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",35,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_key_seed","","",35,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"next_value_seed","","",35,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"next_entry_seed","","",35,{"i":[{"n":"self"},{"n":"tk"},{"n":"tv"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",35,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_element_seed","","",35,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",35,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"mapaccessdeserializer"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",36,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"deserialize_any","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",36,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",36,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",36,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",36,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",36,null],[11,"deserialize_enum","","",36,null],[11,"deserialize_identifier","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","serde::de","",37,{"i":[{"n":"self"}],"o":{"n":"ignoredany"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",37,{"o":{"n":"ignoredany"}}],[11,"expecting","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"visit_bool","","",37,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"visit_i64","","",37,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"visit_u64","","",37,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"visit_f64","","",37,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[11,"visit_str","","",37,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_none","","",37,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_some","","",37,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_newtype_struct","","",37,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_unit","","",37,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_seq","","",37,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_map","","",37,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_bytes","","",37,null],[11,"deserialize","","",37,{"i":[{"n":"d"}],"o":{"g":["ignoredany"],"n":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",38,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",38,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",38,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",38,{"i":[{"n":"usize"},{"n":"expected"}],"o":{"n":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",38,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",38,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",38,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",38,{"i":[{"n":"str"}],"o":{"n":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",41,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",41,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",43,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"visit_bool","","The input contains a boolean.",43,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"visit_i8","","The input contains an `i8`.",43,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"visit_i16","","The input contains an `i16`.",43,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"visit_i32","","The input contains an `i32`.",43,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"visit_i64","","The input contains an `i64`.",43,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"visit_u8","","The input contains a `u8`.",43,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"visit_u16","","The input contains a `u16`.",43,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"visit_u32","","The input contains a `u32`.",43,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"visit_u64","","The input contains a `u64`.",43,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"visit_f32","","The input contains an `f32`.",43,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"visit_f64","","The input contains an `f64`.",43,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[11,"visit_char","","The input contains a `char`.",43,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",43,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",43,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",43,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",43,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_some","","The input contains an optional that is present.",43,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",43,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",43,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_map","","The input contains a key-value map.",43,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_enum","","The input contains an enum.",43,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",44,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",44,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",45,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["option"],"n":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",45,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"g":["option"],"n":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",45,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",45,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",46,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",46,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",46,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",46,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",47,null],[10,"unit_variant","","Called when deserializing a variant with no values.",47,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",47,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",47,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",47,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",47,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",48,null],[10,"into_deserializer","","Convert this value into a deserializer.",48,null],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"unexpected"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"unexpected"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"unexpected"}],"o":{"n":"bool"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_deserialize","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"from_ast","","",0,{"i":[{"n":"ctxt"},{"n":"deriveinput"}],"o":{"n":"container"}}],[11,"all_fields","","",3,{"i":[{"n":"self"}],"o":{"g":["iterator"],"n":"box"}}],[11,"has_getter","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[0,"attr","serde_derive_internals","",null,null],[3,"Name","serde_derive_internals::attr","",null,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",5,null],[13,"UPPERCASE","","Rename direct children to \"UPPERCASE\" style.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[13,"ScreamingKebabCase","","Rename direct children to \"SCREAMING-KEBAB-CASE\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",null,null],[13,"No","","It does not.",7,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",7,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",7,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",8,null],[13,"Default","","The default is given by `std::default::Default::default()`.",8,null],[13,"Path","","The default is given by this function.",8,null],[5,"get_serde_meta_items","","",null,{"i":[{"n":"attribute"}],"o":{"g":["vec"],"n":"option"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",9,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"identifier"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_some","","",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,{"i":[{"n":"ctxt"},{"n":"deriveinput"}],"o":{"n":"self"}}],[11,"name","","",10,{"i":[{"n":"self"}],"o":{"n":"name"}}],[11,"rename_all","","",10,{"i":[{"n":"self"}],"o":{"n":"renamerule"}}],[11,"deny_unknown_fields","","",10,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"default","","",10,{"i":[{"n":"self"}],"o":{"n":"default"}}],[11,"ser_bound","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"de_bound","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"tag","","",10,{"i":[{"n":"self"}],"o":{"n":"enumtag"}}],[11,"from_type","","",10,{"i":[{"n":"self"}],"o":{"g":["ty"],"n":"option"}}],[11,"into_type","","",10,{"i":[{"n":"self"}],"o":{"g":["ty"],"n":"option"}}],[11,"remote","","",10,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"identifier","","",10,{"i":[{"n":"self"}],"o":{"n":"identifier"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_ast","","",11,{"i":[{"n":"ctxt"},{"n":"variant"}],"o":{"n":"self"}}],[11,"name","","",11,{"i":[{"n":"self"}],"o":{"n":"name"}}],[11,"rename_by_rule","","",11,{"i":[{"n":"self"},{"n":"renamerule"}]}],[11,"rename_all","","",11,{"i":[{"n":"self"}],"o":{"n":"renamerule"}}],[11,"skip_deserializing","","",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"skip_serializing","","",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"other","","",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"serialize_with","","",11,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"deserialize_with","","",11,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"default"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"default"}],"o":{"n":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,{"i":[{"n":"ctxt"},{"n":"usize"},{"n":"field"},{"g":["variant"],"n":"option"},{"n":"default"}],"o":{"n":"self"}}],[11,"name","","",12,{"i":[{"n":"self"}],"o":{"n":"name"}}],[11,"rename_by_rule","","",12,{"i":[{"n":"self"},{"n":"renamerule"}]}],[11,"skip_serializing","","",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"skip_deserializing","","",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"skip_serializing_if","","",12,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"default","","",12,{"i":[{"n":"self"}],"o":{"n":"default"}}],[11,"serialize_with","","",12,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"deserialize_with","","",12,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"ser_bound","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"de_bound","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"borrowed_lifetimes","","",12,{"i":[{"n":"self"}],"o":{"n":"btreeset"}}],[11,"getter","","",12,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"default","serde_derive_internals","",13,{"o":{"n":"ctxt"}}],[11,"new","","",13,{"o":{"n":"self"}}],[11,"error","","",13,{"i":[{"n":"self"},{"n":"t"}]}],[11,"check","","",13,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"result"}}],[11,"drop","","",13,{"i":[{"n":"self"}]}],[11,"fmt","serde_derive_internals::attr","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"renamerule"}],"o":{"n":"bool"}}],[11,"apply_to_variant","","",5,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"string"}}],[11,"apply_to_field","","",5,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"string"}}],[11,"from_str","","",5,{"i":[{"n":"str"}],"o":{"n":"result"}}]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"i":[{"n":"r"}],"o":{"n":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"i":[{"n":"str"}],"o":{"n":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"i":[{"n":"t"}],"o":{"g":["vec"],"n":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"i":[{"n":"t"}],"o":{"g":["vec"],"n":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"i":[{"n":"w"},{"n":"t"}],"o":{"n":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"i":[{"n":"w"},{"n":"t"}],"o":{"n":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"i":[{"n":"value"}],"o":{"g":["error"],"n":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"i":[{"n":"t"}],"o":{"g":["value","error"],"n":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"i":[{"n":"r"}],"o":{"n":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"i":[{"n":"str"}],"o":{"n":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,{"i":[{"n":"r"}],"o":{"n":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"i":[{"n":"r"}],"o":{"n":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,{"i":[{"n":"self"}],"o":{"n":"streamdeserializer"}}],[11,"new","","Create a JSON stream deserializer from one of the possible serde_json input sources.",2,{"i":[{"n":"r"}],"o":{"n":"self"}}],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",3,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",3,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",3,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",3,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"column","","One-based column number at which the error was detected.",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"classify","","Categorizes the cause of this error.",4,{"i":[{"n":"self"}],"o":{"n":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"category"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"category"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"custom","","",4,{"i":[{"n":"t"}],"o":{"n":"error"}}],[11,"invalid_type","","",4,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"custom","","",4,{"i":[{"n":"t"}],"o":{"n":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",5,null],[13,"Occupied","","An occupied Entry.",5,null],[11,"new","","Makes a new empty Map.",6,{"o":{"n":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",6,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"clear","","Clears the map, removing all values.",6,{"i":[{"n":"self"}]}],[11,"get","","Returns a reference to the value corresponding to the key.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"g":["value"],"n":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"g":["value"],"n":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",6,{"i":[{"n":"self"},{"n":"string"},{"n":"value"}],"o":{"g":["value"],"n":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"g":["value"],"n":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"entry"}}],[11,"len","","Returns the number of elements in the map.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",6,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",6,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",6,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",6,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"default","","",6,{"o":{"n":"self"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"index","","",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"value"}}],[11,"index_mut","","",6,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"value"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"serialize","","",6,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",6,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"from_iter","","",6,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"extend","","",6,{"i":[{"n":"self"},{"n":"t"}]}],[11,"key","","Returns a reference to this entry's key.",5,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",5,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",5,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",7,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",7,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"value"}}],[11,"key","","Gets a reference to the key in the entry.",8,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",8,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",8,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",8,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",10,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"into_iter","","",6,null],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",11,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",13,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",14,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",14,null],[13,"Solidus","","An escaped solidus `/`",14,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",14,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",14,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",14,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",14,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",14,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",14,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"i":[{"n":"w"},{"n":"t"}],"o":{"n":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"i":[{"n":"w"},{"n":"t"}],"o":{"n":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"i":[{"n":"t"}],"o":{"g":["vec"],"n":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"i":[{"n":"t"}],"o":{"g":["vec"],"n":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"bool"}],"o":{"n":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"f64"}],"o":{"n":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"str"}],"o":{"n":"result"}}],[11,"write_char_escape","","Writes a character escape code to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"charescape"}],"o":{"n":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"bool"}],"o":{"n":"result"}}],[11,"end_array_value","","Called after every array value.",15,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",15,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_object_key","","Called before every object key.",15,{"i":[{"n":"self"},{"n":"w"},{"n":"bool"}],"o":{"n":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",15,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",15,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_object_value","","Called after every object value.",15,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"new","","Creates a new JSON serializer.",16,{"i":[{"n":"w"}],"o":{"n":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",16,{"i":[{"n":"w"}],"o":{"n":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",16,{"i":[{"n":"w"},{"n":"f"}],"o":{"n":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",16,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"compactformatter"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"prettyformatter"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",18,{"o":{"n":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",18,null],[11,"default","","",18,{"o":{"n":"self"}}],[11,"begin_array","","",18,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_array","","",18,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_array_value","","",18,{"i":[{"n":"self"},{"n":"w"},{"n":"bool"}],"o":{"n":"result"}}],[11,"end_array_value","","",18,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_object","","",18,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_object","","",18,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_object_key","","",18,{"i":[{"n":"self"},{"n":"w"},{"n":"bool"}],"o":{"n":"result"}}],[11,"begin_object_value","","",18,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_object_value","","",18,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"i":[{"n":"t"}],"o":{"g":["value","error"],"n":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"i":[{"n":"value"}],"o":{"g":["error"],"n":"result"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"value"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bool"}}],[11,"from","","",0,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"isize"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"i":[{"n":"bool"}],"o":{"n":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"i":[{"g":["str"],"n":"cow"}],"o":{"n":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"i":[{"g":["string","value"],"n":"map"}],"o":{"n":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"i":[{"n":"vec"}],"o":{"n":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"serialize","","",0,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",0,{"i":[{"n":"d"}],"o":{"g":["value"],"n":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["value","error"],"n":"result"}}],[11,"deserialize_any","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_option","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",0,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",0,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",0,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["value"],"n":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["value"],"n":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["map"],"n":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["map"],"n":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["value"],"n":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["value"],"n":"option"}}],[11,"default","","",0,{"o":{"n":"value"}}],[11,"clone","serde_json","",19,{"i":[{"n":"self"}],"o":{"n":"number"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",19,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",19,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",19,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",19,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",19,{"i":[{"n":"f64"}],"o":{"g":["number"],"n":"option"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",19,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",19,{"i":[{"n":"d"}],"o":{"g":["number"],"n":"result"}}],[11,"deserialize_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_bool","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",19,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"from","","",19,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"from","","",19,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"from","","",19,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"from","","",19,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"from","","",19,{"i":[{"n":"isize"}],"o":{"n":"self"}}],[11,"from","","",19,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",19,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",19,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",19,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"from","","",19,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",20,{"i":[{"n":"r"}],"o":{"n":"self"}}],[11,"next","","",20,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"peek","","",20,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"discard","","",20,{"i":[{"n":"self"}]}],[11,"position","","",20,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"peek_position","","",20,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"byte_offset","","",20,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"parse_str","","",20,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"parse_str_raw","","",20,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"ignore_str","","",20,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",21,null],[11,"next","","",21,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"peek","","",21,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"discard","","",21,{"i":[{"n":"self"}]}],[11,"position","","",21,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"peek_position","","",21,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"byte_offset","","",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"parse_str","","",21,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"parse_str_raw","","",21,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"ignore_str","","",21,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",22,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"next","","",22,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"peek","","",22,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"discard","","",22,{"i":[{"n":"self"}]}],[11,"position","","",22,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"peek_position","","",22,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"byte_offset","","",22,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"parse_str","","",22,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"parse_str_raw","","",22,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"ignore_str","","",22,{"i":[{"n":"self"}],"o":{"n":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"Number"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["sha1"] = {"doc":"A minimal implementation of SHA1 for rust.","items":[[3,"Sha1","sha1","Represents a Sha1 hash object in memory.",null,null],[3,"Digest","","Digest generated from a `Sha1` instance.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"sha1"}}],[11,"new","","Creates an fresh sha1 hash object.",0,{"o":{"n":"sha1"}}],[11,"reset","","Resets the hash object to it's initial state.",0,{"i":[{"n":"self"}]}],[11,"update","","Update hash with input data.",0,null],[11,"digest","","Retrieve digest result.",0,{"i":[{"n":"self"}],"o":{"n":"digest"}}],[11,"bytes","","Returns the 160 bit (20 byte) digest as a byte array.",1,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Sha1"],[3,"Digest"]]};
searchIndex["shlex"] = {"doc":"Same idea as (but implementation not directly based on) the Python shlex module.  However, this implementation does not support any of the Python module's customization because it makes parsing slower and is fairly useless.  You only get the default settings of shlex.split, which mimic the POSIX shell: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html","items":[[3,"Shlex","shlex","An iterator that takes an input string and splits it into the words using the same syntax as the POSIX shell.",null,null],[12,"line_no","","The number of newlines read so far, plus one.",0,null],[12,"had_error","","An input string is erroneous if it ends while inside a quotation or right after an unescaped backslash.  Since Iterator does not have a mechanism to return an error, if that happens, Shlex just throws out the last token, ends the iteration, and sets 'had_error' to true; best to check it after you're done iterating.",0,null],[5,"split","","Convenience function that consumes the whole string at once.  Returns None if the input was erroneous.",null,{"i":[{"n":"str"}],"o":{"g":["vec"],"n":"option"}}],[5,"quote","","Given a single word, return a string suitable to encode it as a shell argument.",null,{"i":[{"n":"str"}],"o":{"g":["str"],"n":"cow"}}],[11,"new","","",0,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}]],"paths":[[3,"Shlex"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"siphasher13"}}],[11,"default","","",0,{"o":{"n":"siphasher13"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"siphasher24"}}],[11,"default","","",1,{"o":{"n":"siphasher24"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"siphasher"}}],[11,"default","","",2,{"o":{"n":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"o":{"n":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"o":{"n":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"o":{"n":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"write","","",2,null],[11,"finish","","",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"default","","",3,{"o":{"n":"hash128"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"siphasher13"}}],[11,"default","","",5,{"o":{"n":"siphasher13"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"siphasher24"}}],[11,"default","","",6,{"o":{"n":"siphasher24"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"siphasher"}}],[11,"default","","",7,{"o":{"n":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"o":{"n":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",7,null],[11,"finish128","","Return a 128-bit hash",7,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"o":{"n":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",5,null],[11,"finish128","","Return a 128-bit hash",5,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"o":{"n":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"i":[{"n":"u64"},{"n":"u64"}],"o":{"n":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",6,null],[11,"finish128","","Return a 128-bit hash",6,{"i":[{"n":"self"}],"o":{"n":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"as_bytes","","Convert into a 16-bytes vector",3,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"Entry","","A handle to an occupied slot in the `Slab`",null,null],[3,"VacantEntry","","A handle to a vacant slot in the `Slab`",null,null],[3,"Iter","","An iterator over the values stored in the `Slab`",null,null],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",null,null],[11,"with_capacity","","Returns an empty `Slab` with the requested capacity",0,{"i":[{"n":"usize"}],"o":{"n":"slab"}}],[11,"len","","Returns the number of values stored by the `Slab`",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"capacity","","Returns the total capacity of the `Slab`",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the `Slab` is storing no values",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"available","","Returns the number of available slots remaining in the `Slab`",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"has_available","","Returns true if the `Slab` has available slots",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"contains","","Returns true if the `Slab` contains a value for the given token",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"bool"}}],[11,"get","","Get a reference to the value associated with the given token",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"get_mut","","Get a mutable reference to the value associated with the given token",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"insert","","Insert a value into the slab, returning the associated token",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"entry","","Returns a handle to an entry.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["entry"],"n":"option"}}],[11,"vacant_entry","","Returns a handle to a vacant entry.",0,{"i":[{"n":"self"}],"o":{"g":["vacantentry"],"n":"option"}}],[11,"remove","","Releases the given slot",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"option"}}],[11,"retain","","Retain only the elements specified by the predicate.",0,{"i":[{"n":"self"},{"n":"f"}]}],[11,"iter","","An iterator for visiting all elements stored in the `Slab`",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","A mutable iterator for visiting all elements stored in the `Slab`",0,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"clear","","Empty the slab, by freeing all entries",0,{"i":[{"n":"self"}]}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Slab`. Does nothing if the capacity is already sufficient.",0,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"index","","",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"t"}}],[11,"index_mut","","",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"t"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"replace","","Replace the value stored in the entry",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"replace_with","","Apply the function to the current value, replacing it with the result of the function.",1,{"i":[{"n":"self"},{"n":"f"}]}],[11,"remove","","Remove and return the value stored in the entry",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get","","Get a reference to the value stored in the entry",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Get a mutable reference to the value stored in the entry",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_mut","","Convert the entry handle to a mutable reference",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"index","","Return the entry index",1,{"i":[{"n":"self"}],"o":{"n":"i"}}],[11,"insert","","Insert a value into the entry",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"entry"}}],[11,"index","","Returns the entry index",2,{"i":[{"n":"self"}],"o":{"n":"i"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[3,"Slab"],[3,"Entry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["staticfile"] = {"doc":"Static file-serving handler.","items":[[3,"Static","staticfile","The static file-serving `Handler`.",null,null],[12,"root","","The path this handler is serving files from.",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"static"}}],[11,"new","","Create a new instance of `Static` with a given root path.",0,{"i":[{"n":"p"}],"o":{"n":"static"}}],[11,"handle","","",0,{"i":[{"n":"self"},{"n":"request"}],"o":{"g":["response"],"n":"ironresult"}}]],"paths":[[3,"Static"]]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector. Returns a vector of corresponding values between 0.0 and 1.0 (higher value means more similar).",null,null],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"usize"}}],[5,"osa_distance_against_vec","","Calculates the optimal string alignment distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[6,"HammingResult","","",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"strsimerror"}],"o":{"n":"bool"}}]],"paths":[[4,"StrSimError"]]};
searchIndex["structopt"] = {"doc":"`StructOpt` trait definition","items":[[0,"clap","structopt","Re-export of clap",null,null],[4,"ErrorKind","structopt::clap","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",0,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",0,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",0,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'sggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",0,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",0,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",0,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",0,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",0,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",0,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",0,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",0,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",0,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",0,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",0,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",0,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",0,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",0,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",0,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",0,null],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",0,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",1,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",1,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",1,null],[13,"PowerShell","","Generates a completion file for PowerShell",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,null],[13,"AllowMissingPositional","","Allows one to implement a CLI where the second to last positional argument is optional, but the final positional argument is required. Such as `$ prog [optional] <required>` where one of the two following usages is allowed:",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcomands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,null],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independant version strings from their parents.)",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,null],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,null],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",2,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formated error message",3,null],[12,"kind","","The type of error",3,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",3,null],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[3,"Arg","","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`] [`Arg::set`]: ./struct.Arg.html#method.set [`Arg::unset`]: ./struct.Arg.html#method.unset [`Arg::is_set`]: ./struct.Arg.html#method.is_set",null,null],[13,"Required","","The argument must be used",4,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",4,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",4,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",4,null],[13,"Hidden","","The argument should not be shown in help text",4,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",4,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimter",4,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",4,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",4,null],[13,"HidePossibleValues","","Hides the possible values from the help string",4,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",4,null],[13,"RequireEquals","","Require options use `--option=val` syntax",4,null],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",4,null],[13,"HideDefaultValue","","Hides the default value from the help string",4,null],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",4,null],[13,"HideEnvValues","","Hides ENV values in the help message",4,null],[6,"Result","","Short hand for [`Result`] type [`Result`]: https://doc.rust-lang.org/std/result/enum.Result.html",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[8,"StructOpt","structopt","A struct that is converted from command line arguments.",null,null],[10,"clap","","Returns the corresponding `clap::App`.",5,{"o":{"n":"app"}}],[10,"from_clap","","Creates the struct from `clap::ArgMatches`.  It cannot fail with a parameter generated by `clap` by construction.",5,{"i":[{"n":"argmatches"}],"o":{"n":"self"}}],[11,"from_args","","Gets the struct from the command line arguments.  Print the error message and quit the program in case of failure.",5,{"o":{"n":"self"}}],[11,"from","structopt::clap","",3,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"from","","",6,{"i":[{"n":"arggroup"}],"o":{"n":"arggroup"}}],[11,"from","","",7,{"i":[{"n":"arg"}],"o":{"n":"arg"}}],[11,"from","","",3,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"arg"}],"o":{"n":"bool"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"bool"}}],[11,"next_back","","",9,{"i":[{"n":"self"}],"o":{"g":["osstr"],"n":"option"}}],[11,"next_back","","",10,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"arggroup"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"app"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"osvalues"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"shell"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"argmatches"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"argsettings"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"subcommand"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"arg"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"appsettings"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_str","","",2,{"i":[{"n":"str"}],"o":{"g":["appsettings"],"n":"result"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"g":["shell"],"n":"result"}}],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"g":["argsettings"],"n":"result"}}],[11,"default","","",11,{"o":{"n":"argmatches"}}],[11,"default","","",9,{"o":{"n":"osvalues"}}],[11,"default","","",10,{"o":{"n":"values"}}],[11,"default","","",7,{"o":{"n":"arg"}}],[11,"default","","",6,{"o":{"n":"arggroup"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"g":["osstr"],"n":"option"}}],[11,"size_hint","","",9,null],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"size_hint","","",10,null],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",12,{"i":[{"n":"str"}],"o":{"n":"app"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",11,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["str"],"n":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",11,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["cow"],"n":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",11,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["osstr"],"n":"option"}}],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",11,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["values"],"n":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",11,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["vec"],"n":"option"}}],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",11,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["osvalues"],"n":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",11,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",11,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"u64"}}],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",11,{"i":[{"n":"self"},{"n":"s"}],"o":{"g":["argmatches"],"n":"option"}}],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",11,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",11,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"variants","","A list of possible variants in `&'static str` form",1,null],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",6,{"i":[{"n":"str"}],"o":{"n":"arggroup"}}],[11,"arg","","Adds an [argument] to this group by name",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arggroup"}}],[11,"args","","Adds multiple [arguments] to this group by name",6,null],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arggroup"}}],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",6,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arggroup"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arggroup"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",6,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",6,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arggroup"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",6,null],[11,"use_stderr","","Should the message be written to `stdout` or not",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",3,null],[11,"with_description","","Create an error with a custom description.",3,{"i":[{"n":"str"},{"n":"errorkind"}],"o":{"n":"error"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",8,{"i":[{"n":"s"}],"o":{"n":"app"}}],[11,"get_name","","Get the name of the app",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"get_bin_name","","Get the name of the binary",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",8,{"i":[{"n":"s"}],"o":{"n":"app"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"template","","Sets the help template to be used, overriding the default format.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",8,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"app"}}],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",8,null],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",8,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"app"}}],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",8,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",8,{"i":[{"n":"self"},{"n":"appsettings"}],"o":{"n":"app"}}],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",8,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"app"}}],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"app"}}],[11,"arg","","Adds an [argument] to the list of valid possibilities.",8,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"app"}}],[11,"args","","Adds multiple [arguments] to the list of valid possibilties",8,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"app"}}],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"app"}}],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",8,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",8,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"app"}}],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",8,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",8,{"i":[{"n":"self"},{"n":"arggroup"}],"o":{"n":"app"}}],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",8,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",8,{"i":[{"n":"self"},{"n":"app"}],"o":{"n":"app"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",8,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"app"}}],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",8,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"app"}}],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",8,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",8,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",8,{"i":[{"n":"self"},{"n":"w"}],"o":{"g":["error"],"n":"result"}}],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",8,{"i":[{"n":"self"},{"n":"w"}],"o":{"g":["error"],"n":"result"}}],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",8,{"i":[{"n":"self"},{"n":"w"}],"o":{"g":["error"],"n":"result"}}],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",8,{"i":[{"n":"self"},{"n":"w"}],"o":{"g":["error"],"n":"result"}}],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",8,null],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",8,null],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",8,{"i":[{"n":"self"}],"o":{"n":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",8,{"i":[{"n":"self"}],"o":{"g":["argmatches","error"],"n":"result"}}],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",8,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",8,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["argmatches","error"],"n":"result"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",8,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["argmatches","error"],"n":"result"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",7,{"i":[{"n":"str"}],"o":{"n":"arg"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",7,{"i":[{"n":"str"}],"o":{"n":"arg"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"arg"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"arg"}}],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",7,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"arg"}}],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",7,null],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",7,null],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",7,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",7,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",7,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",7,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"n":"arg"}}],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",7,null],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",7,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"n":"arg"}}],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",7,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",7,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"index","","Specifies the index of a positional argument starting at 1.",7,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"arg"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"hidden","","Hides an argument from help message output.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",7,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",7,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",7,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"arg"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",7,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"arg"}}],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",7,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"arg"}}],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",7,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"arg"}}],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",7,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"arg"}}],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",7,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",7,{"i":[{"n":"self"},{"n":"osstr"}],"o":{"n":"arg"}}],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",7,{"i":[{"n":"self"},{"n":"str"},{"g":["str"],"n":"option"},{"n":"str"}],"o":{"n":"arg"}}],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",7,{"i":[{"n":"self"},{"n":"str"},{"g":["osstr"],"n":"option"},{"n":"osstr"}],"o":{"n":"arg"}}],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",7,null],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",7,null],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"arg"}}],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",7,{"i":[{"n":"self"},{"n":"osstr"}],"o":{"n":"arg"}}],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"arg"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"arg"}}],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",7,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"bool"}}],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",7,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"arg"}}],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",7,{"i":[{"n":"self"},{"n":"argsettings"}],"o":{"n":"arg"}}]],"paths":[[4,"ErrorKind"],[4,"Shell"],[4,"AppSettings"],[3,"Error"],[4,"ArgSettings"],[8,"StructOpt"],[3,"ArgGroup"],[3,"Arg"],[3,"App"],[3,"OsValues"],[3,"Values"],[3,"ArgMatches"],[3,"SubCommand"]]};
searchIndex["structopt_derive"] = {"doc":"How to `derive(StructOpt)`","items":[[5,"structopt","structopt_derive","Generates the `StructOpt` impl.",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"i":[{"n":"str"}],"o":{"g":["deriveinput","string"],"n":"result"}}],[5,"parse_type","","",null,{"i":[{"n":"str"}],"o":{"g":["ty","string"],"n":"result"}}],[5,"parse_path","","",null,{"i":[{"n":"str"}],"o":{"g":["path","string"],"n":"result"}}],[5,"parse_where_clause","","",null,{"i":[{"n":"str"}],"o":{"g":["whereclause","string"],"n":"result"}}],[5,"parse_token_trees","","",null,{"i":[{"n":"str"}],"o":{"g":["vec","string"],"n":"result"}}],[5,"parse_ident","","",null,{"i":[{"n":"str"}],"o":{"g":["ident","string"],"n":"result"}}],[5,"parse_ty_param_bound","","",null,{"i":[{"n":"str"}],"o":{"g":["typarambound","string"],"n":"result"}}],[5,"parse_outer_attr","","",null,{"i":[{"n":"str"}],"o":{"g":["attribute","string"],"n":"result"}}],[11,"to_tokens","","",0,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",29,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",30,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"attribute"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"attribute"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"attribute"}],"o":{"n":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"attrstyle"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"attrstyle"}],"o":{"n":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"metaitem"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"metaitem"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"metaitem"}],"o":{"n":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"nestedmetaitem"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"nestedmetaitem"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"nestedmetaitem"}],"o":{"n":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"constexpr"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"constexpr"}],"o":{"n":"bool"}}],[11,"ne","","",31,{"i":[{"n":"self"},{"n":"constexpr"}],"o":{"n":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",32,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",33,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"variant"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"variant"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"variantdata"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"variantdata"}],"o":{"n":"bool"}}],[11,"ne","","",32,{"i":[{"n":"self"},{"n":"variantdata"}],"o":{"n":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"visibility"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"bool"}}],[11,"ne","","",33,{"i":[{"n":"self"},{"n":"visibility"}],"o":{"n":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",54,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",55,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",56,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",4,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",5,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",6,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",35,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",8,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",36,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",7,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",10,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",9,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"generics"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"generics"}],"o":{"n":"bool"}}],[11,"default","","",3,{"o":{"n":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"lifetime"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"new","","",4,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"lifetimedef"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"lifetimedef"}],"o":{"n":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"typaram"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"typaram"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"typaram"}],"o":{"n":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"typarambound"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"typarambound"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"typarambound"}],"o":{"n":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"traitboundmodifier"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"traitboundmodifier"}],"o":{"n":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"whereclause"}],"o":{"n":"bool"}}],[11,"default","","",8,{"o":{"n":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"o":{"n":"self"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"wherepredicate"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"wherepredicate"}],"o":{"n":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"whereboundpredicate"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"whereboundpredicate"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"whereboundpredicate"}],"o":{"n":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"whereregionpredicate"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"whereregionpredicate"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"whereregionpredicate"}],"o":{"n":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"whereeqpredicate"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"whereeqpredicate"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"whereeqpredicate"}],"o":{"n":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",57,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",57,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"le","","",57,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"gt","","",57,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"ge","","",57,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"new","","",57,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from","","",57,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",57,{"i":[{"g":["str"],"n":"cow"}],"o":{"n":"self"}}],[11,"from","","",57,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",57,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"as_ref","","",57,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"to_tokens","","",39,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"lit"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"lit"}],"o":{"n":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"strstyle"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"strstyle"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"strstyle"}],"o":{"n":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"i":[{"n":"string"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"str"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"g":["u8"],"n":"vec"}],"o":{"n":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"i":[{"n":"char"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"bool"}],"o":{"n":"lit"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"intty"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"intty"}],"o":{"n":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"floatty"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"floatty"}],"o":{"n":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"i":[{"n":"isize"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"i8"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"i16"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"i32"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"i64"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"usize"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"u8"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"u16"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"u32"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"u64"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"f32"}],"o":{"n":"lit"}}],[11,"from","","",39,{"i":[{"n":"f64"}],"o":{"n":"lit"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"strlit"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"bytestrlit"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"intlit"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"floatlit"}}],[11,"to_tokens","","",16,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",44,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",15,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",43,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",41,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"mac"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"mac"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"mac"}],"o":{"n":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"tokentree"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"tokentree"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"tokentree"}],"o":{"n":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"delimited"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"delimited"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"delimited"}],"o":{"n":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"token"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"ne","","",43,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"binoptoken"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"binoptoken"}],"o":{"n":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"delimtoken"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"delimtoken"}],"o":{"n":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"deriveinput"}],"o":{"n":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"body"}}],[11,"eq","","",45,{"i":[{"n":"self"},{"n":"body"}],"o":{"n":"bool"}}],[11,"ne","","",45,{"i":[{"n":"self"},{"n":"body"}],"o":{"n":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"assign_op","","",46,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",46,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"op","","",47,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"to_tokens","","",47,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"binop"}}],[11,"eq","","",46,{"i":[{"n":"self"},{"n":"binop"}],"o":{"n":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"unop"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"unop"}],"o":{"n":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",50,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",23,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",24,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",51,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",18,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",27,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",22,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",25,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",20,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",19,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",53,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"to_tokens","","",48,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"ty"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"ty"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"ty"}],"o":{"n":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"mutty"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"mutty"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"mutty"}],"o":{"n":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"mutability"}}],[11,"eq","","",50,{"i":[{"n":"self"},{"n":"mutability"}],"o":{"n":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"path"}],"o":{"n":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"pathsegment"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"pathsegment"}],"o":{"n":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"pathparameters"}}],[11,"eq","","",51,{"i":[{"n":"self"},{"n":"pathparameters"}],"o":{"n":"bool"}}],[11,"ne","","",51,{"i":[{"n":"self"},{"n":"pathparameters"}],"o":{"n":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"o":{"n":"self"}}],[11,"is_empty","","",51,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"anglebracketedparameterdata"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"anglebracketedparameterdata"}],"o":{"n":"bool"}}],[11,"default","","",18,{"o":{"n":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"typebinding"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"typebinding"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"typebinding"}],"o":{"n":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"parenthesizedparameterdata"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"parenthesizedparameterdata"}],"o":{"n":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"polytraitref"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"polytraitref"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"polytraitref"}],"o":{"n":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"qself"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"qself"}],"o":{"n":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"barefnty"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"barefnty"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"barefnty"}],"o":{"n":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"unsafety"}}],[11,"eq","","",53,{"i":[{"n":"self"},{"n":"unsafety"}],"o":{"n":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"abi"}}],[11,"eq","","",48,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"bool"}}],[11,"ne","","",48,{"i":[{"n":"self"},{"n":"abi"}],"o":{"n":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"barefnarg"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"bool"}}],[11,"ne","","",19,{"i":[{"n":"self"},{"n":"barefnarg"}],"o":{"n":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"functionretty"}}],[11,"eq","","",49,{"i":[{"n":"self"},{"n":"functionretty"}],"o":{"n":"bool"}}],[11,"ne","","",49,{"i":[{"n":"self"},{"n":"functionretty"}],"o":{"n":"bool"}}],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"i":[{"n":"v"},{"n":"option"}]}],[5,"walk_lifetime_def","","",null,{"i":[{"n":"v"},{"n":"lifetimedef"}]}],[5,"walk_poly_trait_ref","","",null,{"i":[{"n":"v"},{"n":"polytraitref"},{"n":"traitboundmodifier"}]}],[5,"walk_derive_input","","",null,{"i":[{"n":"v"},{"n":"deriveinput"}]}],[5,"walk_variant","","",null,{"i":[{"n":"v"},{"n":"variant"},{"n":"generics"}]}],[5,"walk_ty","","",null,{"i":[{"n":"v"},{"n":"ty"}]}],[5,"walk_path","","",null,{"i":[{"n":"v"},{"n":"path"}]}],[5,"walk_path_segment","","",null,{"i":[{"n":"v"},{"n":"pathsegment"}]}],[5,"walk_path_parameters","","",null,{"i":[{"n":"v"},{"n":"pathparameters"}]}],[5,"walk_assoc_type_binding","","",null,{"i":[{"n":"v"},{"n":"typebinding"}]}],[5,"walk_ty_param_bound","","",null,{"i":[{"n":"v"},{"n":"typarambound"}]}],[5,"walk_generics","","",null,{"i":[{"n":"v"},{"n":"generics"}]}],[5,"walk_fn_ret_ty","","",null,{"i":[{"n":"v"},{"n":"functionretty"}]}],[5,"walk_variant_data","","",null,{"i":[{"n":"v"},{"n":"variantdata"}]}],[5,"walk_field","","",null,{"i":[{"n":"v"},{"n":"field"}]}],[5,"walk_const_expr","","",null,{"i":[{"n":"v"},{"n":"constexpr"}]}],[5,"walk_mac","","",null,{"i":[{"n":"v"},{"n":"mac"}]}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_derive_input","","",58,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_ty","","",58,{"i":[{"n":"self"},{"n":"ty"}]}],[11,"visit_generics","","",58,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ty_param_bound","","",58,{"i":[{"n":"self"},{"n":"typarambound"}]}],[11,"visit_poly_trait_ref","","",58,{"i":[{"n":"self"},{"n":"polytraitref"},{"n":"traitboundmodifier"}]}],[11,"visit_variant_data","","",58,{"i":[{"n":"self"},{"n":"variantdata"},{"n":"ident"},{"n":"generics"}]}],[11,"visit_field","","",58,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_variant","","",58,{"i":[{"n":"self"},{"n":"variant"},{"n":"generics"}]}],[11,"visit_lifetime","","",58,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",58,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_path","","",58,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_segment","","",58,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_path_parameters","","",58,{"i":[{"n":"self"},{"n":"pathparameters"}]}],[11,"visit_assoc_type_binding","","",58,{"i":[{"n":"self"},{"n":"typebinding"}]}],[11,"visit_attribute","","",58,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_fn_ret_ty","","",58,{"i":[{"n":"self"},{"n":"functionretty"}]}],[11,"visit_const_expr","","",58,{"i":[{"n":"self"},{"n":"constexpr"}]}],[11,"visit_lit","","",58,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_mac","","",58,{"i":[{"n":"self"},{"n":"mac"}]}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"i":[{"n":"str"}],"o":{"g":["str","lit"],"n":"iresult"}}],[5,"string","","",null,{"i":[{"n":"str"}],"o":{"g":["str","strlit"],"n":"iresult"}}],[5,"byte_string","","",null,{"i":[{"n":"str"}],"o":{"g":["str","bytestrlit"],"n":"iresult"}}],[5,"byte","","",null,{"i":[{"n":"str"}],"o":{"g":["str","u8"],"n":"iresult"}}],[5,"character","","",null,{"i":[{"n":"str"}],"o":{"g":["str","char"],"n":"iresult"}}],[5,"float","","",null,{"i":[{"n":"str"}],"o":{"g":["str","floatlit"],"n":"iresult"}}],[5,"int","","",null,{"i":[{"n":"str"}],"o":{"g":["str","intlit"],"n":"iresult"}}],[5,"boolean","","",null,{"i":[{"n":"str"}],"o":{"g":["str","bool"],"n":"iresult"}}],[5,"ty","","",null,{"i":[{"n":"str"}],"o":{"g":["str","ty"],"n":"iresult"}}],[5,"path","","",null,{"i":[{"n":"str"}],"o":{"g":["str","path"],"n":"iresult"}}],[5,"tt","","",null,{"i":[{"n":"str"}],"o":{"g":["str","tokentree"],"n":"iresult"}}],[5,"ident","","",null,{"i":[{"n":"str"}],"o":{"g":["str","ident"],"n":"iresult"}}],[5,"lifetime","","",null,{"i":[{"n":"str"}],"o":{"g":["str","lifetime"],"n":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"o"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"iresult"}],"o":{"n":"bool"}}],[11,"ne","","",59,{"i":[{"n":"self"},{"n":"iresult"}],"o":{"n":"bool"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"iresult"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"iresult"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"iresult"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["synstructure"] = {"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",null,null],[12,"binding","","The name which this BindingInfo will bind to.",0,null],[12,"style","","The type of binding which this BindingInfo will create.",0,null],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn` `Variant`, however this type may also be used as the sole variant for astruct.",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"data","","",1,null],[12,"discriminant","","",1,null],[3,"VariantInfo","","A wrapper around a `syn` `DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",null,null],[12,"prefix","","",2,null],[3,"Structure","","A wrapper around a `syn` `DeriveInput` which provides utilities for creating custom derive trait implementations.",null,null],[4,"BindStyle","","The type of binding to use when generating a pattern.",null,null],[13,"Move","","`x`",3,null],[13,"MoveMut","","`mut x`",3,null],[13,"Ref","","`ref x`",3,null],[13,"RefMut","","`ref mut x`",3,null],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"bindstyle"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bindstyle"}],"o":{"n":"bool"}}],[11,"hash","","",3,null],[11,"to_tokens","","",3,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"bindinginfo"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"bindinginfo"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"bindinginfo"}],"o":{"n":"bool"}}],[11,"hash","","",0,null],[11,"to_tokens","","",0,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"pat","","Generates the pattern fragment for this field binding.",0,{"i":[{"n":"self"}],"o":{"n":"tokens"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,{"i":[{"n":"self"}],"o":{"g":["ident"],"n":"vec"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"variantast"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"variantast"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"variantast"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"variantinfo"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"variantinfo"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"variantinfo"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,null],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,null],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,{"i":[{"n":"self"}],"o":{"n":"variantast"}}],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,{"i":[{"n":"self"}],"o":{"n":"tokens"}}],[11,"construct","","Generates the token stream required to construct the current variant.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,{"i":[{"n":"self"},{"n":"i"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"remove_binding","","Remove the binding at the given index.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,{"i":[{"n":"self"}],"o":{"g":["ident"],"n":"vec"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"structure"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"structure"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"structure"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",4,{"i":[{"n":"deriveinput"}],"o":{"n":"self"}}],[11,"variants","","Returns a slice of the variants in this Structure.",4,null],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",4,null],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",4,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",4,{"i":[{"n":"self"},{"n":"i"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"remove_variant","","Remove the variant at the given index.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",4,{"i":[{"n":"self"}],"o":{"g":["ident"],"n":"vec"}}],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",4,{"i":[{"n":"self"},{"n":"typarambound"},{"n":"vec"}]}],[11,"bound_impl","","Creates an `impl` block with the required generic type fields filled in to implement the trait `path`.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokens"}}],[11,"unsafe_bound_impl","","This method is the same as `bound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokens"}}],[11,"unbound_impl","","This method is like `bound_impl` but doesn't add the additional bounds to the where clause.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokens"}}],[11,"unsafe_unbound_impl","","This method is the same as `unbound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokens"}}],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming TokenStream into a `synstructure::Structure` object, and pass it into the inner function.",null,null],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",null,null]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["tempdir"] = {"doc":"Temporary directories of files.","items":[[3,"TempDir","tempdir","A directory in the filesystem that is automatically deleted when it goes out of scope.",null,null],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"i":[{"n":"str"}],"o":{"g":["tempdir"],"n":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"i":[{"n":"p"},{"n":"str"}],"o":{"g":["tempdir"],"n":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",0,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"into_path","","Unwraps the [`Path`] contained in the `TempDir` and returns it. This destroys the `TempDir` without deleting the directory represented by the returned `Path`.",0,{"i":[{"n":"self"}],"o":{"n":"pathbuf"}}],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",0,{"i":[{"n":"self"}]}]],"paths":[[3,"TempDir"]]};
searchIndex["termcolor"] = {"doc":"This crate provides a cross platform abstraction for writing colored text to a terminal. Colors are written using either ANSI escape sequences or by communicating with a Windows console. Much of this API was motivated by use inside command line applications, where colors or styles can be configured by the end user and/or the environment.","items":[[3,"StandardStream","termcolor","Satisfies `io::Write` and `WriteColor`, and supports optional coloring to either of the standard output streams, stdout and stderr.",null,null],[3,"StandardStreamLock","","`StandardStreamLock` is a locked reference to a `StandardStream`.",null,null],[3,"BufferWriter","","Writes colored buffers to stdout or stderr.",null,null],[3,"Buffer","","Write colored text to memory.",null,null],[3,"NoColor","","Satisfies `WriteColor` but ignores all color options.",null,null],[3,"Ansi","","Satisfies `WriteColor` using standard ANSI escape sequences.",null,null],[3,"ColorSpec","","A color specification.",null,null],[3,"ParseColorError","","An error from parsing an invalid color name.",null,null],[4,"ColorChoice","","ColorChoice represents the color preferences of an end user.",null,null],[13,"Always","","Try very hard to emit colors. This includes emitting ANSI colors on Windows if the console API is unavailable.",0,null],[13,"AlwaysAnsi","","AlwaysAnsi is like Always, except it never tries to use anything other than emitting ANSI color codes.",0,null],[13,"Auto","","Try to use colors, but don't force the issue. If the console isn't available on Windows, or if TERM=dumb, for example, then don't use colors.",0,null],[13,"Never","","Never emit colors.",0,null],[4,"Color","","The set of available English colors for the terminal foreground/background.",null,null],[13,"Black","","",1,null],[13,"Blue","","",1,null],[13,"Green","","",1,null],[13,"Red","","",1,null],[13,"Cyan","","",1,null],[13,"Magenta","","",1,null],[13,"Yellow","","",1,null],[13,"White","","",1,null],[8,"WriteColor","","This trait describes the behavior of writers that support colored output.",null,null],[10,"supports_color","","Returns true if and only if the underlying writer supports colors.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"set_color","","Set the color settings of the writer.",2,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[10,"reset","","Reset the current color settings to their original settings.",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"colorchoice"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"colorchoice"}],"o":{"n":"bool"}}],[11,"stdout","","Create a new `StandardStream` with the given color preferences that writes to standard output.",3,{"i":[{"n":"colorchoice"}],"o":{"n":"standardstream"}}],[11,"stderr","","Create a new `StandardStream` with the given color preferences that writes to standard error.",3,{"i":[{"n":"colorchoice"}],"o":{"n":"standardstream"}}],[11,"lock","","Lock the underlying writer.",3,{"i":[{"n":"self"}],"o":{"n":"standardstreamlock"}}],[11,"write","","",3,null],[11,"flush","","",3,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"supports_color","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_color","","",3,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[11,"reset","","",3,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"write","","",4,null],[11,"flush","","",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"supports_color","","",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_color","","",4,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[11,"reset","","",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"stdout","","Create a new `BufferWriter` that writes to stdout with the given color preferences.",5,{"i":[{"n":"colorchoice"}],"o":{"n":"bufferwriter"}}],[11,"stderr","","Create a new `BufferWriter` that writes to stderr with the given color preferences.",5,{"i":[{"n":"colorchoice"}],"o":{"n":"bufferwriter"}}],[11,"separator","","If set, the separator given is printed between buffers. By default, no separator is printed.",5,{"i":[{"n":"self"},{"g":["vec"],"n":"option"}]}],[11,"buffer","","Creates a new `Buffer` with the current color preferences.",5,{"i":[{"n":"self"}],"o":{"n":"buffer"}}],[11,"print","","Prints the contents of the given buffer.",5,{"i":[{"n":"self"},{"n":"buffer"}],"o":{"n":"result"}}],[11,"no_color","","Create a buffer that drops all color information.",6,{"o":{"n":"buffer"}}],[11,"ansi","","Create a buffer that uses ANSI escape sequences.",6,{"o":{"n":"buffer"}}],[11,"is_empty","","Returns true if and only if this buffer is empty.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the length of this buffer in bytes.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clear","","Clears this buffer.",6,{"i":[{"n":"self"}]}],[11,"into_inner","","Consume this buffer and return the underlying raw data.",6,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"as_slice","","Return the underlying data of the buffer.",6,null],[11,"as_mut_slice","","Return the underlying data of the buffer as a mutable slice.",6,null],[11,"write","","",6,null],[11,"flush","","",6,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"supports_color","","",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_color","","",6,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[11,"reset","","",6,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Create a new writer that satisfies `WriteColor` but drops all color information.",7,{"i":[{"n":"w"}],"o":{"n":"nocolor"}}],[11,"into_inner","","Consume this `NoColor` value and return the inner writer.",7,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_ref","","Return a reference to the inner writer.",7,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Return a mutable reference to the inner writer.",7,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"write","","",7,null],[11,"flush","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"supports_color","","",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_color","","",7,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[11,"reset","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Create a new writer that satisfies `WriteColor` using standard ANSI escape sequences.",8,{"i":[{"n":"w"}],"o":{"n":"ansi"}}],[11,"into_inner","","Consume this `Ansi` value and return the inner writer.",8,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_ref","","Return a reference to the inner writer.",8,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"get_mut","","Return a mutable reference to the inner writer.",8,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"write","","",8,null],[11,"flush","","",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"supports_color","","",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_color","","",8,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"result"}}],[11,"reset","","",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"colorspec"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",9,{"o":{"n":"colorspec"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"colorspec"}],"o":{"n":"bool"}}],[11,"new","","Create a new color specification that has no colors or styles.",9,{"o":{"n":"colorspec"}}],[11,"fg","","Get the foreground color.",9,{"i":[{"n":"self"}],"o":{"g":["color"],"n":"option"}}],[11,"set_fg","","Set the foreground color.",9,{"i":[{"n":"self"},{"g":["color"],"n":"option"}],"o":{"n":"colorspec"}}],[11,"bg","","Get the background color.",9,{"i":[{"n":"self"}],"o":{"g":["color"],"n":"option"}}],[11,"set_bg","","Set the background color.",9,{"i":[{"n":"self"},{"g":["color"],"n":"option"}],"o":{"n":"colorspec"}}],[11,"bold","","Get whether this is bold or not.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_bold","","Set whether the text is bolded or not.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"colorspec"}}],[11,"intense","","Get whether this is intense or not.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_intense","","Set whether the text is intense or not.",9,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"colorspec"}}],[11,"is_none","","Returns true if this color specification has no colors or styles.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clear","","Clears this color specification so that it has no color/style settings.",9,{"i":[{"n":"self"}]}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"color"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"color"}],"o":{"n":"bool"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"parsecolorerror"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"parsecolorerror"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"parsecolorerror"}],"o":{"n":"bool"}}],[11,"invalid","","Return the string that couldn't be parsed as a valid color.",10,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",10,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"g":["color","parsecolorerror"],"n":"result"}}]],"paths":[[4,"ColorChoice"],[4,"Color"],[8,"WriteColor"],[3,"StandardStream"],[3,"StandardStreamLock"],[3,"BufferWriter"],[3,"Buffer"],[3,"NoColor"],[3,"Ansi"],[3,"ColorSpec"],[3,"ParseColorError"]]};
searchIndex["textwrap"] = {"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",null,null],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",null,null],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions are not flexible enough.",null,null],[12,"width","","The width in columns at which the text will be wrapped.",0,null],[12,"initial_indent","","Indentation used for the first line of output.",0,null],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,null],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines may be longer than `self.width`.",0,null],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,null],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns a `Wrapper`. An instance of `IntoWrapIter` is typically obtained through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].",null,null],[3,"WrapIter","","An iterator over the lines of the input string which borrows a `Wrapper`. An instance of `WrapIter` is typically obtained through the [`Wrapper::wrap_iter`] method.",null,null],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"i":[{"n":"str"},{"n":"usize"}],"o":{"n":"string"}}],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"i":[{"n":"str"},{"n":"usize"}],"o":{"g":["cow"],"n":"vec"}}],[5,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"i":[{"n":"str"},{"n":"usize"}],"o":{"g":["hyphensplitter"],"n":"intowrapiter"}}],[5,"indent","","Add prefix to each non-empty line.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"n":"string"}}],[5,"dedent","","Removes common leading whitespace from each line.",null,{"i":[{"n":"str"}],"o":{"n":"string"}}],[8,"WordSplitter","","An interface for splitting words.",null,null],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"vec"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"nohyphenation"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"split","","",2,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"vec"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"hyphensplitter"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"split","","",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"vec"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"wrapper"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,{"i":[{"n":"usize"}],"o":{"g":["hyphensplitter"],"n":"wrapper"}}],[11,"with_splitter","","Use the given [`WordSplitter`] to create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken.",0,{"i":[{"n":"usize"},{"n":"s"}],"o":{"n":"wrapper"}}],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"wrapper"}}],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"wrapper"}}],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"wrapper"}}],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"string"}}],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["cow"],"n":"vec"}}],[11,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"wrapiter"}}],[11,"into_wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"intowrapiter"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"g":["cow"],"n":"option"}}]],"paths":[[3,"Wrapper"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"o":{"n":"threadlocal"}}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"o":{"n":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"i":[{"n":"self"}]}],[11,"into_iter","","",0,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"o":{"n":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"o":{"n":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"i":[{"n":"self"}],"o":{"n":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"i":[{"n":"self"}]}],[11,"into_iter","","",3,{"i":[{"n":"self"}],"o":{"n":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"i":[{"n":"str"},{"n":"str"}],"o":{"g":["tm","parseerror"],"n":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"o":{"n":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"o":{"n":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"o":{"n":"f64"}}],[5,"tzset","","",null,{}],[5,"empty_tm","","",null,{"o":{"n":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"i":[{"n":"timespec"}],"o":{"n":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"o":{"n":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"i":[{"n":"timespec"}],"o":{"n":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"o":{"n":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"i":[{"n":"str"},{"n":"tm"}],"o":{"g":["string","parseerror"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"ordering"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"i":[{"n":"i64"}],"o":{"n":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"i":[{"n":"f"}],"o":{"n":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["duration"],"n":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"o":{"n":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"o":{"n":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"o":{"n":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"i":[{"n":"stdduration"}],"o":{"g":["duration","outofrangeerror"],"n":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"i":[{"n":"self"}],"o":{"g":["stdduration","outofrangeerror"],"n":"result"}}],[11,"neg","","",4,{"i":[{"n":"self"}],"o":{"n":"duration"}}],[11,"add","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"sub","","",4,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"duration"}}],[11,"mul","","",4,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"div","","",4,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"duration"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"outofrangeerror"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"outofrangeerror"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"outofrangeerror"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"ordering"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"i":[{"n":"i64"},{"n":"i32"}],"o":{"n":"timespec"}}],[11,"add","","",0,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"timespec"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"timespec"}}],[11,"sub","","",0,{"i":[{"n":"self"},{"n":"timespec"}],"o":{"n":"duration"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"o":{"n":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"i":[{"n":"self"},{"n":"precisetime"}],"o":{"n":"duration"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"steadytime"}}],[11,"partial_cmp","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"le","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"gt","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"ge","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"cmp","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"ordering"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"o":{"n":"steadytime"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"steadytime"}],"o":{"n":"duration"}}],[11,"sub","","",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"steadytime"}}],[11,"add","","",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"steadytime"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"tm"}}],[11,"sub","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"duration"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"i":[{"n":"self"}],"o":{"n":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["tmfmt","parseerror"],"n":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"i":[{"n":"self"}],"o":{"n":"tmfmt"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["toml"] = {"doc":"A [TOML]-parsing library","items":[[0,"value","toml","Definition of a TOML value",null,null],[3,"Datetime","toml::value","A parsed TOML datetime value",null,null],[3,"DatetimeParseError","","Error returned from parsing a `Datetime` in the `FromStr` implementation.",null,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","Represents a TOML string",0,null],[13,"Integer","","Represents a TOML integer",0,null],[13,"Float","","Represents a TOML float",0,null],[13,"Boolean","","Represents a TOML boolean",0,null],[13,"Datetime","","Represents a TOML datetime",0,null],[13,"Array","","Represents a TOML array",0,null],[13,"Table","","Represents a TOML table",0,null],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",null,null],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",null,null],[8,"Index","","Types that can be used to index a `toml::Value`",null,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"try_from","","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",0,{"i":[{"n":"t"}],"o":{"g":["value","error"],"n":"result"}}],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["value"],"n":"option"}}],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["value"],"n":"option"}}],[11,"as_integer","","Extracts the integer value if it is an integer.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"is_integer","","Tests whether this value is an integer",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_float","","Extracts the float value if it is a float.",0,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"is_float","","Tests whether this value is a float",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_bool","","Extracts the boolean value if it is a boolean.",0,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"is_bool","","Tests whether this value is a boolean",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_str","","Extracts the string of this value if it is a string.",0,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"is_str","","Tests if this value is a string",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",0,{"i":[{"n":"self"}],"o":{"g":["datetime"],"n":"option"}}],[11,"is_datetime","","Tests whether this value is a datetime",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_array","","Extracts the array value if it is an array.",0,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"as_array_mut","","Extracts the array value if it is an array.",0,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"is_array","","Tests whether this value is an array",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_table","","Extracts the table value if it is a table.",0,{"i":[{"n":"self"}],"o":{"g":["table"],"n":"option"}}],[11,"as_table_mut","","Extracts the table value if it is a table.",0,{"i":[{"n":"self"}],"o":{"g":["table"],"n":"option"}}],[11,"is_table","","Extracts the table value if it is a table.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"same_type","","Tests whether this and another value have the same type.",0,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"type_str","","Returns a human-readable representation of the type of this value.",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"index","","",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"value"}}],[11,"index_mut","","",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"str"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"vec"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"btreemap"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"hashmap"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"string"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"i64"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"i32"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"i8"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"u8"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"u32"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"f64"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"f32"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"bool"}],"o":{"n":"value"}}],[11,"from","","",0,{"i":[{"n":"datetime"}],"o":{"n":"value"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["value"],"n":"result"}}],[11,"serialize","","",0,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",0,{"i":[{"n":"d"}],"o":{"g":["value"],"n":"result"}}],[11,"deserialize_any","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_option","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_newtype_struct","","",0,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_bool","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",0,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",0,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_tuple","","",0,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_identifier","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"into_deserializer","","",0,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"datetime"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"datetime"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"datetimeparseerror"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",1,{"i":[{"n":"str"}],"o":{"g":["datetime","datetimeparseerror"],"n":"result"}}],[11,"serialize","","",1,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",1,{"i":[{"n":"d"}],"o":{"g":["datetime"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[0,"ser","toml","Serializing Rust structures into TOML.",null,null],[3,"Serializer","toml::ser","Serialization implementation for TOML.",null,null],[4,"Error","","Errors that can occur when serializing a type.",null,null],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized but it was not supported.",3,null],[13,"KeyNotString","","The key of all TOML maps must be strings, but serialization was attempted where the key of a map was not a string.",3,null],[13,"ArrayMixedType","","Arrays in TOML must have a homogenous type, but a heterogeneous array was emitted.",3,null],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further tables are emitted. If a value is emitted after a table then this error is generated.",3,null],[13,"DateInvalid","","A serialized date was invalid.",3,null],[13,"NumberInvalid","","A serialized number was invalid.",3,null],[13,"UnsupportedNone","","None was attempted to be serialized, but it's not supported.",3,null],[13,"Custom","","A custom error which could be generated when serializing a particular type.",3,null],[5,"to_vec","","Serialize the given data structure as a TOML byte vector.",null,{"i":[{"n":"t"}],"o":{"g":["vec","error"],"n":"result"}}],[5,"to_string","","Serialize the given data structure as a String of TOML.",null,{"i":[{"n":"t"}],"o":{"g":["string","error"],"n":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a \"pretty\" String of TOML.",null,{"i":[{"n":"t"}],"o":{"g":["string","error"],"n":"result"}}],[5,"tables_last","","Convenience function to serialize items in a map in an order valid with TOML.",null,{"i":[{"n":"i"},{"n":"s"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"new","","Creates a new serializer which will emit TOML into the buffer provided.",4,{"i":[{"n":"string"}],"o":{"n":"serializer"}}],[11,"pretty","","Instantiate a \"pretty\" formatter",4,{"i":[{"n":"string"}],"o":{"n":"serializer"}}],[11,"pretty_string","","Enable or Disable pretty strings",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings ",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"pretty_array","","Enable or Disable pretty arrays",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"pretty_array_indent","","Set the indent for pretty arrays",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing pretty arrays",4,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"custom","","",3,{"i":[{"n":"t"}],"o":{"n":"error"}}],[0,"de","toml","Deserializing TOML into Rust structures.",null,null],[3,"Error","toml::de","Errors that can occur when deserializing a type.",null,null],[3,"Deserializer","","Deserialization implementation for TOML.",null,null],[5,"from_slice","","Deserializes a byte slice into a type.",null,null],[5,"from_str","","Deserializes a string into a type.",null,{"i":[{"n":"str"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"new","","Creates a new deserializer which will be deserializing the string provided.",6,{"i":[{"n":"str"}],"o":{"n":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.  This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace/comments.",6,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a table definition, but the TOML spec requires a newline after a table definition header.",6,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"line_col","","Produces a (line, column) pair of the position of the error if available",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"custom","","",5,{"i":[{"n":"t"}],"o":{"n":"error"}}]],"paths":[[4,"Value"],[3,"Datetime"],[3,"DatetimeParseError"],[4,"Error"],[3,"Serializer"],[3,"Error"],[3,"Deserializer"]]};
searchIndex["toml_query"] = {"doc":"","items":[[0,"log","toml_query","If logging is not compiled into the library, this module defines the logging macros to result in nothing.",null,null],[0,"error","","",null,null],[3,"Error","toml_query::error","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",1,null],[13,"QueryParsingError","","",1,null],[13,"EmptyQueryError","","",1,null],[13,"EmptyIdentifier","","",1,null],[13,"ArrayAccessWithoutIndex","","",1,null],[13,"ArrayAccessWithInvalidIndex","","",1,null],[13,"IdentifierNotFoundInDocument","","",1,null],[13,"NoIndexInTable","","",1,null],[13,"NoIdentifierInArray","","",1,null],[13,"QueryingValueAsTable","","",1,null],[13,"QueryingValueAsArray","","",1,null],[13,"CannotDeleteNonEmptyTable","","",1,null],[13,"CannotDeleteNonEmptyArray","","",1,null],[13,"CannotAccessBecauseTypeMismatch","","",1,null],[13,"ArrayIndexOutOfBounds","","",1,null],[13,"TypeError","","",1,null],[13,"NotAvailable","","",1,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",0,{"i":[{"n":"errorkind"},{"n":"state"}],"o":{"n":"error"}}],[11,"from_kind","","",0,null],[11,"with_chain","","",0,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"self"}}],[11,"kind","","",0,null],[11,"iter","","",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"chain_err","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"backtrace","","",0,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"extract_backtrace","","",0,{"i":[{"n":"error"}],"o":{"g":["arc"],"n":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,{"i":[{"n":"errorkind"}],"o":{"n":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,{"i":[{"n":"e"},{"n":"k"}],"o":{"n":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,{"i":[{"g":["error"],"n":"box"},{"n":"k"}],"o":{"n":"error"}}],[11,"kind","","Returns the kind of the error.",0,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"iter","","Iterates over the error chain.",0,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",0,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"error"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"errorkind"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"deref","","",0,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","A string describing the error kind.",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",1,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"error"}],"o":{"n":"self"}}],[0,"read","toml_query","",null,null],[8,"TomlValueReadExt","toml_query::read","",null,null],[10,"read_with_seperator","","Extension function for reading a value from the current toml::Value document using a custom seperator",3,{"i":[{"n":"self"},{"n":"str"},{"n":"char"}],"o":{"g":["option"],"n":"result"}}],[10,"read_mut_with_seperator","","Extension function for reading a value from the current toml::Value document mutably using a custom seperator",3,{"i":[{"n":"self"},{"n":"str"},{"n":"char"}],"o":{"g":["option"],"n":"result"}}],[11,"read","","Extension function for reading a value from the current toml::Value document",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["option"],"n":"result"}}],[11,"read_mut","","Extension function for reading a value from the current toml::Value document mutably",3,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["option"],"n":"result"}}],[8,"TomlValueReadTypeExt","","",null,null],[10,"read_string","","",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["option"],"n":"result"}}],[10,"read_int","","",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["option"],"n":"result"}}],[10,"read_float","","",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["option"],"n":"result"}}],[10,"read_bool","","",4,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["option"],"n":"result"}}],[0,"set","toml_query","",null,null],[8,"TomlValueSetExt","toml_query::set","",null,null],[10,"set_with_seperator","","Extension function for setting a value in the current toml::Value document using a custom seperator",5,{"i":[{"n":"self"},{"n":"str"},{"n":"char"},{"n":"value"}],"o":{"g":["option"],"n":"result"}}],[11,"set","","Extension function for setting a value from the current toml::Value document",5,{"i":[{"n":"self"},{"n":"str"},{"n":"value"}],"o":{"g":["option"],"n":"result"}}],[0,"insert","toml_query","",null,null],[8,"TomlValueInsertExt","toml_query::insert","",null,null],[10,"insert_with_seperator","","Extension function for inserting a value in the current toml::Value document using a custom seperator.",6,{"i":[{"n":"self"},{"n":"str"},{"n":"char"},{"n":"value"}],"o":{"g":["option"],"n":"result"}}],[11,"insert","","Extension function for inserting a value from the current toml::Value document",6,{"i":[{"n":"self"},{"n":"str"},{"n":"value"}],"o":{"g":["option"],"n":"result"}}],[0,"delete","toml_query","",null,null],[8,"TomlValueDeleteExt","toml_query::delete","",null,null],[10,"delete_with_seperator","","Extension function for deleting a value in the current toml::Value document using a custom seperator.",7,{"i":[{"n":"self"},{"n":"str"},{"n":"char"}],"o":{"g":["option"],"n":"result"}}],[11,"delete","","Extension function for inserting a value from the current toml::Value document",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["option"],"n":"result"}}],[0,"value","toml_query","",null,null],[8,"TomlValueExt","toml_query::value","Conveniance trait over",null,null],[11,"read_with_seperator","","See documentation of `TomlValueReadExt`",8,{"i":[{"n":"self"},{"n":"string"},{"n":"char"}],"o":{"g":["option"],"n":"result"}}],[11,"read_mut_with_seperator","","See documentation of `TomlValueReadExt`",8,{"i":[{"n":"self"},{"n":"string"},{"n":"char"}],"o":{"g":["option"],"n":"result"}}],[11,"read","","See documentation of `TomlValueReadExt`",8,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["option"],"n":"result"}}],[11,"read_mut","","See documentation of `TomlValueReadExt`",8,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["option"],"n":"result"}}],[11,"set_with_seperator","","See documentation of `TomlValueSetExt`",8,{"i":[{"n":"self"},{"n":"string"},{"n":"char"},{"n":"value"}],"o":{"g":["option"],"n":"result"}}],[11,"set","","See documentation of `TomlValueSetExt`",8,{"i":[{"n":"self"},{"n":"string"},{"n":"value"}],"o":{"g":["option"],"n":"result"}}],[11,"delete_with_seperator","","See documentation of `TomlValueDeleteExt`",8,{"i":[{"n":"self"},{"n":"string"},{"n":"char"}],"o":{"g":["option"],"n":"result"}}],[11,"delete","","See documentation of `TomlValueDeleteExt`",8,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["option"],"n":"result"}}],[11,"insert_with_seperator","","See documentation of `TomlValueInsertExt`",8,{"i":[{"n":"self"},{"n":"string"},{"n":"char"},{"n":"value"}],"o":{"g":["option"],"n":"result"}}],[11,"insert","","See documentation of `TomlValueInsertExt`",8,{"i":[{"n":"self"},{"n":"string"},{"n":"value"}],"o":{"g":["option"],"n":"result"}}],[14,"debug","toml_query","This macro is defined if the `logging` feature is not compiled into the library",null,null],[14,"error","","This macro is defined if the `logging` feature is not compiled into the library",null,null],[14,"info","","This macro is defined if the `logging` feature is not compiled into the library",null,null],[14,"log","","This macro is defined if the `logging` feature is not compiled into the library",null,null],[14,"trace","","This macro is defined if the `logging` feature is not compiled into the library",null,null],[14,"warn","","This macro is defined if the `logging` feature is not compiled into the library",null,null]],"paths":[[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"TomlValueReadExt"],[8,"TomlValueReadTypeExt"],[8,"TomlValueSetExt"],[8,"TomlValueInsertExt"],[8,"TomlValueDeleteExt"],[8,"TomlValueExt"]]};
searchIndex["traitobject"] = {"doc":"traitobject","items":[[5,"data","traitobject","Get the data pointer from this trait object.",null,null],[5,"data_mut","","Get the data pointer from this trait object, mutably.",null,null],[8,"Trait","","A trait implemented for all trait objects.",null,null]],"paths":[]};
searchIndex["typeable"] = {"doc":"Exposes `Typeable`, which exposes the `get_type` method, which gives the `TypeId` of any 'static type.","items":[[8,"Typeable","typeable","Universal mixin trait for adding a `get_type` method.",null,null],[11,"get_type","","Get the `TypeId` of this object.",0,{"i":[{"n":"self"}],"o":{"n":"typeid"}}]],"paths":[[8,"Typeable"]]};
searchIndex["typemap"] = {"doc":"A type-based key value store where one value type is allowed for each key.","items":[[3,"TypeMap","typemap","A map keyed by types.",null,null],[3,"OccupiedEntry","","A view onto an occupied entry in a TypeMap.",null,null],[3,"VacantEntry","","A view onto an unoccupied entry in a TypeMap.",null,null],[4,"Entry","","A view onto an entry in a TypeMap.",null,null],[13,"Occupied","","A view onto an occupied entry in a TypeMap.",0,null],[13,"Vacant","","A view onto an unoccupied entry in a TypeMap.",0,null],[6,"SendMap","","A version of `TypeMap` containing only `Send` types.",null,null],[6,"SyncMap","","A version of `TypeMap` containing only `Sync` types.",null,null],[6,"ShareMap","","A version of `TypeMap` containing only `Send + Sync` types.",null,null],[6,"CloneMap","","A version of `TypeMap` containing only `Clone` types.",null,null],[6,"ShareCloneMap","","A version of `TypeMap` containing only `Clone + Send + Sync` types.",null,null],[6,"DebugMap","","A version of `TypeMap` containing only `Debug` types.",null,null],[6,"ShareDebugMap","","A version of `TypeMap` containing only `Debug + Send + Sync` types.",null,null],[8,"CloneAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",null,null],[8,"DebugAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",null,null],[8,"Key","","This trait defines the relationship between keys and values in a TypeMap.",null,null],[16,"Value","","The value type associated with this key type.",1,null],[11,"default","","",2,{"o":{"n":"typemap"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"typemap"}}],[11,"new","","Create a new, empty TypeMap.",2,{"o":{"n":"typemap"}}],[11,"custom","","Create a new, empty TypeMap.",2,{"o":{"n":"typemap"}}],[11,"insert","","Insert a value into the map with a specified key type.",2,null],[11,"get","","Find a value in the map and get a reference to it.",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Find a value in the map and get a mutable reference to it.",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"contains","","Check if a key has an associated value stored in the map.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"remove","","Remove a value from the map.",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"entry","","Get the given key's corresponding entry in the map for in-place manipulation.",2,{"i":[{"n":"self"}],"o":{"n":"entry"}}],[11,"data","","Read the underlying HashMap",2,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"data_mut","","Get a mutable reference to the underlying HashMap",2,{"i":[{"n":"self"}],"o":{"n":"hashmap"}}],[11,"len","","Get the number of values stored in the map.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Return true if the map contains no values.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clear","","Remove all entries from the map.",2,{"i":[{"n":"self"}]}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,null],[11,"get","","Get a reference to the entry's value.",3,null],[11,"get_mut","","Get a mutable reference to the entry's value.",3,null],[11,"into_mut","","Transform the entry into a mutable reference with the same lifetime as the map.",3,null],[11,"insert","","Set the entry's value and return the previous value.",3,null],[11,"remove","","Move the entry's value out of the map, consuming the entry.",3,null],[11,"insert","","Set the entry's value and return a mutable reference to it.",4,null]],"paths":[[4,"Entry"],[8,"Key"],[3,"TypeMap"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["unicase"] = {"doc":"Case","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",null,null],[12,"0","","",0,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"unicase"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",0,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"deref_mut","","",0,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"as_ref","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"s2"}],"o":{"n":"bool"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["unicase"],"n":"result"}}],[11,"hash","","",0,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from","","",0,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"string"}}]],"paths":[[3,"UniCase"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,null],[12,"level","","The paragraph embedding level.",0,null],[3,"InitialInfo","","Initial bidi information of the text.",null,null],[12,"text","","The text",1,null],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,null],[3,"BidiInfo","","Bidi information of the text.",null,null],[12,"text","","The text",2,null],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,null],[12,"levels","","The directional embedding level of each byte in the text.",2,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,null],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the `BidiClass` of a single char.",null,{"i":[{"n":"char"}],"o":{"n":"bidiclass"}}],[0,"deprecated","","This module holds deprecated assets only.",null,null],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",null,null],[0,"format_chars","unicode_bidi","Directional Formatting Characters",null,null],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",null,null],[17,"LRM","","LEFT-TO-RIGHT MARK",null,null],[17,"RLM","","RIGHT-TO-LEFT MARK",null,null],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",null,null],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",null,null],[17,"FSI","","FIRST STRONG ISOLATE",null,null],[17,"PDI","","POP DIRECTIONAL ISOLATE",null,null],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",null,null],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",null,null],[17,"PDF","","POP DIRECTIONAL FORMATTING",null,null],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",null,null],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",null,null],[0,"level","unicode_bidi","Bidi Embedding Level",null,null],[3,"Level","unicode_bidi::level","Embedding Level",null,null],[4,"Error","","Errors that can occur on Level creation or mutation",null,null],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,null],[5,"has_rtl","","If levels has any RTL (odd) level",null,null],[17,"LTR_LEVEL","","",null,null],[17,"RTL_LEVEL","","",null,null],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",null,null],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",null,null],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"level"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cmp","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"ordering"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"le","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"gt","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"ge","","",5,{"i":[{"n":"self"},{"n":"level"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ltr","","New LTR level with smallest number value (0).",5,{"o":{"n":"level"}}],[11,"rtl","","New RTL level with smallest number value (1).",5,{"o":{"n":"level"}}],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,{"o":{"n":"u8"}}],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,{"o":{"n":"u8"}}],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,{"i":[{"n":"u8"}],"o":{"g":["level","error"],"n":"result"}}],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,{"i":[{"n":"u8"}],"o":{"g":["level","error"],"n":"result"}}],[11,"number","","The level number.",5,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"is_ltr","","If this level is left-to-right.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_rtl","","If this level is right-to-left.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,{"i":[{"n":"self"},{"n":"u8"}],"o":{"g":["error"],"n":"result"}}],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,{"i":[{"n":"self"},{"n":"u8"}],"o":{"g":["error"],"n":"result"}}],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,{"i":[{"n":"self"},{"n":"u8"}],"o":{"g":["error"],"n":"result"}}],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,{"i":[{"n":"self"}],"o":{"g":["level","error"],"n":"result"}}],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,{"i":[{"n":"self"}],"o":{"g":["level","error"],"n":"result"}}],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,{"i":[{"n":"self"}],"o":{"g":["level","error"],"n":"result"}}],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,{"i":[{"n":"self"}],"o":{"n":"bidiclass"}}],[11,"vec","","",5,null],[11,"into","","Convert to the level number",5,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from","","Create level by number",5,{"i":[{"n":"u8"}],"o":{"n":"level"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"clone","unicode_bidi","",3,{"i":[{"n":"self"}],"o":{"n":"bidiclass"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bidiclass"}],"o":{"n":"bool"}}],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",null,null],[17,"UNICODE_VERSION","","The Unicode version of data",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"paragraphinfo"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"paragraphinfo"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"initialinfo"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"initialinfo"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,{"i":[{"n":"str"},{"g":["level"],"n":"option"}],"o":{"n":"initialinfo"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"bidiinfo"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"bidiinfo"}],"o":{"n":"bool"}}],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,{"i":[{"n":"str"},{"g":["level"],"n":"option"}],"o":{"n":"bidiinfo"}}],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,{"i":[{"n":"self"},{"n":"paragraphinfo"},{"g":["usize"],"n":"range"}],"o":{"g":["level"],"n":"vec"}}],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,{"i":[{"n":"self"},{"n":"paragraphinfo"},{"g":["usize"],"n":"range"}],"o":{"g":["level"],"n":"vec"}}],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,{"i":[{"n":"self"},{"n":"paragraphinfo"},{"g":["usize"],"n":"range"}],"o":{"g":["str"],"n":"cow"}}],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,null],[11,"has_rtl","","If processed text has any computed RTL levels",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"decompositions"}}],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"size_hint","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"recompositions"}}],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["char"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"i":[{"n":"char"},{"n":"f"}]}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"i":[{"n":"char"},{"n":"f"}]}],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",null,{"i":[{"n":"char"},{"n":"char"}],"o":{"g":["char"],"n":"option"}}],[5,"canonical_combining_class","","",null,{"i":[{"n":"char"}],"o":{"n":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"i":[{"n":"char"}],"o":{"n":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of Unicode that this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",2,{"i":[{"n":"self"}],"o":{"n":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",2,{"i":[{"n":"self"}],"o":{"n":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",2,{"i":[{"n":"self"}],"o":{"n":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",2,{"i":[{"n":"self"}],"o":{"n":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"i":[{"n":"self"}]}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["unsafe_any"] = {"doc":"Traits for unsafe downcasting from trait objects to & or &mut references of concrete types. These should only be used if you are absolutely certain of the type of the data in said trait object - there be dragons etc.","items":[[8,"UnsafeAny","unsafe_any","A trait providing unchecked downcasting to its contents when stored in a trait object.",null,null],[8,"UnsafeAnyExt","","An extension trait for unchecked downcasting of trait objects.",null,null],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",0,{"i":[{"n":"box"}],"o":{"n":"box"}}],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",1,{"i":[{"g":["unsafeany"],"n":"box"}],"o":{"n":"box"}}]],"paths":[[8,"UnsafeAnyExt"],[8,"UnsafeAny"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA.",2,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",4,null],[13,"AfterScheme","","",4,null],[13,"BeforeUsername","","",4,null],[13,"AfterUsername","","",4,null],[13,"BeforePassword","","",4,null],[13,"AfterPassword","","",4,null],[13,"BeforeHost","","",4,null],[13,"AfterHost","","",4,null],[13,"BeforePort","","",4,null],[13,"AfterPort","","",4,null],[13,"BeforePath","","",4,null],[13,"AfterPath","","",4,null],[13,"BeforeQuery","","",4,null],[13,"AfterQuery","","",4,null],[13,"BeforeFragment","","",4,null],[13,"AfterFragment","","",4,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"host"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"le","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"gt","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"ge","","",2,{"i":[{"n":"self"},{"n":"host"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"i":[{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"hostandport"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"hostandport"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"to_socket_addrs","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"option"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"origin"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"origin"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"origin"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"o":{"n":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"opaqueorigin"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"opaqueorigin"}],"o":{"n":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"opaqueorigin"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",7,{"i":[{"n":"self"}]}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",7,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",7,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"self"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",3,{"i":[{"n":"errors"}],"o":{"n":"parseerror"}}],[11,"index","","",8,{"i":[{"n":"self"},{"n":"rangefull"}],"o":{"n":"str"}}],[11,"index","","",8,{"i":[{"n":"self"},{"g":["position"],"n":"rangefrom"}],"o":{"n":"str"}}],[11,"index","","",8,{"i":[{"n":"self"},{"g":["position"],"n":"rangeto"}],"o":{"n":"str"}}],[11,"index","","",8,{"i":[{"n":"self"},{"g":["position"],"n":"range"}],"o":{"n":"str"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",9,{"i":[{"n":"self"}],"o":{"n":"string"}}],[10,"finish","","",9,null],[16,"Finished","","",9,null],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"parse"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",10,{"i":[{"n":"self"}],"o":{"n":"parseintoowned"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_mut_string","url","",14,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"finish","","",14,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",13,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",13,{"i":[{"n":"t"},{"n":"usize"}],"o":{"n":"self"}}],[11,"clear","","Remove any existing name/value pair.",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",13,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"n":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",13,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",13,null],[11,"clone","url","",8,{"i":[{"n":"self"}],"o":{"n":"url"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"parseoptions"}}],[11,"base_url","","Change the base URL",15,{"i":[{"n":"self"},{"g":["url"],"n":"option"}],"o":{"n":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",15,{"i":[{"n":"self"},{"g":["fn"],"n":"option"}],"o":{"n":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",15,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"parse","","Parse an absolute URL from a string.",8,{"i":[{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",8,{"i":[{"n":"str"},{"n":"i"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",8,{"o":{"n":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_string","","Return the serialization of this URL.",8,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",8,{"i":[{"n":"self"}],"o":{"n":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",8,{"i":[{"n":"self"}],"o":{"g":["host"],"n":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"port","","Return the port number for this URL, if any.",8,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",8,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",8,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["hostandport"],"n":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",8,{"i":[{"n":"self"}],"o":{"g":["split"],"n":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",8,{"i":[{"n":"self"}],"o":{"n":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",8,{"i":[{"n":"self"},{"g":["str"],"n":"option"}]}],[11,"set_query","","Change this URL’s query string.",8,{"i":[{"n":"self"},{"g":["str"],"n":"option"}]}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",8,{"i":[{"n":"self"}],"o":{"g":["urlquery"],"n":"serializer"}}],[11,"set_path","","Change this URL’s path.",8,{"i":[{"n":"self"},{"n":"str"}]}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",8,{"i":[{"n":"self"}],"o":{"g":["pathsegmentsmut"],"n":"result"}}],[11,"set_port","","Change this URL’s port number.",8,{"i":[{"n":"self"},{"g":["u16"],"n":"option"}],"o":{"n":"result"}}],[11,"set_host","","Change this URL’s host.",8,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",8,{"i":[{"n":"self"},{"n":"ipaddr"}],"o":{"n":"result"}}],[11,"set_password","","Change this URL’s password.",8,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"n":"result"}}],[11,"set_username","","Change this URL’s username.",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",8,{"i":[{"n":"p"}],"o":{"g":["url"],"n":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",8,{"i":[{"n":"p"}],"o":{"g":["url"],"n":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",8,{"i":[{"n":"self"}],"o":{"g":["pathbuf"],"n":"result"}}],[11,"to_socket_addrs","","",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"from_str","","",8,{"i":[{"n":"str"}],"o":{"g":["url","parseerror"],"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"hash","","",8,{"i":[{"n":"self"},{"n":"h"}]}],[11,"as_ref","","",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",14,{"i":[{"n":"self"}]}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"Serializer"],[3,"UrlQuery"],[3,"ParseOptions"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"utf8sequence"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"utf8sequence"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"utf8sequence"}],"o":{"n":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"utf8range"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"utf8range"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"utf8range"}],"o":{"n":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"i":[{"n":"char"},{"n":"char"}],"o":{"n":"self"}}],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["uuid"] = {"doc":"Generate and parse UUIDs","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID).",null,null],[3,"Simple","","An adaptor for formatting a `Uuid` as a simple string.",null,null],[3,"Hyphenated","","An adaptor for formatting a `Uuid` as a hyphenated string.",null,null],[3,"Urn","","An adaptor for formatting a `Uuid` as a URN string.",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures.",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID.",null,null],[17,"NAMESPACE_DNS","","A UUID of the namespace of fully-qualified domain names",null,null],[17,"NAMESPACE_URL","","A UUID of the namespace of URLs",null,null],[17,"NAMESPACE_OID","","A UUID of the namespace of ISO OIDs",null,null],[17,"NAMESPACE_X500","","A UUID of the namespace of X.500 DNs (in DER or a text output format)",null,null],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"uuidversion"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"uuidversion"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"uuidvariant"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"uuidvariant"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"uuid"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"uuid"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"uuid"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"uuid"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"uuid"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"uuid"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"uuid"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"uuid"}],"o":{"n":"bool"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"uuid"}],"o":{"n":"ordering"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"parseerror"}],"o":{"n":"bool"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"parseerror"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"nil","","The 'nil UUID'.",3,{"o":{"n":"uuid"}}],[11,"new","","Creates a new `Uuid`.",3,{"i":[{"n":"uuidversion"}],"o":{"g":["uuid"],"n":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",3,{"o":{"n":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",3,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",3,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",3,{"i":[{"n":"self"}],"o":{"g":["uuidvariant"],"n":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",3,{"i":[{"n":"self"}],"o":{"g":["uuidversion"],"n":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",3,{"i":[{"n":"self"}],"o":{"n":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",3,{"i":[{"n":"self"}],"o":{"n":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",3,{"i":[{"n":"self"}],"o":{"n":"urn"}}],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and  counter portion of a V1 UUID.  If the supplied UUID is not V1, this  will return None",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",3,{"i":[{"n":"str"}],"o":{"g":["uuid","parseerror"],"n":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"default","","Returns the nil UUID, which is all zeroes",3,{"o":{"n":"uuid"}}],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",3,{"i":[{"n":"str"}],"o":{"g":["uuid","parseerror"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"hash","","",3,{"i":[{"n":"self"},{"n":"s"}]}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"rand","","",3,{"i":[{"n":"r"}],"o":{"n":"uuid"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"default","","",1,{"o":{"n":"self"}}],[11,"hash","","",1,{"i":[{"n":"self"},{"n":"h"}]}],[11,"new","","Creates an empty `VecMap`.",1,{"o":{"n":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"split_off","","Splits the collection into two at the given key.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"i":[{"n":"self"}],"o":{"n":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"i":[{"n":"self"}]}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"clone_from","","",1,{"i":[{"n":"self"},{"n":"self"}]}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",1,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_iter","","",1,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"extend","","",1,{"i":[{"n":"self"},{"n":"i"}]}],[11,"extend","","",1,{"i":[{"n":"self"},{"n":"i"}]}],[11,"index","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"v"}}],[11,"index","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"v"}}],[11,"index_mut","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"v"}}],[11,"index_mut","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"v"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"i":[{"n":"self"}],"o":{"n":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"void"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["ordering"],"n":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["walkdir"] = {"doc":"Crate `walkdir` provides an efficient and cross platform implementation of recursive directory traversal. Several options are exposed to control iteration, such as whether to follow symbolic links (default off), limit the maximum number of simultaneous open file descriptors and the ability to efficiently skip descending into directories.","items":[[3,"WalkDir","walkdir","A builder to create an iterator for recursively walking a directory.",null,null],[3,"IntoIter","","An iterator for recursively descending into a directory.",null,null],[3,"DirEntry","","A directory entry.",null,null],[3,"FilterEntry","","A recursive directory iterator that skips entries.",null,null],[3,"Error","","An error produced by recursively walking a directory.",null,null],[11,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[6,"Result","","A result type for walkdir operations.",null,null],[8,"DirEntryExt","","Unix-specific extension methods for `walkdir::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",1,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a builder for a recursive directory iterator starting at the file path `root`. If `root` is a directory, then it is the first item yielded by the iterator. If `root` is a file, then it is the first and only item yielded by the iterator. If `root` is a symlink, then it is always followed.",2,{"i":[{"n":"p"}],"o":{"n":"self"}}],[11,"min_depth","","Set the minimum depth of entries yielded by the iterator.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"max_depth","","Set the maximum depth of entries yield by the iterator.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"follow_links","","Follow symbolic links. By default, this is disabled.",2,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"max_open","","Set the maximum number of simultaneously open file descriptors used by the iterator.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"sort_by","","Set a function for sorting directory entries.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"contents_first","","Yield a directory's contents before the directory itself. By default, this is disabled.",2,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"self"}}],[11,"into_iter","","",2,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","Advances the iterator and returns the next value.",3,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"skip_current_dir","","Skips the current directory.",3,{"i":[{"n":"self"}]}],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",3,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filterentry"}}],[11,"path","","The full path that this entry represents.",0,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"path_is_symlink","","Returns `true` if and only if this entry was created from a symbolic link. This is unaffected by the [`follow_links`] setting.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"metadata","","Return the metadata for the file that this entry points to.",0,{"i":[{"n":"self"}],"o":{"g":["metadata"],"n":"result"}}],[11,"file_type","","Return the file type for the file that this entry points to.",0,{"i":[{"n":"self"}],"o":{"n":"filetype"}}],[11,"file_name","","Return the file name of this entry.",0,{"i":[{"n":"self"}],"o":{"n":"osstr"}}],[11,"depth","","Returns the depth at which this entry was created relative to the root.",0,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"direntry"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"next","","Advances the iterator and returns the next value.",4,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",4,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"filterentry"}}],[11,"skip_current_dir","","Skips the current directory.",4,{"i":[{"n":"self"}]}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"path","","Returns the path associated with this error if one exists.",5,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"loop_ancestor","","Returns the path at which a cycle was detected.",5,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"depth","","Returns the depth at which this error occurred relative to the root.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"io_error","","Inspect the underlying [`io::Error`] if there is one.",5,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",5,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"DirEntry"],[8,"DirEntryExt"],[3,"WalkDir"],[3,"IntoIter"],[3,"FilterEntry"],[3,"Error"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["ws"] = {"doc":"Lightweight, event-driven WebSockets for Rust.","items":[[3,"Error","ws","A struct indicating the kind of error that has occured and any precise details of that error.",null,null],[12,"kind","","",0,null],[12,"details","","",0,null],[3,"Sender","","A representation of the output of the WebSocket connection. Use this to send messages to the other endpoint.",null,null],[3,"Frame","","A struct representing a WebSocket frame.",null,null],[3,"Handshake","","A struct representing the two halves of the WebSocket handshake.",null,null],[12,"request","","The HTTP request sent to begin the handshake.",1,null],[12,"response","","The HTTP response from the server confirming the handshake.",1,null],[12,"peer_addr","","The socket address of the other endpoint. This address may be an intermediary such as a proxy server.",1,null],[12,"local_addr","","The socket address of this endpoint.",1,null],[3,"Request","","The handshake request.",null,null],[3,"Response","","The handshake response.",null,null],[3,"Settings","","WebSocket settings",null,null],[12,"max_connections","","The maximum number of connections that this WebSocket will support. The default setting is low and should be increased when expecting more connections because this is a hard limit and no new connections beyond this limit can be made until an old connection is dropped. Default: 100",2,null],[12,"queue_size","","The number of events anticipated per connection. The event loop queue size will be `queue_size` * `max_connections`. In order to avoid an overflow error, `queue_size` * `max_connections` must be less than or equal to `usize::max_value()`. The queue is shared between connections, which means that a connection may schedule more events than `queue_size` provided that another connection is using less than `queue_size`. However, if the queue is maxed out a Queue error will occur. Default: 5",2,null],[12,"panic_on_new_connection","","Whether to panic when unable to establish a new TCP connection. Default: false",2,null],[12,"panic_on_shutdown","","Whether to panic when a shutdown of the WebSocket is requested. Default: false",2,null],[12,"fragments_capacity","","The maximum number of fragments the connection can handle without reallocating. Default: 10",2,null],[12,"fragments_grow","","Whether to reallocate when `fragments_capacity` is reached. If this is false, a Capacity error will be triggered instead. Default: true",2,null],[12,"fragment_size","","The maximum length of outgoing frames. Messages longer than this will be fragmented. Default: 65,535",2,null],[12,"in_buffer_capacity","","The size of the incoming buffer. A larger buffer uses more memory but will allow for fewer reallocations. Default: 2048",2,null],[12,"in_buffer_grow","","Whether to reallocate the incoming buffer when `in_buffer_capacity` is reached. If this is false, a Capacity error will be triggered instead. Default: true",2,null],[12,"out_buffer_capacity","","The size of the outgoing buffer. A larger buffer uses more memory but will allow for fewer reallocations. Default: 2048",2,null],[12,"out_buffer_grow","","Whether to reallocate the incoming buffer when `out_buffer_capacity` is reached. If this is false, a Capacity error will be triggered instead. Default: true",2,null],[12,"panic_on_internal","","Whether to panic when an Internal error is encountered. Internal errors should generally not occur, so this setting defaults to true as a debug measure, whereas production applications should consider setting it to false. Default: true",2,null],[12,"panic_on_capacity","","Whether to panic when a Capacity error is encountered. Default: false",2,null],[12,"panic_on_protocol","","Whether to panic when a Protocol error is encountered. Default: false",2,null],[12,"panic_on_encoding","","Whether to panic when an Encoding error is encountered. Default: false",2,null],[12,"panic_on_queue","","Whether to panic when a Queue error is encountered. Default: false",2,null],[12,"panic_on_io","","Whether to panic when an Io error is encountered. Default: false",2,null],[12,"panic_on_timeout","","Whether to panic when a Timer error is encountered. Default: false",2,null],[12,"shutdown_on_interrupt","","Whether to shutdown the eventloop when an interrupt is received. Default: true",2,null],[12,"masking_strict","","The WebSocket protocol requires frames sent from client endpoints to be masked as a security and sanity precaution. Enforcing this requirement, which may be removed at some point may cause incompatibilities. If you need the extra security, set this to true. Default: false",2,null],[12,"key_strict","","The WebSocket protocol requires clients to verify the key returned by a server to ensure that the server and all intermediaries can perform the protocol. Verifying the key will consume processing time and other resources with the benifit that we can fail the connection early. The default in WS-RS is to accept any key from the server and instead fail late if a protocol error occurs. Change this setting to enable key verification. Default: false",2,null],[12,"method_strict","","The WebSocket protocol requires clients to perform an opening handshake using the HTTP GET method for the request. However, since only WebSockets are supported on the connection, verifying the method of handshake requests is not always necessary. To enforce the requirement that handshakes begin with a GET method, set this to true. Default: false",2,null],[12,"encrypt_server","","Indicate whether server connections should use ssl encryption when accepting connections. Setting this to true means that clients should use the `wss` scheme to connect to this server. Note that using this flag will in general necessitate overriding the `Handler::upgrade_ssl_server` method in order to provide the details of the ssl context. It may be simpler for most users to use a reverse proxy such as nginx to provide server side encryption.",2,null],[12,"tcp_nodelay","","Disables Nagle's algorithm. Usually tcp socket tries to accumulate packets to send them all together (every 200ms). When enabled socket will try to send packet as fast as possible.",2,null],[3,"WebSocket","","The WebSocket struct. A WebSocket can support multiple incoming and outgoing connections.",null,null],[3,"Builder","","Utility for constructing a WebSocket from various settings.",null,null],[4,"ErrorKind","","The type of an error, which may indicate other kinds of errors as the underlying cause.",null,null],[13,"Internal","","Indicates an internal application error. The WebSocket will automatically attempt to send an Error (1011) close code.",3,null],[13,"Capacity","","Indicates a state where some size limit has been exceeded, such as an inability to accept any more new connections. If a Connection is active, the WebSocket will automatically attempt to send a Size (1009) close code.",3,null],[13,"Protocol","","Indicates a violation of the WebSocket protocol. The WebSocket will automatically attempt to send a Protocol (1002) close code, or if this error occurs during a handshake, an HTTP 400 reponse will be generated.",3,null],[13,"Encoding","","Indicates that the WebSocket received data that should be utf8 encoded but was not. The WebSocket will automatically attempt to send a Invalid Frame Payload Data (1007) close code.",3,null],[13,"Io","","Indicates an underlying IO Error. This kind of error will result in a WebSocket Connection disconnecting.",3,null],[13,"Http","","Indicates a failure to parse an HTTP message. This kind of error should only occur during a WebSocket Handshake, and a HTTP 500 response will be generated.",3,null],[13,"Queue","","Indicates a failure to send a signal on the internal EventLoop channel. This means that the WebSocket is overloaded. In order to avoid this error, it is important to set `Settings::max_connections` and `Settings:queue_size` high enough to handle the load. If encountered, retuning from a handler method and waiting for the EventLoop to consume the queue may relieve the situation.",3,null],[13,"Timer","","Indicates a failure to schedule a timeout on the EventLoop.",3,null],[13,"Custom","","A custom error kind for use by applications. This error kind involves extra overhead because it will allocate the memory on the heap. The WebSocket ignores such errors by default, simply passing them to the Connection Handler.",3,null],[4,"Message","","An enum representing the various forms of a WebSocket message.",null,null],[13,"Text","","A text WebSocket message",4,null],[13,"Binary","","A binary WebSocket message",4,null],[4,"CloseCode","","Status code used to indicate why an endpoint is closing the WebSocket connection.",null,null],[13,"Normal","","Indicates a normal closure, meaning that the purpose for which the connection was established has been fulfilled.",5,null],[13,"Away","","Indicates that an endpoint is \"going away\", such as a server going down or a browser having navigated away from a page.",5,null],[13,"Protocol","","Indicates that an endpoint is terminating the connection due to a protocol error.",5,null],[13,"Unsupported","","Indicates that an endpoint is terminating the connection because it has received a type of data it cannot accept (e.g., an endpoint that understands only text data MAY send this if it receives a binary message).",5,null],[13,"Status","","Indicates that no status code was included in a closing frame. This close code makes it possible to use a single method, `on_close` to handle even cases where no close code was provided.",5,null],[13,"Abnormal","","Indicates an abnormal closure. If the abnormal closure was due to an error, this close code will not be used. Instead, the `on_error` method of the handler will be called with the error. However, if the connection is simply dropped, without an error, this close code will be sent to the handler.",5,null],[13,"Invalid","","Indicates that an endpoint is terminating the connection because it has received data within a message that was not consistent with the type of the message (e.g., non-UTF-8 [RFC3629] data within a text message).",5,null],[13,"Policy","","Indicates that an endpoint is terminating the connection because it has received a message that violates its policy.  This is a generic status code that can be returned when there is no other more suitable status code (e.g., Unsupported or Size) or if there is a need to hide specific details about the policy.",5,null],[13,"Size","","Indicates that an endpoint is terminating the connection because it has received a message that is too big for it to process.",5,null],[13,"Extension","","Indicates that an endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the response message of the WebSocket handshake.  The list of extensions that are needed should be given as the reason for closing. Note that this status code is not used by the server, because it can fail the WebSocket handshake instead.",5,null],[13,"Error","","Indicates that a server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.",5,null],[13,"Restart","","Indicates that the server is restarting. A client may choose to reconnect, and if it does, it should use a randomized delay of 5-30 seconds between attempts.",5,null],[13,"Again","","Indicates that the server is overloaded and the client should either connect to a different IP (when multiple targets exist), or reconnect to the same IP when a user has performed an action.",5,null],[4,"OpCode","","Operation codes as part of rfc6455.",null,null],[13,"Continue","","Indicates a continuation frame of a fragmented message.",6,null],[13,"Text","","Indicates a text data frame.",6,null],[13,"Binary","","Indicates a binary data frame.",6,null],[13,"Close","","Indicates a close control frame.",6,null],[13,"Ping","","Indicates a ping control frame.",6,null],[13,"Pong","","Indicates a pong control frame.",6,null],[13,"Bad","","Indicates an invalid opcode was received.",6,null],[5,"listen","","A utility function for setting up a WebSocket server.",null,{"i":[{"n":"a"},{"n":"f"}],"o":{"n":"result"}}],[5,"connect","","A utility function for setting up a WebSocket client.",null,{"i":[{"n":"u"},{"n":"f"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",0,{"i":[{"n":"kind"},{"n":"i"}],"o":{"n":"error"}}],[11,"into_box","","",0,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"box"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["stderror"],"n":"option"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"from","","",0,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"from","","",0,{"i":[{"g":["command"],"n":"senderror"}],"o":{"n":"error"}}],[11,"from","","",0,{"i":[{"n":"timererror"}],"o":{"n":"error"}}],[11,"from","","",0,{"i":[{"n":"utf8error"}],"o":{"n":"error"}}],[11,"from","","",0,{"i":[{"n":"box"}],"o":{"n":"error"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"frame"}}],[11,"len","","Get the length of the frame. This is the length of the header + the length of the payload.",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_final","","Test whether the frame is a final frame.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_rsv1","","Test whether the first reserved bit is set.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_rsv2","","Test whether the second reserved bit is set.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"has_rsv3","","Test whether the third reserved bit is set.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"opcode","","Get the OpCode of the frame.",7,{"i":[{"n":"self"}],"o":{"n":"opcode"}}],[11,"is_control","","Test whether this is a control frame.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"payload","","Get a reference to the frame's payload.",7,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"set_final","","Make this frame a final frame.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"frame"}}],[11,"set_rsv1","","Set the first reserved bit.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"frame"}}],[11,"set_rsv2","","Set the second reserved bit.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"frame"}}],[11,"set_rsv3","","Set the third reserved bit.",7,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"frame"}}],[11,"set_opcode","","Set the OpCode.",7,{"i":[{"n":"self"},{"n":"opcode"}],"o":{"n":"frame"}}],[11,"payload_mut","","Edit the frame's payload.",7,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"into_data","","Consume the frame into its payload.",7,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"message","","Create a new data frame.",7,{"i":[{"g":["u8"],"n":"vec"},{"n":"opcode"},{"n":"bool"}],"o":{"n":"frame"}}],[11,"pong","","Create a new Pong control frame.",7,{"i":[{"g":["u8"],"n":"vec"}],"o":{"n":"frame"}}],[11,"ping","","Create a new Ping control frame.",7,{"i":[{"g":["u8"],"n":"vec"}],"o":{"n":"frame"}}],[11,"close","","Create a new Close control frame.",7,{"i":[{"n":"closecode"},{"n":"str"}],"o":{"n":"frame"}}],[11,"parse","","Parse the input stream into a frame.",7,{"i":[{"n":"cursor"}],"o":{"g":["option"],"n":"result"}}],[11,"format","","Write a frame out to a buffer",7,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"default","","",7,{"o":{"n":"frame"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"message"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"message"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"message"}}],[11,"text","","Create a new text WebSocket message from a stringable.",4,{"i":[{"n":"s"}],"o":{"n":"message"}}],[11,"binary","","Create a new binary WebSocket message by converting to Vec.",4,{"i":[{"n":"b"}],"o":{"n":"message"}}],[11,"is_text","","Indicates whether a message is a text message.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_binary","","Indicates whether a message is a binary message.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Get the length of the WebSocket message.",4,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the WebSocket message has no content. For example, if the other side of the connection sent an empty string.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_data","","Consume the WebSocket and return it as binary data.",4,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"into_text","","Attempt to consume the WebSocket message and convert it to a String.",4,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"result"}}],[11,"as_text","","Attempt to get a &str from the WebSocket message, this will try to convert binary data to utf8.",4,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"result"}}],[11,"from","","",4,{"i":[{"n":"string"}],"o":{"n":"message"}}],[11,"from","","",4,{"i":[{"n":"str"}],"o":{"n":"message"}}],[11,"from","","",4,null],[11,"from","","",4,{"i":[{"g":["u8"],"n":"vec"}],"o":{"n":"message"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"stdresult"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"remote_addr","","Get the IP address of the remote connection.",1,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"header","","Get the value of the first instance of an HTTP header.",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["vec"],"n":"option"}}],[11,"header_mut","","Edit the value of the first instance of an HTTP header.",8,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["vec"],"n":"option"}}],[11,"headers","","Access the request headers.",8,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"headers_mut","","Edit the request headers.",8,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"origin","","Get the origin of the request if it comes from a browser.",8,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"key","","Get the unhashed WebSocket key sent in the request.",8,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"result"}}],[11,"hashed_key","","Get the hashed WebSocket key from this request.",8,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"result"}}],[11,"version","","Get the WebSocket protocol version from the request (should be 13).",8,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"result"}}],[11,"resource","","Get the path of the request.",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"protocols","","Get the possible protocols for the WebSocket connection.",8,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"result"}}],[11,"add_protocol","","Add a possible protocol to this request. This may result in duplicate protocols listed.",8,{"i":[{"n":"self"},{"n":"str"}]}],[11,"remove_protocol","","Remove a possible protocol from this request.",8,{"i":[{"n":"self"},{"n":"str"}]}],[11,"extensions","","Get the possible extensions for the WebSocket connection.",8,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"result"}}],[11,"add_extension","","Add a possible extension to this request. This may result in duplicate extensions listed. Also, the order of extensions indicates preference, so if the preference matters, consider using the `Sec-WebSocket-Protocol` header directly.",8,{"i":[{"n":"self"},{"n":"str"}]}],[11,"remove_extension","","Remove a possible extension from this request. This will remove all configurations of the extension.",8,{"i":[{"n":"self"},{"n":"str"}]}],[11,"client_addr","","Get the IP address of the client.",8,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"parse","","Attempt to parse an HTTP request from a buffer. If the buffer does not contain a complete request, this will return `Ok(None)`.",8,null],[11,"from_url","","Construct a new WebSocket handshake HTTP request from a url.",8,{"i":[{"n":"url"}],"o":{"g":["request"],"n":"result"}}],[11,"format","","Write a request out to a buffer",8,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"header_mut","","Edit the value of the first instance of an HTTP header.",9,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["vec"],"n":"option"}}],[11,"headers","","Access the request headers.",9,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"headers_mut","","Edit the request headers.",9,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"status","","Get the HTTP status code.",9,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"set_status","","Set the HTTP status code.",9,{"i":[{"n":"self"},{"n":"u16"}]}],[11,"reason","","Get the HTTP status reason.",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"set_reason","","Set the HTTP status reason.",9,{"i":[{"n":"self"},{"n":"r"}]}],[11,"key","","Get the hashed WebSocket key.",9,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"result"}}],[11,"protocol","","Get the protocol that the server has decided to use.",9,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"set_protocol","","Set the protocol that the server has decided to use.",9,{"i":[{"n":"self"},{"n":"str"}]}],[11,"extensions","","Get the extensions that the server has decided to use. If these are unacceptable, it is appropriate to send an Extension close code.",9,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"result"}}],[11,"add_extension","","Add an accepted extension to this response. This may result in duplicate extensions listed.",9,{"i":[{"n":"self"},{"n":"str"}]}],[11,"remove_extension","","Remove an accepted extension from this response. This will remove all configurations of the extension.",9,{"i":[{"n":"self"},{"n":"str"}]}],[11,"parse","","Attempt to parse an HTTP response from a buffer. If the buffer does not contain a complete response, thiw will return `Ok(None)`.",9,null],[11,"from_request","","Construct a new WebSocket handshake HTTP response from a request. This will create a response that ignores protocols and extensions. Edit this response to accept a protocol and extensions as necessary.",9,{"i":[{"n":"request"}],"o":{"g":["response"],"n":"result"}}],[11,"format","","Write a response out to a buffer",9,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"opcode"}],"o":{"n":"bool"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"opcode"}}],[11,"is_control","","Test whether the opcode indicates a control frame.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into","","",6,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"from","","",6,{"i":[{"n":"u8"}],"o":{"n":"opcode"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"closecode"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"closecode"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"closecode"}}],[11,"into","","",5,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"from","","",5,{"i":[{"n":"u16"}],"o":{"n":"closecode"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"token","","A Token identifying this sender within the WebSocket.",10,{"i":[{"n":"self"}],"o":{"n":"token"}}],[11,"send","","Send a message over the connection.",10,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"result"}}],[11,"broadcast","","Send a message to the endpoints of all connections.",10,{"i":[{"n":"self"},{"n":"m"}],"o":{"n":"result"}}],[11,"close","","Send a close code to the other endpoint.",10,{"i":[{"n":"self"},{"n":"closecode"}],"o":{"n":"result"}}],[11,"close_with_reason","","Send a close code and provide a descriptive reason for closing.",10,{"i":[{"n":"self"},{"n":"closecode"},{"n":"s"}],"o":{"n":"result"}}],[11,"ping","","Send a ping to the other endpoint with the given test data.",10,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"result"}}],[11,"pong","","Send a pong to the other endpoint responding with the given test data.",10,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"result"}}],[11,"connect","","Queue a new connection on this WebSocket to the specified URL.",10,{"i":[{"n":"self"},{"n":"url"}],"o":{"n":"result"}}],[11,"shutdown","","Request that all connections terminate and that the WebSocket stop running.",10,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"timeout","","Schedule a `token` to be sent to the WebSocket Handler's `on_timeout` method after `ms` milliseconds",10,{"i":[{"n":"self"},{"n":"u64"},{"n":"token"}],"o":{"n":"result"}}],[11,"cancel","","Queue the cancellation of a previously scheduled timeout.",10,{"i":[{"n":"self"},{"n":"timeout"}],"o":{"n":"result"}}],[0,"util","","The util module rexports some tools from mio in order to facilitate handling timeouts.",null,null],[3,"Token","ws::util","Associates readiness notifications with [`Evented`] handles.",null,null],[12,"0","","",11,null],[3,"Timeout","","",null,null],[6,"Slab","","A Slab allocator for associating tokens to data.",null,null],[6,"Result","ws","",null,null],[8,"Factory","","A trait for creating new WebSocket handlers.",null,null],[16,"Handler","","",12,null],[10,"connection_made","","Called when a TCP connection is made.",12,null],[11,"on_shutdown","","Called when the WebSocket is shutting down.",12,{"i":[{"n":"self"}]}],[11,"client_connected","","Called when a new connection is established for a client endpoint. This method can be used to differentiate a client aspect for a handler.",12,null],[11,"server_connected","","Called when a new connection is established for a server endpoint. This method can be used to differentiate a server aspect for a handler.",12,null],[11,"connection_lost","","Called when a TCP connection is lost with the handler that was setup for that connection.",12,null],[8,"Handler","","The core trait of this library. Implementing this trait provides the business logic of the WebSocket application.",null,null],[11,"on_shutdown","","Called when a request to shutdown all connections has been received.",13,{"i":[{"n":"self"}]}],[11,"on_open","","Called when the WebSocket handshake is successful and the connection is open for sending and receiving messages.",13,{"i":[{"n":"self"},{"n":"handshake"}],"o":{"n":"result"}}],[11,"on_message","","Called on incoming messages.",13,{"i":[{"n":"self"},{"n":"message"}],"o":{"n":"result"}}],[11,"on_close","","Called any time this endpoint receives a close control frame. This may be because the other endpoint is initiating a closing handshake, or it may be the other endpoint confirming the handshake initiated by this endpoint.",13,{"i":[{"n":"self"},{"n":"closecode"},{"n":"str"}]}],[11,"on_error","","Called when an error occurs on the WebSocket.",13,{"i":[{"n":"self"},{"n":"error"}]}],[11,"on_request","","A method for handling the low-level workings of the request portion of the WebSocket handshake.",13,{"i":[{"n":"self"},{"n":"request"}],"o":{"g":["response"],"n":"result"}}],[11,"on_response","","A method for handling the low-level workings of the response portion of the WebSocket handshake.",13,{"i":[{"n":"self"},{"n":"response"}],"o":{"n":"result"}}],[11,"on_timeout","","Called when a timeout is triggered.",13,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"result"}}],[11,"on_new_timeout","","Called when a timeout has been scheduled on the eventloop.",13,{"i":[{"n":"self"},{"n":"token"},{"n":"timeout"}],"o":{"n":"result"}}],[11,"on_frame","","A method for handling incoming frames.",13,{"i":[{"n":"self"},{"n":"frame"}],"o":{"g":["option"],"n":"result"}}],[11,"on_send_frame","","A method for handling outgoing frames.",13,{"i":[{"n":"self"},{"n":"frame"}],"o":{"g":["option"],"n":"result"}}],[11,"build_request","","A method for creating the initial handshake request for WebSocket clients.",13,{"i":[{"n":"self"},{"n":"url"}],"o":{"g":["request"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"settings"}}],[11,"default","","",2,{"o":{"n":"settings"}}],[11,"new","","Create a new WebSocket using the given Factory to create handlers.",14,{"i":[{"n":"f"}],"o":{"g":["websocket"],"n":"result"}}],[11,"bind","","Consume the WebSocket and bind to the specified address. If the `addr_spec` yields multiple addresses this will return after the first successful bind. `local_addr` can be called to determine which address it ended up binding to. After the server is succesfully bound you should start it using `run`.",14,{"i":[{"n":"self"},{"n":"a"}],"o":{"g":["websocket"],"n":"result"}}],[11,"listen","","Consume the WebSocket and listen for new connections on the specified address.",14,{"i":[{"n":"self"},{"n":"a"}],"o":{"g":["websocket"],"n":"result"}}],[11,"connect","","Queue an outgoing connection on this WebSocket. This method may be called multiple times, but the actual connections will not be established until after `run` is called.",14,{"i":[{"n":"self"},{"n":"url"}],"o":{"g":["websocket"],"n":"result"}}],[11,"run","","Run the WebSocket. This will run the encapsulated event loop blocking until the WebSocket is shutdown.",14,{"i":[{"n":"self"}],"o":{"g":["websocket"],"n":"result"}}],[11,"broadcaster","","Get a Sender that can be used to send messages on all connections. Calling `send` on this Sender is equivalent to calling `broadcast`. Calling `shutdown` on this Sender will shudown the WebSocket even if no connections have been established.",14,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"local_addr","","Get the local socket address this socket is bound to. Will return an error if the backend returns an error. Will return a `NotFound` error if this WebSocket is not a listening socket.",14,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"builder"}}],[11,"new","","Create a new Builder with default settings.",15,{"o":{"n":"builder"}}],[11,"build","","Build a WebSocket using this builder and a factory. It is possible to use the same builder to create multiple WebSockets.",15,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["websocket"],"n":"result"}}],[11,"with_settings","","Set the WebSocket settings to use.",15,{"i":[{"n":"self"},{"n":"settings"}],"o":{"n":"builder"}}],[11,"on_shutdown","","Called when a request to shutdown all connections has been received.",13,{"i":[{"n":"self"}]}],[11,"on_open","","Called when the WebSocket handshake is successful and the connection is open for sending and receiving messages.",13,{"i":[{"n":"self"},{"n":"handshake"}],"o":{"n":"result"}}],[11,"on_message","","Called on incoming messages.",13,{"i":[{"n":"self"},{"n":"message"}],"o":{"n":"result"}}],[11,"on_close","","Called any time this endpoint receives a close control frame. This may be because the other endpoint is initiating a closing handshake, or it may be the other endpoint confirming the handshake initiated by this endpoint.",13,{"i":[{"n":"self"},{"n":"closecode"},{"n":"str"}]}],[11,"on_error","","Called when an error occurs on the WebSocket.",13,{"i":[{"n":"self"},{"n":"error"}]}],[11,"on_request","","A method for handling the low-level workings of the request portion of the WebSocket handshake.",13,{"i":[{"n":"self"},{"n":"request"}],"o":{"g":["response"],"n":"result"}}],[11,"on_response","","A method for handling the low-level workings of the response portion of the WebSocket handshake.",13,{"i":[{"n":"self"},{"n":"response"}],"o":{"n":"result"}}],[11,"on_timeout","","Called when a timeout is triggered.",13,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"result"}}],[11,"on_new_timeout","","Called when a timeout has been scheduled on the eventloop.",13,{"i":[{"n":"self"},{"n":"token"},{"n":"timeout"}],"o":{"n":"result"}}],[11,"on_frame","","A method for handling incoming frames.",13,{"i":[{"n":"self"},{"n":"frame"}],"o":{"g":["option"],"n":"result"}}],[11,"on_send_frame","","A method for handling outgoing frames.",13,{"i":[{"n":"self"},{"n":"frame"}],"o":{"g":["option"],"n":"result"}}],[11,"build_request","","A method for creating the initial handshake request for WebSocket clients.",13,{"i":[{"n":"self"},{"n":"url"}],"o":{"g":["request"],"n":"result"}}],[11,"on_shutdown","","Called when the WebSocket is shutting down.",12,{"i":[{"n":"self"}]}],[11,"client_connected","","Called when a new connection is established for a client endpoint. This method can be used to differentiate a client aspect for a handler.",12,null],[11,"server_connected","","Called when a new connection is established for a server endpoint. This method can be used to differentiate a server aspect for a handler.",12,null],[11,"connection_lost","","Called when a TCP connection is lost with the handler that was setup for that connection.",12,null],[11,"from","ws::util","",11,{"i":[{"n":"usize"}],"o":{"n":"token"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"timeout"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"token"}}],[11,"cmp","","",11,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"ordering"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"partial_cmp","","",11,{"i":[{"n":"self"},{"n":"token"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",11,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"le","","",11,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"gt","","",11,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"ge","","",11,{"i":[{"n":"self"},{"n":"token"}],"o":{"n":"bool"}}],[11,"hash","","",11,null]],"paths":[[3,"Error"],[3,"Handshake"],[3,"Settings"],[4,"ErrorKind"],[4,"Message"],[4,"CloseCode"],[4,"OpCode"],[3,"Frame"],[3,"Request"],[3,"Response"],[3,"Sender"],[3,"Token"],[8,"Factory"],[8,"Handler"],[3,"WebSocket"],[3,"Builder"],[3,"Timeout"]]};
searchIndex["ws2_32"] = {"doc":"","items":[],"paths":[]};
searchIndex["zip"] = {"doc":"A basic ZipReader/Writer crate","items":[[4,"CompressionMethod","zip","Compression methods for the contents of a ZIP file.",null,null],[13,"Stored","","The file is stored (no compression)",0,null],[13,"Deflated","","The file is Deflated",0,null],[13,"Bzip2","","File is compressed using BZIP2 algorithm",0,null],[13,"Unsupported","","Unsupported compression method",0,null],[0,"read","","Structs for reading a ZIP archive",null,null],[3,"ZipArchive","zip::read","Wrapper for reading the contents of a ZIP file.",null,null],[3,"ZipFile","","A struct for reading a zip file",null,null],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Opens a Zip archive and parses the central directory",1,{"i":[{"n":"r"}],"o":{"g":["ziparchive"],"n":"zipresult"}}],[11,"len","","Number of files contained in this zip.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"offset","","Get the offset from the beginning of the underlying reader that this zip begins at, in bytes.",1,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"by_name","","Search for a file entry by name",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["zipfile"],"n":"zipresult"}}],[11,"by_index","","Get a contained file by index",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["zipfile"],"n":"zipresult"}}],[11,"into_inner","","Unwrap and return the inner reader object",1,{"i":[{"n":"self"}],"o":{"n":"r"}}],[11,"version_made_by","","Get the version of the file",2,null],[11,"name","","Get the name of the file",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"name_raw","","Get the name of the file, in the raw (internal) byte representation.",2,null],[11,"comment","","Get the comment of the file",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"compression","","Get the compression method used to store the file",2,{"i":[{"n":"self"}],"o":{"n":"compressionmethod"}}],[11,"compressed_size","","Get the size of the file in the archive",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"size","","Get the size of the file when uncompressed",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"last_modified","","Get the time the file was last modified",2,{"i":[{"n":"self"}],"o":{"n":"tm"}}],[11,"unix_mode","","Get unix mode for the file",2,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"crc32","","Get the CRC32 hash of the original file",2,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"data_start","","Get the starting offset of the data of the compressed file",2,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"read","","",2,null],[11,"clone","zip","",0,{"i":[{"n":"self"}],"o":{"n":"compressionmethod"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"compressionmethod"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"compressionmethod"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_u16","","Converts an u16 to its corresponding CompressionMethod",0,{"i":[{"n":"u16"}],"o":{"n":"compressionmethod"}}],[11,"to_u16","","Converts a CompressionMethod to a u16",0,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"write","","Structs for creating a new zip archive",null,null],[3,"ZipWriter","zip::write","Generator for ZIP files.",null,null],[3,"FileOptions","","Metadata for a file to be written",null,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"fileoptions"}}],[11,"default","","Construct a new FileOptions object",3,{"o":{"n":"fileoptions"}}],[11,"compression_method","","Set the compression method for the new file",3,{"i":[{"n":"self"},{"n":"compressionmethod"}],"o":{"n":"fileoptions"}}],[11,"last_modified_time","","Set the last modified time",3,{"i":[{"n":"self"},{"n":"tm"}],"o":{"n":"fileoptions"}}],[11,"unix_permissions","","Set the permissions for the new file.",3,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"fileoptions"}}],[11,"write","","",4,null],[11,"flush","","",4,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Initializes the ZipWriter.",4,{"i":[{"n":"w"}],"o":{"n":"zipwriter"}}],[11,"start_file","","Starts a file.",4,{"i":[{"n":"self"},{"n":"s"},{"n":"fileoptions"}],"o":{"n":"zipresult"}}],[11,"add_directory","","Add a directory entry.",4,{"i":[{"n":"self"},{"n":"s"},{"n":"fileoptions"}],"o":{"n":"zipresult"}}],[11,"finish","","Finish the last file and write all other zip-structures",4,{"i":[{"n":"self"}],"o":{"n":"zipresult"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[0,"result","zip","Error types that can be emitted from this library",null,null],[4,"ZipError","zip::result","Error type for Zip",null,null],[13,"Io","","An Error caused by I/O",5,null],[13,"InvalidArchive","","This file is probably not a zip archive",5,null],[13,"UnsupportedArchive","","This archive is not supported",5,null],[13,"FileNotFound","","The requested file could not be found in the archive",5,null],[6,"ZipResult","","Generic result type with ZipError as its error variant",null,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",5,{"i":[{"n":"error"}],"o":{"n":"ziperror"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",5,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}]],"paths":[[4,"CompressionMethod"],[3,"ZipArchive"],[3,"ZipFile"],[3,"FileOptions"],[3,"ZipWriter"],[4,"ZipError"]]};
initSearch(searchIndex);
